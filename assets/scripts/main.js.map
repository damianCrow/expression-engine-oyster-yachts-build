{"version":3,"sources":["src/_scripts/node_modules/browser-pack/_prelude.js","src/_scripts/node_modules/babel-polyfill/lib/index.js","src/_scripts/node_modules/core-js/fn/regexp/escape.js","src/_scripts/node_modules/core-js/modules/_a-function.js","src/_scripts/node_modules/core-js/modules/_a-number-value.js","src/_scripts/node_modules/core-js/modules/_add-to-unscopables.js","src/_scripts/node_modules/core-js/modules/_an-instance.js","src/_scripts/node_modules/core-js/modules/_an-object.js","src/_scripts/node_modules/core-js/modules/_array-copy-within.js","src/_scripts/node_modules/core-js/modules/_array-fill.js","src/_scripts/node_modules/core-js/modules/_array-from-iterable.js","src/_scripts/node_modules/core-js/modules/_array-includes.js","src/_scripts/node_modules/core-js/modules/_array-methods.js","src/_scripts/node_modules/core-js/modules/_array-reduce.js","src/_scripts/node_modules/core-js/modules/_array-species-constructor.js","src/_scripts/node_modules/core-js/modules/_array-species-create.js","src/_scripts/node_modules/core-js/modules/_bind.js","src/_scripts/node_modules/core-js/modules/_classof.js","src/_scripts/node_modules/core-js/modules/_cof.js","src/_scripts/node_modules/core-js/modules/_collection-strong.js","src/_scripts/node_modules/core-js/modules/_collection-to-json.js","src/_scripts/node_modules/core-js/modules/_collection-weak.js","src/_scripts/node_modules/core-js/modules/_collection.js","src/_scripts/node_modules/core-js/modules/_core.js","src/_scripts/node_modules/core-js/modules/_create-property.js","src/_scripts/node_modules/core-js/modules/_ctx.js","src/_scripts/node_modules/core-js/modules/_date-to-iso-string.js","src/_scripts/node_modules/core-js/modules/_date-to-primitive.js","src/_scripts/node_modules/core-js/modules/_defined.js","src/_scripts/node_modules/core-js/modules/_descriptors.js","src/_scripts/node_modules/core-js/modules/_dom-create.js","src/_scripts/node_modules/core-js/modules/_enum-bug-keys.js","src/_scripts/node_modules/core-js/modules/_enum-keys.js","src/_scripts/node_modules/core-js/modules/_export.js","src/_scripts/node_modules/core-js/modules/_fails-is-regexp.js","src/_scripts/node_modules/core-js/modules/_fails.js","src/_scripts/node_modules/core-js/modules/_fix-re-wks.js","src/_scripts/node_modules/core-js/modules/_flags.js","src/_scripts/node_modules/core-js/modules/_flatten-into-array.js","src/_scripts/node_modules/core-js/modules/_for-of.js","src/_scripts/node_modules/core-js/modules/_global.js","src/_scripts/node_modules/core-js/modules/_has.js","src/_scripts/node_modules/core-js/modules/_hide.js","src/_scripts/node_modules/core-js/modules/_html.js","src/_scripts/node_modules/core-js/modules/_ie8-dom-define.js","src/_scripts/node_modules/core-js/modules/_inherit-if-required.js","src/_scripts/node_modules/core-js/modules/_invoke.js","src/_scripts/node_modules/core-js/modules/_iobject.js","src/_scripts/node_modules/core-js/modules/_is-array-iter.js","src/_scripts/node_modules/core-js/modules/_is-array.js","src/_scripts/node_modules/core-js/modules/_is-integer.js","src/_scripts/node_modules/core-js/modules/_is-object.js","src/_scripts/node_modules/core-js/modules/_is-regexp.js","src/_scripts/node_modules/core-js/modules/_iter-call.js","src/_scripts/node_modules/core-js/modules/_iter-create.js","src/_scripts/node_modules/core-js/modules/_iter-define.js","src/_scripts/node_modules/core-js/modules/_iter-detect.js","src/_scripts/node_modules/core-js/modules/_iter-step.js","src/_scripts/node_modules/core-js/modules/_iterators.js","src/_scripts/node_modules/core-js/modules/_library.js","src/_scripts/node_modules/core-js/modules/_math-expm1.js","src/_scripts/node_modules/core-js/modules/_math-fround.js","src/_scripts/node_modules/core-js/modules/_math-log1p.js","src/_scripts/node_modules/core-js/modules/_math-scale.js","src/_scripts/node_modules/core-js/modules/_math-sign.js","src/_scripts/node_modules/core-js/modules/_meta.js","src/_scripts/node_modules/core-js/modules/_metadata.js","src/_scripts/node_modules/core-js/modules/_microtask.js","src/_scripts/node_modules/core-js/modules/_new-promise-capability.js","src/_scripts/node_modules/core-js/modules/_object-assign.js","src/_scripts/node_modules/core-js/modules/_object-create.js","src/_scripts/node_modules/core-js/modules/_object-dp.js","src/_scripts/node_modules/core-js/modules/_object-dps.js","src/_scripts/node_modules/core-js/modules/_object-forced-pam.js","src/_scripts/node_modules/core-js/modules/_object-gopd.js","src/_scripts/node_modules/core-js/modules/_object-gopn-ext.js","src/_scripts/node_modules/core-js/modules/_object-gopn.js","src/_scripts/node_modules/core-js/modules/_object-gops.js","src/_scripts/node_modules/core-js/modules/_object-gpo.js","src/_scripts/node_modules/core-js/modules/_object-keys-internal.js","src/_scripts/node_modules/core-js/modules/_object-keys.js","src/_scripts/node_modules/core-js/modules/_object-pie.js","src/_scripts/node_modules/core-js/modules/_object-sap.js","src/_scripts/node_modules/core-js/modules/_object-to-array.js","src/_scripts/node_modules/core-js/modules/_own-keys.js","src/_scripts/node_modules/core-js/modules/_parse-float.js","src/_scripts/node_modules/core-js/modules/_parse-int.js","src/_scripts/node_modules/core-js/modules/_perform.js","src/_scripts/node_modules/core-js/modules/_promise-resolve.js","src/_scripts/node_modules/core-js/modules/_property-desc.js","src/_scripts/node_modules/core-js/modules/_redefine-all.js","src/_scripts/node_modules/core-js/modules/_redefine.js","src/_scripts/node_modules/core-js/modules/_replacer.js","src/_scripts/node_modules/core-js/modules/_same-value.js","src/_scripts/node_modules/core-js/modules/_set-collection-from.js","src/_scripts/node_modules/core-js/modules/_set-collection-of.js","src/_scripts/node_modules/core-js/modules/_set-proto.js","src/_scripts/node_modules/core-js/modules/_set-species.js","src/_scripts/node_modules/core-js/modules/_set-to-string-tag.js","src/_scripts/node_modules/core-js/modules/_shared-key.js","src/_scripts/node_modules/core-js/modules/_shared.js","src/_scripts/node_modules/core-js/modules/_species-constructor.js","src/_scripts/node_modules/core-js/modules/_strict-method.js","src/_scripts/node_modules/core-js/modules/_string-at.js","src/_scripts/node_modules/core-js/modules/_string-context.js","src/_scripts/node_modules/core-js/modules/_string-html.js","src/_scripts/node_modules/core-js/modules/_string-pad.js","src/_scripts/node_modules/core-js/modules/_string-repeat.js","src/_scripts/node_modules/core-js/modules/_string-trim.js","src/_scripts/node_modules/core-js/modules/_string-ws.js","src/_scripts/node_modules/core-js/modules/_task.js","src/_scripts/node_modules/core-js/modules/_to-absolute-index.js","src/_scripts/node_modules/core-js/modules/_to-index.js","src/_scripts/node_modules/core-js/modules/_to-integer.js","src/_scripts/node_modules/core-js/modules/_to-iobject.js","src/_scripts/node_modules/core-js/modules/_to-length.js","src/_scripts/node_modules/core-js/modules/_to-object.js","src/_scripts/node_modules/core-js/modules/_to-primitive.js","src/_scripts/node_modules/core-js/modules/_typed-array.js","src/_scripts/node_modules/core-js/modules/_typed-buffer.js","src/_scripts/node_modules/core-js/modules/_typed.js","src/_scripts/node_modules/core-js/modules/_uid.js","src/_scripts/node_modules/core-js/modules/_validate-collection.js","src/_scripts/node_modules/core-js/modules/_wks-define.js","src/_scripts/node_modules/core-js/modules/_wks-ext.js","src/_scripts/node_modules/core-js/modules/_wks.js","src/_scripts/node_modules/core-js/modules/core.get-iterator-method.js","src/_scripts/node_modules/core-js/modules/core.regexp.escape.js","src/_scripts/node_modules/core-js/modules/es6.array.copy-within.js","src/_scripts/node_modules/core-js/modules/es6.array.every.js","src/_scripts/node_modules/core-js/modules/es6.array.fill.js","src/_scripts/node_modules/core-js/modules/es6.array.filter.js","src/_scripts/node_modules/core-js/modules/es6.array.find-index.js","src/_scripts/node_modules/core-js/modules/es6.array.find.js","src/_scripts/node_modules/core-js/modules/es6.array.for-each.js","src/_scripts/node_modules/core-js/modules/es6.array.from.js","src/_scripts/node_modules/core-js/modules/es6.array.index-of.js","src/_scripts/node_modules/core-js/modules/es6.array.is-array.js","src/_scripts/node_modules/core-js/modules/es6.array.iterator.js","src/_scripts/node_modules/core-js/modules/es6.array.join.js","src/_scripts/node_modules/core-js/modules/es6.array.last-index-of.js","src/_scripts/node_modules/core-js/modules/es6.array.map.js","src/_scripts/node_modules/core-js/modules/es6.array.of.js","src/_scripts/node_modules/core-js/modules/es6.array.reduce-right.js","src/_scripts/node_modules/core-js/modules/es6.array.reduce.js","src/_scripts/node_modules/core-js/modules/es6.array.slice.js","src/_scripts/node_modules/core-js/modules/es6.array.some.js","src/_scripts/node_modules/core-js/modules/es6.array.sort.js","src/_scripts/node_modules/core-js/modules/es6.array.species.js","src/_scripts/node_modules/core-js/modules/es6.date.now.js","src/_scripts/node_modules/core-js/modules/es6.date.to-iso-string.js","src/_scripts/node_modules/core-js/modules/es6.date.to-json.js","src/_scripts/node_modules/core-js/modules/es6.date.to-primitive.js","src/_scripts/node_modules/core-js/modules/es6.date.to-string.js","src/_scripts/node_modules/core-js/modules/es6.function.bind.js","src/_scripts/node_modules/core-js/modules/es6.function.has-instance.js","src/_scripts/node_modules/core-js/modules/es6.function.name.js","src/_scripts/node_modules/core-js/modules/es6.map.js","src/_scripts/node_modules/core-js/modules/es6.math.acosh.js","src/_scripts/node_modules/core-js/modules/es6.math.asinh.js","src/_scripts/node_modules/core-js/modules/es6.math.atanh.js","src/_scripts/node_modules/core-js/modules/es6.math.cbrt.js","src/_scripts/node_modules/core-js/modules/es6.math.clz32.js","src/_scripts/node_modules/core-js/modules/es6.math.cosh.js","src/_scripts/node_modules/core-js/modules/es6.math.expm1.js","src/_scripts/node_modules/core-js/modules/es6.math.fround.js","src/_scripts/node_modules/core-js/modules/es6.math.hypot.js","src/_scripts/node_modules/core-js/modules/es6.math.imul.js","src/_scripts/node_modules/core-js/modules/es6.math.log10.js","src/_scripts/node_modules/core-js/modules/es6.math.log1p.js","src/_scripts/node_modules/core-js/modules/es6.math.log2.js","src/_scripts/node_modules/core-js/modules/es6.math.sign.js","src/_scripts/node_modules/core-js/modules/es6.math.sinh.js","src/_scripts/node_modules/core-js/modules/es6.math.tanh.js","src/_scripts/node_modules/core-js/modules/es6.math.trunc.js","src/_scripts/node_modules/core-js/modules/es6.number.constructor.js","src/_scripts/node_modules/core-js/modules/es6.number.epsilon.js","src/_scripts/node_modules/core-js/modules/es6.number.is-finite.js","src/_scripts/node_modules/core-js/modules/es6.number.is-integer.js","src/_scripts/node_modules/core-js/modules/es6.number.is-nan.js","src/_scripts/node_modules/core-js/modules/es6.number.is-safe-integer.js","src/_scripts/node_modules/core-js/modules/es6.number.max-safe-integer.js","src/_scripts/node_modules/core-js/modules/es6.number.min-safe-integer.js","src/_scripts/node_modules/core-js/modules/es6.number.parse-float.js","src/_scripts/node_modules/core-js/modules/es6.number.parse-int.js","src/_scripts/node_modules/core-js/modules/es6.number.to-fixed.js","src/_scripts/node_modules/core-js/modules/es6.number.to-precision.js","src/_scripts/node_modules/core-js/modules/es6.object.assign.js","src/_scripts/node_modules/core-js/modules/es6.object.create.js","src/_scripts/node_modules/core-js/modules/es6.object.define-properties.js","src/_scripts/node_modules/core-js/modules/es6.object.define-property.js","src/_scripts/node_modules/core-js/modules/es6.object.freeze.js","src/_scripts/node_modules/core-js/modules/es6.object.get-own-property-descriptor.js","src/_scripts/node_modules/core-js/modules/es6.object.get-own-property-names.js","src/_scripts/node_modules/core-js/modules/es6.object.get-prototype-of.js","src/_scripts/node_modules/core-js/modules/es6.object.is-extensible.js","src/_scripts/node_modules/core-js/modules/es6.object.is-frozen.js","src/_scripts/node_modules/core-js/modules/es6.object.is-sealed.js","src/_scripts/node_modules/core-js/modules/es6.object.is.js","src/_scripts/node_modules/core-js/modules/es6.object.keys.js","src/_scripts/node_modules/core-js/modules/es6.object.prevent-extensions.js","src/_scripts/node_modules/core-js/modules/es6.object.seal.js","src/_scripts/node_modules/core-js/modules/es6.object.set-prototype-of.js","src/_scripts/node_modules/core-js/modules/es6.object.to-string.js","src/_scripts/node_modules/core-js/modules/es6.parse-float.js","src/_scripts/node_modules/core-js/modules/es6.parse-int.js","src/_scripts/node_modules/core-js/modules/es6.promise.js","src/_scripts/node_modules/core-js/modules/es6.reflect.apply.js","src/_scripts/node_modules/core-js/modules/es6.reflect.construct.js","src/_scripts/node_modules/core-js/modules/es6.reflect.define-property.js","src/_scripts/node_modules/core-js/modules/es6.reflect.delete-property.js","src/_scripts/node_modules/core-js/modules/es6.reflect.enumerate.js","src/_scripts/node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js","src/_scripts/node_modules/core-js/modules/es6.reflect.get-prototype-of.js","src/_scripts/node_modules/core-js/modules/es6.reflect.get.js","src/_scripts/node_modules/core-js/modules/es6.reflect.has.js","src/_scripts/node_modules/core-js/modules/es6.reflect.is-extensible.js","src/_scripts/node_modules/core-js/modules/es6.reflect.own-keys.js","src/_scripts/node_modules/core-js/modules/es6.reflect.prevent-extensions.js","src/_scripts/node_modules/core-js/modules/es6.reflect.set-prototype-of.js","src/_scripts/node_modules/core-js/modules/es6.reflect.set.js","src/_scripts/node_modules/core-js/modules/es6.regexp.constructor.js","src/_scripts/node_modules/core-js/modules/es6.regexp.flags.js","src/_scripts/node_modules/core-js/modules/es6.regexp.match.js","src/_scripts/node_modules/core-js/modules/es6.regexp.replace.js","src/_scripts/node_modules/core-js/modules/es6.regexp.search.js","src/_scripts/node_modules/core-js/modules/es6.regexp.split.js","src/_scripts/node_modules/core-js/modules/es6.regexp.to-string.js","src/_scripts/node_modules/core-js/modules/es6.set.js","src/_scripts/node_modules/core-js/modules/es6.string.anchor.js","src/_scripts/node_modules/core-js/modules/es6.string.big.js","src/_scripts/node_modules/core-js/modules/es6.string.blink.js","src/_scripts/node_modules/core-js/modules/es6.string.bold.js","src/_scripts/node_modules/core-js/modules/es6.string.code-point-at.js","src/_scripts/node_modules/core-js/modules/es6.string.ends-with.js","src/_scripts/node_modules/core-js/modules/es6.string.fixed.js","src/_scripts/node_modules/core-js/modules/es6.string.fontcolor.js","src/_scripts/node_modules/core-js/modules/es6.string.fontsize.js","src/_scripts/node_modules/core-js/modules/es6.string.from-code-point.js","src/_scripts/node_modules/core-js/modules/es6.string.includes.js","src/_scripts/node_modules/core-js/modules/es6.string.italics.js","src/_scripts/node_modules/core-js/modules/es6.string.iterator.js","src/_scripts/node_modules/core-js/modules/es6.string.link.js","src/_scripts/node_modules/core-js/modules/es6.string.raw.js","src/_scripts/node_modules/core-js/modules/es6.string.repeat.js","src/_scripts/node_modules/core-js/modules/es6.string.small.js","src/_scripts/node_modules/core-js/modules/es6.string.starts-with.js","src/_scripts/node_modules/core-js/modules/es6.string.strike.js","src/_scripts/node_modules/core-js/modules/es6.string.sub.js","src/_scripts/node_modules/core-js/modules/es6.string.sup.js","src/_scripts/node_modules/core-js/modules/es6.string.trim.js","src/_scripts/node_modules/core-js/modules/es6.symbol.js","src/_scripts/node_modules/core-js/modules/es6.typed.array-buffer.js","src/_scripts/node_modules/core-js/modules/es6.typed.data-view.js","src/_scripts/node_modules/core-js/modules/es6.typed.float32-array.js","src/_scripts/node_modules/core-js/modules/es6.typed.float64-array.js","src/_scripts/node_modules/core-js/modules/es6.typed.int16-array.js","src/_scripts/node_modules/core-js/modules/es6.typed.int32-array.js","src/_scripts/node_modules/core-js/modules/es6.typed.int8-array.js","src/_scripts/node_modules/core-js/modules/es6.typed.uint16-array.js","src/_scripts/node_modules/core-js/modules/es6.typed.uint32-array.js","src/_scripts/node_modules/core-js/modules/es6.typed.uint8-array.js","src/_scripts/node_modules/core-js/modules/es6.typed.uint8-clamped-array.js","src/_scripts/node_modules/core-js/modules/es6.weak-map.js","src/_scripts/node_modules/core-js/modules/es6.weak-set.js","src/_scripts/node_modules/core-js/modules/es7.array.flat-map.js","src/_scripts/node_modules/core-js/modules/es7.array.flatten.js","src/_scripts/node_modules/core-js/modules/es7.array.includes.js","src/_scripts/node_modules/core-js/modules/es7.asap.js","src/_scripts/node_modules/core-js/modules/es7.error.is-error.js","src/_scripts/node_modules/core-js/modules/es7.global.js","src/_scripts/node_modules/core-js/modules/es7.map.from.js","src/_scripts/node_modules/core-js/modules/es7.map.of.js","src/_scripts/node_modules/core-js/modules/es7.map.to-json.js","src/_scripts/node_modules/core-js/modules/es7.math.clamp.js","src/_scripts/node_modules/core-js/modules/es7.math.deg-per-rad.js","src/_scripts/node_modules/core-js/modules/es7.math.degrees.js","src/_scripts/node_modules/core-js/modules/es7.math.fscale.js","src/_scripts/node_modules/core-js/modules/es7.math.iaddh.js","src/_scripts/node_modules/core-js/modules/es7.math.imulh.js","src/_scripts/node_modules/core-js/modules/es7.math.isubh.js","src/_scripts/node_modules/core-js/modules/es7.math.rad-per-deg.js","src/_scripts/node_modules/core-js/modules/es7.math.radians.js","src/_scripts/node_modules/core-js/modules/es7.math.scale.js","src/_scripts/node_modules/core-js/modules/es7.math.signbit.js","src/_scripts/node_modules/core-js/modules/es7.math.umulh.js","src/_scripts/node_modules/core-js/modules/es7.object.define-getter.js","src/_scripts/node_modules/core-js/modules/es7.object.define-setter.js","src/_scripts/node_modules/core-js/modules/es7.object.entries.js","src/_scripts/node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","src/_scripts/node_modules/core-js/modules/es7.object.lookup-getter.js","src/_scripts/node_modules/core-js/modules/es7.object.lookup-setter.js","src/_scripts/node_modules/core-js/modules/es7.object.values.js","src/_scripts/node_modules/core-js/modules/es7.observable.js","src/_scripts/node_modules/core-js/modules/es7.promise.finally.js","src/_scripts/node_modules/core-js/modules/es7.promise.try.js","src/_scripts/node_modules/core-js/modules/es7.reflect.define-metadata.js","src/_scripts/node_modules/core-js/modules/es7.reflect.delete-metadata.js","src/_scripts/node_modules/core-js/modules/es7.reflect.get-metadata-keys.js","src/_scripts/node_modules/core-js/modules/es7.reflect.get-metadata.js","src/_scripts/node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js","src/_scripts/node_modules/core-js/modules/es7.reflect.get-own-metadata.js","src/_scripts/node_modules/core-js/modules/es7.reflect.has-metadata.js","src/_scripts/node_modules/core-js/modules/es7.reflect.has-own-metadata.js","src/_scripts/node_modules/core-js/modules/es7.reflect.metadata.js","src/_scripts/node_modules/core-js/modules/es7.set.from.js","src/_scripts/node_modules/core-js/modules/es7.set.of.js","src/_scripts/node_modules/core-js/modules/es7.set.to-json.js","src/_scripts/node_modules/core-js/modules/es7.string.at.js","src/_scripts/node_modules/core-js/modules/es7.string.match-all.js","src/_scripts/node_modules/core-js/modules/es7.string.pad-end.js","src/_scripts/node_modules/core-js/modules/es7.string.pad-start.js","src/_scripts/node_modules/core-js/modules/es7.string.trim-left.js","src/_scripts/node_modules/core-js/modules/es7.string.trim-right.js","src/_scripts/node_modules/core-js/modules/es7.symbol.async-iterator.js","src/_scripts/node_modules/core-js/modules/es7.symbol.observable.js","src/_scripts/node_modules/core-js/modules/es7.system.global.js","src/_scripts/node_modules/core-js/modules/es7.weak-map.from.js","src/_scripts/node_modules/core-js/modules/es7.weak-map.of.js","src/_scripts/node_modules/core-js/modules/es7.weak-set.from.js","src/_scripts/node_modules/core-js/modules/es7.weak-set.of.js","src/_scripts/node_modules/core-js/modules/web.dom.iterable.js","src/_scripts/node_modules/core-js/modules/web.immediate.js","src/_scripts/node_modules/core-js/modules/web.timers.js","src/_scripts/node_modules/core-js/shim.js","src/_scripts/node_modules/foundation-sites/dist/js/npm.js","src/_scripts/node_modules/foundation-sites/js/foundation.abide.js","src/_scripts/node_modules/foundation-sites/js/foundation.accordion.js","src/_scripts/node_modules/foundation-sites/js/foundation.accordionMenu.js","src/_scripts/node_modules/foundation-sites/js/foundation.core.js","src/_scripts/node_modules/foundation-sites/js/foundation.drilldown.js","src/_scripts/node_modules/foundation-sites/js/foundation.dropdown.js","src/_scripts/node_modules/foundation-sites/js/foundation.dropdownMenu.js","src/_scripts/node_modules/foundation-sites/js/foundation.equalizer.js","src/_scripts/node_modules/foundation-sites/js/foundation.interchange.js","src/_scripts/node_modules/foundation-sites/js/foundation.magellan.js","src/_scripts/node_modules/foundation-sites/js/foundation.offcanvas.js","src/_scripts/node_modules/foundation-sites/js/foundation.orbit.js","src/_scripts/node_modules/foundation-sites/js/foundation.plugin.js","src/_scripts/node_modules/foundation-sites/js/foundation.positionable.js","src/_scripts/node_modules/foundation-sites/js/foundation.responsiveAccordionTabs.js","src/_scripts/node_modules/foundation-sites/js/foundation.responsiveMenu.js","src/_scripts/node_modules/foundation-sites/js/foundation.responsiveToggle.js","src/_scripts/node_modules/foundation-sites/js/foundation.reveal.js","src/_scripts/node_modules/foundation-sites/js/foundation.slider.js","src/_scripts/node_modules/foundation-sites/js/foundation.smoothScroll.js","src/_scripts/node_modules/foundation-sites/js/foundation.sticky.js","src/_scripts/node_modules/foundation-sites/js/foundation.tabs.js","src/_scripts/node_modules/foundation-sites/js/foundation.toggler.js","src/_scripts/node_modules/foundation-sites/js/foundation.tooltip.js","src/_scripts/node_modules/foundation-sites/js/foundation.util.box.js","src/_scripts/node_modules/foundation-sites/js/foundation.util.core.js","src/_scripts/node_modules/foundation-sites/js/foundation.util.imageLoader.js","src/_scripts/node_modules/foundation-sites/js/foundation.util.keyboard.js","src/_scripts/node_modules/foundation-sites/js/foundation.util.mediaQuery.js","src/_scripts/node_modules/foundation-sites/js/foundation.util.motion.js","src/_scripts/node_modules/foundation-sites/js/foundation.util.nest.js","src/_scripts/node_modules/foundation-sites/js/foundation.util.timer.js","src/_scripts/node_modules/foundation-sites/js/foundation.util.touch.js","src/_scripts/node_modules/foundation-sites/js/foundation.util.triggers.js","src/_scripts/node_modules/jquery.cycle2/src/jquery.cycle2.min.js","src/_scripts/node_modules/jquery/dist/jquery.js","src/_scripts/node_modules/lazysizes/lazysizes.js","src/_scripts/node_modules/lazysizes/plugins/fix-ios-sizes/fix-ios-sizes.js","src/_scripts/node_modules/lazysizes/plugins/optimumx/ls.optimumx.js","src/_scripts/node_modules/lazysizes/plugins/parent-fit/ls.parent-fit.js","src/_scripts/node_modules/lazysizes/plugins/respimg/ls.respimg.js","src/_scripts/node_modules/lightgallery/dist/js/lightgallery.js","src/_scripts/node_modules/lightgallery/modules/lg-fullscreen.js","src/_scripts/node_modules/lightgallery/modules/lg-hash.js","src/_scripts/node_modules/lightgallery/modules/lg-pager.js","src/_scripts/node_modules/lightgallery/modules/lg-thumbnail.js","src/_scripts/node_modules/lightgallery/modules/lg-zoom.js","src/_scripts/node_modules/regenerator-runtime/runtime.js","src/_scripts/node_modules/select2/dist/js/select2.js","src/_scripts/node_modules/simpleweather/jquery.simpleWeather.js","src/_scripts/src/_modules/brokerage/brokerage-filters.js","src/_scripts/src/_modules/burger/burger.js","src/_scripts/src/_modules/charter/charter-filters.js","src/_scripts/src/_modules/filters/filters.js","src/_scripts/src/_modules/footer/footer.js","src/_scripts/src/_modules/form-validation/form-validation.js","src/_scripts/src/_modules/gallery-modal/gallery-modal.js","src/_scripts/src/_modules/global-nav/global-nav.js","src/_scripts/src/_modules/header/header.js","src/_scripts/src/_modules/homepage/homepage.js","src/_scripts/src/_modules/owners-area/owners-area-modal.js","src/_scripts/src/_modules/quote-testimonials/quote-testimonials.js","src/_scripts/src/_modules/shortlist/shortlist.js","src/_scripts/src/_modules/sub-bar/sub-bar.js","src/_scripts/src/_modules/top-message-bar/top-message-bar.js","src/_scripts/src/_modules/weather/average-climate-data.js","src/_scripts/src/_modules/weather/weather-icons.js","src/_scripts/src/_modules/weather/weather.js","src/_scripts/src/_scripts/breakpoints.js","src/_scripts/src/_scripts/helper-functions.js","src/_scripts/src/_scripts/main.js"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC3BA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;;ACHA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACphepRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;;ACDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACldA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\"use strict\";\n\nrequire(\"core-js/shim\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nrequire(\"core-js/fn/regexp/escape\");\n\nif (global._babelPolyfill) {\n  throw new Error(\"only one instance of babel-polyfill is allowed\");\n}\nglobal._babelPolyfill = true;\n\nvar DEFINE_PROPERTY = \"defineProperty\";\nfunction define(O, key, value) {\n  O[key] || Object[DEFINE_PROPERTY](O, key, {\n    writable: true,\n    configurable: true,\n    value: value\n  });\n}\n\ndefine(String.prototype, \"padLeft\", \"\".padStart);\ndefine(String.prototype, \"padRight\", \"\".padEnd);\n\n\"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill\".split(\",\").forEach(function (key) {\n  [][key] && define(Array, key, Function.call.bind([][key]));\n});","require('../../modules/core.regexp.escape');\nmodule.exports = require('../../modules/_core').RegExp.escape;\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","var cof = require('./_cof');\nmodule.exports = function (it, msg) {\n  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);\n  return +it;\n};\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\n\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","var forOf = require('./_for-of');\n\nmodule.exports = function (iter, ITERATOR) {\n  var result = [];\n  forOf(iter, false, result.push, result, ITERATOR);\n  return result;\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","var aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar toLength = require('./_to-length');\n\nmodule.exports = function (that, callbackfn, aLen, memo, isRight) {\n  aFunction(callbackfn);\n  var O = toObject(that);\n  var self = IObject(O);\n  var length = toLength(O.length);\n  var index = isRight ? length - 1 : 0;\n  var i = isRight ? -1 : 1;\n  if (aLen < 2) for (;;) {\n    if (index in self) {\n      memo = self[index];\n      index += i;\n      break;\n    }\n    index += i;\n    if (isRight ? index < 0 : length <= index) {\n      throw TypeError('Reduce of empty array with no initial value');\n    }\n  }\n  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {\n    memo = callbackfn(memo, self[index], index, O);\n  }\n  return memo;\n};\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","'use strict';\nvar aFunction = require('./_a-function');\nvar isObject = require('./_is-object');\nvar invoke = require('./_invoke');\nvar arraySlice = [].slice;\nvar factories = {};\n\nvar construct = function (F, len, args) {\n  if (!(len in factories)) {\n    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = arraySlice.call(arguments, 1);\n  var bound = function (/* args... */) {\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n  return bound;\n};\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","'use strict';\nvar dP = require('./_object-dp').f;\nvar create = require('./_object-create');\nvar redefineAll = require('./_redefine-all');\nvar ctx = require('./_ctx');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar $iterDefine = require('./_iter-define');\nvar step = require('./_iter-step');\nvar setSpecies = require('./_set-species');\nvar DESCRIPTORS = require('./_descriptors');\nvar fastKey = require('./_meta').fastKey;\nvar validate = require('./_validate-collection');\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar classof = require('./_classof');\nvar from = require('./_array-from-iterable');\nmodule.exports = function (NAME) {\n  return function toJSON() {\n    if (classof(this) != NAME) throw TypeError(NAME + \"#toJSON isn't generic\");\n    return from(this);\n  };\n};\n","'use strict';\nvar redefineAll = require('./_redefine-all');\nvar getWeak = require('./_meta').getWeak;\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar createArrayMethod = require('./_array-methods');\nvar $has = require('./_has');\nvar validate = require('./_validate-collection');\nvar arrayFind = createArrayMethod(5);\nvar arrayFindIndex = createArrayMethod(6);\nvar id = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function (that) {\n  return that._l || (that._l = new UncaughtFrozenStore());\n};\nvar UncaughtFrozenStore = function () {\n  this.a = [];\n};\nvar findUncaughtFrozen = function (store, key) {\n  return arrayFind(store.a, function (it) {\n    return it[0] === key;\n  });\n};\nUncaughtFrozenStore.prototype = {\n  get: function (key) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) return entry[1];\n  },\n  has: function (key) {\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function (key, value) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) entry[1] = value;\n    else this.a.push([key, value]);\n  },\n  'delete': function (key) {\n    var index = arrayFindIndex(this.a, function (it) {\n      return it[0] === key;\n    });\n    if (~index) this.a.splice(index, 1);\n    return !!~index;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;      // collection type\n      that._i = id++;      // collection id\n      that._l = undefined; // leak store for uncaught frozen objects\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function (key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);\n        return data && $has(data, this._i) && delete data[this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);\n        return data && $has(data, this._i);\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var data = getWeak(anObject(key), true);\n    if (data === true) uncaughtFrozenStore(that).set(key, value);\n    else data[that._i] = value;\n    return that;\n  },\n  ufstore: uncaughtFrozenStore\n};\n","'use strict';\nvar global = require('./_global');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar redefineAll = require('./_redefine-all');\nvar meta = require('./_meta');\nvar forOf = require('./_for-of');\nvar anInstance = require('./_an-instance');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar $iterDetect = require('./_iter-detect');\nvar setToStringTag = require('./_set-to-string-tag');\nvar inheritIfRequired = require('./_inherit-if-required');\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  var fixMethod = function (KEY) {\n    var fn = proto[KEY];\n    redefine(proto, KEY,\n      KEY == 'delete' ? function (a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a) {\n        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }\n        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }\n    );\n  };\n  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    var instance = new C();\n    // early implementations not supports chaining\n    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n    // most early implementations doesn't supports iterables, most modern - not close it correctly\n    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new\n    // for early implementations -0 and +0 not the same\n    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n      // V8 ~ Chromium 42- fails only with 5+ elements\n      var $instance = new C();\n      var index = 5;\n      while (index--) $instance[ADDER](index, index);\n      return !$instance.has(-0);\n    });\n    if (!ACCEPT_ITERABLES) {\n      C = wrapper(function (target, iterable) {\n        anInstance(target, C, NAME);\n        var that = inheritIfRequired(new Base(), target, C);\n        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n        return that;\n      });\n      C.prototype = proto;\n      proto.constructor = C;\n    }\n    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n    // weak collections should not contains .clear method\n    if (IS_WEAK && proto.clear) delete proto.clear;\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F * (C != Base), O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n","var core = module.exports = { version: '2.5.1' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","'use strict';\n// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar fails = require('./_fails');\nvar getTime = Date.prototype.getTime;\nvar $toISOString = Date.prototype.toISOString;\n\nvar lz = function (num) {\n  return num > 9 ? num : '0' + num;\n};\n\n// PhantomJS / old WebKit has a broken implementations\nmodule.exports = (fails(function () {\n  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n}) || !fails(function () {\n  $toISOString.call(new Date(NaN));\n})) ? function toISOString() {\n  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n  var d = this;\n  var y = d.getUTCFullYear();\n  var m = d.getUTCMilliseconds();\n  var s = y < 0 ? '-' : y > 9999 ? '+' : '';\n  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +\n    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +\n    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +\n    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';\n} : $toISOString;\n","'use strict';\nvar anObject = require('./_an-object');\nvar toPrimitive = require('./_to-primitive');\nvar NUMBER = 'number';\n\nmodule.exports = function (hint) {\n  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');\n  return toPrimitive(anObject(this), hint != NUMBER);\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","var MATCH = require('./_wks')('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","'use strict';\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n  var fns = exec(defined, SYMBOL, ''[KEY]);\n  var strfn = fns[0];\n  var rxfn = fns[1];\n  if (fails(function () {\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  })) {\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar isArray = require('./_is-array');\nvar isObject = require('./_is-object');\nvar toLength = require('./_to-length');\nvar ctx = require('./_ctx');\nvar IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');\n\nfunction flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;\n  var element, spreadable;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      spreadable = false;\n      if (isObject(element)) {\n        spreadable = element[IS_CONCAT_SPREADABLE];\n        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);\n      }\n\n      if (spreadable && depth > 0) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1fffffffffffff) throw TypeError();\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n}\n\nmodule.exports = flattenIntoArray;\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar setPrototypeOf = require('./_set-proto').set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","// 20.1.2.3 Number.isInteger(number)\nvar isObject = require('./_is-object');\nvar floor = Math.floor;\nmodule.exports = function isInteger(it) {\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","module.exports = {};\n","module.exports = false;\n","// 20.2.2.14 Math.expm1(x)\nvar $expm1 = Math.expm1;\nmodule.exports = (!$expm1\n  // Old FF bug\n  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168\n  // Tor Browser bug\n  || $expm1(-2e-17) != -2e-17\n) ? function expm1(x) {\n  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n} : $expm1;\n","// 20.2.2.16 Math.fround(x)\nvar sign = require('./_math-sign');\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n","// 20.2.2.20 Math.log1p(x)\nmodule.exports = Math.log1p || function log1p(x) {\n  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n};\n","// https://rwaldron.github.io/proposal-math-extensions/\nmodule.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\n  if (\n    arguments.length === 0\n      // eslint-disable-next-line no-self-compare\n      || x != x\n      // eslint-disable-next-line no-self-compare\n      || inLow != inLow\n      // eslint-disable-next-line no-self-compare\n      || inHigh != inHigh\n      // eslint-disable-next-line no-self-compare\n      || outLow != outLow\n      // eslint-disable-next-line no-self-compare\n      || outHigh != outHigh\n  ) return NaN;\n  if (x === Infinity || x === -Infinity) return x;\n  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;\n};\n","// 20.2.2.28 Math.sign(x)\nmodule.exports = Math.sign || function sign(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var Map = require('./es6.map');\nvar $export = require('./_export');\nvar shared = require('./_shared')('metadata');\nvar store = shared.store || (shared.store = new (require('./es6.weak-map'))());\n\nvar getOrCreateMetadataMap = function (target, targetKey, create) {\n  var targetMetadata = store.get(target);\n  if (!targetMetadata) {\n    if (!create) return undefined;\n    store.set(target, targetMetadata = new Map());\n  }\n  var keyMetadata = targetMetadata.get(targetKey);\n  if (!keyMetadata) {\n    if (!create) return undefined;\n    targetMetadata.set(targetKey, keyMetadata = new Map());\n  } return keyMetadata;\n};\nvar ordinaryHasOwnMetadata = function (MetadataKey, O, P) {\n  var metadataMap = getOrCreateMetadataMap(O, P, false);\n  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);\n};\nvar ordinaryGetOwnMetadata = function (MetadataKey, O, P) {\n  var metadataMap = getOrCreateMetadataMap(O, P, false);\n  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);\n};\nvar ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {\n  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);\n};\nvar ordinaryOwnMetadataKeys = function (target, targetKey) {\n  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);\n  var keys = [];\n  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });\n  return keys;\n};\nvar toMetaKey = function (it) {\n  return it === undefined || typeof it == 'symbol' ? it : String(it);\n};\nvar exp = function (O) {\n  $export($export.S, 'Reflect', O);\n};\n\nmodule.exports = {\n  store: store,\n  map: getOrCreateMetadataMap,\n  has: ordinaryHasOwnMetadata,\n  get: ordinaryGetOwnMetadata,\n  set: ordinaryDefineOwnMetadata,\n  keys: ordinaryOwnMetadataKeys,\n  key: toMetaKey,\n  exp: exp\n};\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver\n  } else if (Observer) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    var promise = Promise.resolve();\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","'use strict';\n// Forced replacement prototype accessors methods\nmodule.exports = require('./_library') || !require('./_fails')(function () {\n  var K = Math.random();\n  // In FF throws only define methods\n  // eslint-disable-next-line no-undef, no-useless-call\n  __defineSetter__.call(null, K, function () { /* empty */ });\n  delete require('./_global')[K];\n});\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = {}.propertyIsEnumerable;\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","var getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) if (isEnum.call(O, key = keys[i++])) {\n      result.push(isEntries ? [key, O[key]] : O[key]);\n    } return result;\n  };\n};\n","// all object keys, includes non-enumerable and symbols\nvar gOPN = require('./_object-gopn');\nvar gOPS = require('./_object-gops');\nvar anObject = require('./_an-object');\nvar Reflect = require('./_global').Reflect;\nmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {\n  var keys = gOPN.f(anObject(it));\n  var getSymbols = gOPS.f;\n  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n};\n","var $parseFloat = require('./_global').parseFloat;\nvar $trim = require('./_string-trim').trim;\n\nmodule.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {\n  var string = $trim(String(str), 3);\n  var result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;\n","var $parseInt = require('./_global').parseInt;\nvar $trim = require('./_string-trim').trim;\nvar ws = require('./_string-ws');\nvar hex = /^[-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var redefine = require('./_redefine');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","module.exports = function (regExp, replace) {\n  var replacer = replace === Object(replace) ? function (part) {\n    return replace[part];\n  } : replace;\n  return function (it) {\n    return String(it).replace(regExp, replacer);\n  };\n};\n","// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y) {\n  // eslint-disable-next-line no-self-compare\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar ctx = require('./_ctx');\nvar forOf = require('./_for-of');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {\n    var mapFn = arguments[1];\n    var mapping, A, n, cb;\n    aFunction(this);\n    mapping = mapFn !== undefined;\n    if (mapping) aFunction(mapFn);\n    if (source == undefined) return new this();\n    A = [];\n    if (mapping) {\n      n = 0;\n      cb = ctx(mapFn, arguments[2], 2);\n      forOf(source, false, function (nextItem) {\n        A.push(cb(nextItem, n++));\n      });\n    } else {\n      forOf(source, false, A.push, A);\n    }\n    return new this(A);\n  } });\n};\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { of: function of() {\n    var length = arguments.length;\n    var A = Array(length);\n    while (length--) A[length] = arguments[length];\n    return new this(A);\n  } });\n};\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function (key) {\n  return store[key] || (store[key] = {});\n};\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('./_to-length');\nvar repeat = require('./_string-repeat');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n","var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// https://tc39.github.io/ecma262/#sec-toindex\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nmodule.exports = function (it) {\n  if (it === undefined) return 0;\n  var number = toInteger(it);\n  var length = toLength(number);\n  if (number !== length) throw RangeError('Wrong length!');\n  return length;\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","'use strict';\nif (require('./_descriptors')) {\n  var LIBRARY = require('./_library');\n  var global = require('./_global');\n  var fails = require('./_fails');\n  var $export = require('./_export');\n  var $typed = require('./_typed');\n  var $buffer = require('./_typed-buffer');\n  var ctx = require('./_ctx');\n  var anInstance = require('./_an-instance');\n  var propertyDesc = require('./_property-desc');\n  var hide = require('./_hide');\n  var redefineAll = require('./_redefine-all');\n  var toInteger = require('./_to-integer');\n  var toLength = require('./_to-length');\n  var toIndex = require('./_to-index');\n  var toAbsoluteIndex = require('./_to-absolute-index');\n  var toPrimitive = require('./_to-primitive');\n  var has = require('./_has');\n  var classof = require('./_classof');\n  var isObject = require('./_is-object');\n  var toObject = require('./_to-object');\n  var isArrayIter = require('./_is-array-iter');\n  var create = require('./_object-create');\n  var getPrototypeOf = require('./_object-gpo');\n  var gOPN = require('./_object-gopn').f;\n  var getIterFn = require('./core.get-iterator-method');\n  var uid = require('./_uid');\n  var wks = require('./_wks');\n  var createArrayMethod = require('./_array-methods');\n  var createArrayIncludes = require('./_array-includes');\n  var speciesConstructor = require('./_species-constructor');\n  var ArrayIterators = require('./es6.array.iterator');\n  var Iterators = require('./_iterators');\n  var $iterDetect = require('./_iter-detect');\n  var setSpecies = require('./_set-species');\n  var arrayFill = require('./_array-fill');\n  var arrayCopyWithin = require('./_array-copy-within');\n  var $DP = require('./_object-dp');\n  var $GOPD = require('./_object-gopd');\n  var dP = $DP.f;\n  var gOPD = $GOPD.f;\n  var RangeError = global.RangeError;\n  var TypeError = global.TypeError;\n  var Uint8Array = global.Uint8Array;\n  var ARRAY_BUFFER = 'ArrayBuffer';\n  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n  var PROTOTYPE = 'prototype';\n  var ArrayProto = Array[PROTOTYPE];\n  var $ArrayBuffer = $buffer.ArrayBuffer;\n  var $DataView = $buffer.DataView;\n  var arrayForEach = createArrayMethod(0);\n  var arrayFilter = createArrayMethod(2);\n  var arraySome = createArrayMethod(3);\n  var arrayEvery = createArrayMethod(4);\n  var arrayFind = createArrayMethod(5);\n  var arrayFindIndex = createArrayMethod(6);\n  var arrayIncludes = createArrayIncludes(true);\n  var arrayIndexOf = createArrayIncludes(false);\n  var arrayValues = ArrayIterators.values;\n  var arrayKeys = ArrayIterators.keys;\n  var arrayEntries = ArrayIterators.entries;\n  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n  var arrayReduce = ArrayProto.reduce;\n  var arrayReduceRight = ArrayProto.reduceRight;\n  var arrayJoin = ArrayProto.join;\n  var arraySort = ArrayProto.sort;\n  var arraySlice = ArrayProto.slice;\n  var arrayToString = ArrayProto.toString;\n  var arrayToLocaleString = ArrayProto.toLocaleString;\n  var ITERATOR = wks('iterator');\n  var TAG = wks('toStringTag');\n  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n  var DEF_CONSTRUCTOR = uid('def_constructor');\n  var ALL_CONSTRUCTORS = $typed.CONSTR;\n  var TYPED_ARRAY = $typed.TYPED;\n  var VIEW = $typed.VIEW;\n  var WRONG_LENGTH = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function (O, length) {\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function () {\n    // eslint-disable-next-line no-undef\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n    new Uint8Array(1).set({});\n  });\n\n  var toOffset = function (it, BYTES) {\n    var offset = toInteger(it);\n    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function (it) {\n    if (isObject(it) && TYPED_ARRAY in it) return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function (C, length) {\n    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function (O, list) {\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function (C, list) {\n    var index = 0;\n    var length = list.length;\n    var result = allocate(C, length);\n    while (length > index) result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function (it, key, internal) {\n    dP(it, key, { get: function () { return this._d[internal]; } });\n  };\n\n  var $from = function from(source /* , mapfn, thisArg */) {\n    var O = toObject(source);\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var iterFn = getIterFn(O);\n    var i, length, values, result, step, iterator;\n    if (iterFn != undefined && !isArrayIter(iterFn)) {\n      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n        values.push(step.value);\n      } O = values;\n    }\n    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/* ...items */) {\n    var index = 0;\n    var length = arguments.length;\n    var result = allocate(this, length);\n    while (length > index) result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString() {\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /* , end */) {\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /* , thisArg */) {\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /* , thisArg */) {\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /* , thisArg */) {\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /* , thisArg */) {\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /* , thisArg */) {\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /* , fromIndex */) {\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /* , fromIndex */) {\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator) { // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /* , thisArg */) {\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse() {\n      var that = this;\n      var length = validate(that).length;\n      var middle = Math.floor(length / 2);\n      var index = 0;\n      var value;\n      while (index < middle) {\n        value = that[index];\n        that[index++] = that[--length];\n        that[length] = value;\n      } return that;\n    },\n    some: function some(callbackfn /* , thisArg */) {\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn) {\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end) {\n      var O = validate(this);\n      var length = O.length;\n      var $begin = toAbsoluteIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end) {\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /* , offset */) {\n    validate(this);\n    var offset = toOffset(arguments[1], 1);\n    var length = this.length;\n    var src = toObject(arrayLike);\n    var len = toLength(src.length);\n    var index = 0;\n    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n    while (index < len) this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries() {\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys() {\n      return arrayKeys.call(validate(this));\n    },\n    values: function values() {\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function (target, key) {\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc) {\n    if (isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ) {\n      target[key] = desc.value;\n      return target;\n    } return dP(target, key, desc);\n  };\n\n  if (!ALL_CONSTRUCTORS) {\n    $GOPD.f = $getDesc;\n    $DP.f = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty: $setDesc\n  });\n\n  if (fails(function () { arrayToString.call({}); })) {\n    arrayToString = arrayToLocaleString = function toString() {\n      return arrayJoin.call(this);\n    };\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice: $slice,\n    set: $set,\n    constructor: function () { /* noop */ },\n    toString: arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function () { return this[TYPED_ARRAY]; }\n  });\n\n  // eslint-disable-next-line max-statements\n  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n    CLAMPED = !!CLAMPED;\n    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + KEY;\n    var SETTER = 'set' + KEY;\n    var TypedArray = global[NAME];\n    var Base = TypedArray || {};\n    var TAC = TypedArray && getPrototypeOf(TypedArray);\n    var FORCED = !TypedArray || !$typed.ABV;\n    var O = {};\n    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function (that, index) {\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function (that, index, value) {\n      var data = that._d;\n      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function (that, index) {\n      dP(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if (FORCED) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME, '_d');\n        var index = 0;\n        var offset = 0;\n        var buffer, byteLength, length, klass;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new $ArrayBuffer(byteLength);\n        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (TYPED_ARRAY in data) {\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if (!fails(function () {\n      TypedArray(1);\n    }) || !fails(function () {\n      new TypedArray(-1); // eslint-disable-line no-new\n    }) || !$iterDetect(function (iter) {\n      new TypedArray(); // eslint-disable-line no-new\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(1.5); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if (!isObject(data)) return new Base(toIndex(data));\n        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n    var CORRECT_ITER_NAME = !!$nativeIterator\n      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n    var $iterator = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n      dP(TypedArrayPrototype, TAG, {\n        get: function () { return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES\n    });\n\n    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n      from: $from,\n      of: $of\n    });\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n\n    $export($export.P + $export.F * fails(function () {\n      new TypedArray(1).slice();\n    }), NAME, { slice: $slice });\n\n    $export($export.P + $export.F * (fails(function () {\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n    }) || !fails(function () {\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, { toLocaleString: $toLocaleString });\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function () { /* empty */ };\n","'use strict';\nvar global = require('./_global');\nvar DESCRIPTORS = require('./_descriptors');\nvar LIBRARY = require('./_library');\nvar $typed = require('./_typed');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar fails = require('./_fails');\nvar anInstance = require('./_an-instance');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar toIndex = require('./_to-index');\nvar gOPN = require('./_object-gopn').f;\nvar dP = require('./_object-dp').f;\nvar arrayFill = require('./_array-fill');\nvar setToStringTag = require('./_set-to-string-tag');\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH = 'Wrong length!';\nvar WRONG_INDEX = 'Wrong index!';\nvar $ArrayBuffer = global[ARRAY_BUFFER];\nvar $DataView = global[DATA_VIEW];\nvar Math = global.Math;\nvar RangeError = global.RangeError;\n// eslint-disable-next-line no-shadow-restricted-names\nvar Infinity = global.Infinity;\nvar BaseBuffer = $ArrayBuffer;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\nvar BUFFER = 'buffer';\nvar BYTE_LENGTH = 'byteLength';\nvar BYTE_OFFSET = 'byteOffset';\nvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\nvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\nvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nfunction packIEEE754(value, mLen, nBytes) {\n  var buffer = Array(nBytes);\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var i = 0;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  var e, m, c;\n  value = abs(value);\n  // eslint-disable-next-line no-self-compare\n  if (value != value || value === Infinity) {\n    // eslint-disable-next-line no-self-compare\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if (value * (c = pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n}\nfunction unpackIEEE754(buffer, mLen, nBytes) {\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = eLen - 7;\n  var i = nBytes - 1;\n  var s = buffer[i--];\n  var e = s & 127;\n  var m;\n  s >>= 7;\n  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n}\n\nfunction unpackI32(bytes) {\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n}\nfunction packI8(it) {\n  return [it & 0xff];\n}\nfunction packI16(it) {\n  return [it & 0xff, it >> 8 & 0xff];\n}\nfunction packI32(it) {\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n}\nfunction packF64(it) {\n  return packIEEE754(it, 52, 8);\n}\nfunction packF32(it) {\n  return packIEEE754(it, 23, 4);\n}\n\nfunction addGetter(C, key, internal) {\n  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n}\n\nfunction get(view, bytes, index, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n}\nfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = conversion(+value);\n  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n}\n\nif (!$typed.ABV) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n    var byteLength = toIndex(length);\n    this._b = arrayFill.call(Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH];\n    var offset = toInteger(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if (DESCRIPTORS) {\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if (!fails(function () {\n    $ArrayBuffer(1);\n  }) || !fails(function () {\n    new $ArrayBuffer(-1); // eslint-disable-line no-new\n  }) || fails(function () {\n    new $ArrayBuffer(); // eslint-disable-line no-new\n    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n    return $ArrayBuffer.name != ARRAY_BUFFER;\n  })) {\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance(this, $ArrayBuffer);\n      return new BaseBuffer(toIndex(length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n    }\n    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar uid = require('./_uid');\nvar TYPED = uid('typed_array');\nvar VIEW = uid('view');\nvar ABV = !!(global.ArrayBuffer && global.DataView);\nvar CONSTR = ABV;\nvar i = 0;\nvar l = 9;\nvar Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile (i < l) {\n  if (Typed = global[TypedArrayConstructors[i++]]) {\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV: ABV,\n  CONSTR: CONSTR,\n  TYPED: TYPED,\n  VIEW: VIEW\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","exports.f = require('./_wks');\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","// https://github.com/benjamingr/RexExp.escape\nvar $export = require('./_export');\nvar $re = require('./_replacer')(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });\n\nrequire('./_add-to-unscopables')('copyWithin');\n","'use strict';\nvar $export = require('./_export');\nvar $every = require('./_array-methods')(4);\n\n$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {\n  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])\n  every: function every(callbackfn /* , thisArg */) {\n    return $every(this, callbackfn, arguments[1]);\n  }\n});\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","'use strict';\nvar $export = require('./_export');\nvar $filter = require('./_array-methods')(2);\n\n$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {\n  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","'use strict';\nvar $export = require('./_export');\nvar $forEach = require('./_array-methods')(0);\nvar STRICT = require('./_strict-method')([].forEach, true);\n\n$export($export.P + $export.F * !STRICT, 'Array', {\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n  forEach: function forEach(callbackfn /* , thisArg */) {\n    return $forEach(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $indexOf = require('./_array-includes')(false);\nvar $native = [].indexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? $native.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments[1]);\n  }\n});\n","// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = require('./_export');\n\n$export($export.S, 'Array', { isArray: require('./_is-array') });\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","'use strict';\n// 22.1.3.13 Array.prototype.join(separator)\nvar $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar arrayJoin = [].join;\n\n// fallback for not array-like strings\n$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {\n  join: function join(separator) {\n    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar $native = [].lastIndexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\n  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {\n    // convert -0 to +0\n    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;\n    var O = toIObject(this);\n    var length = toLength(O.length);\n    var index = length - 1;\n    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));\n    if (index < 0) index = length + index;\n    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;\n    return -1;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $map = require('./_array-methods')(1);\n\n$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {\n  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar createProperty = require('./_create-property');\n\n// WebKit Array.of isn't generic\n$export($export.S + $export.F * require('./_fails')(function () {\n  function F() { /* empty */ }\n  return !(Array.of.call(F) instanceof F);\n}), 'Array', {\n  // 22.1.2.3 Array.of( ...items)\n  of: function of(/* ...args */) {\n    var index = 0;\n    var aLen = arguments.length;\n    var result = new (typeof this == 'function' ? this : Array)(aLen);\n    while (aLen > index) createProperty(result, index, arguments[index++]);\n    result.length = aLen;\n    return result;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $reduce = require('./_array-reduce');\n\n$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {\n  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])\n  reduceRight: function reduceRight(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], true);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $reduce = require('./_array-reduce');\n\n$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {\n  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], false);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar html = require('./_html');\nvar cof = require('./_cof');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nvar arraySlice = [].slice;\n\n// fallback for not array-like ES3 strings and DOM objects\n$export($export.P + $export.F * require('./_fails')(function () {\n  if (html) arraySlice.call(html);\n}), 'Array', {\n  slice: function slice(begin, end) {\n    var len = toLength(this.length);\n    var klass = cof(this);\n    end = end === undefined ? len : end;\n    if (klass == 'Array') return arraySlice.call(this, begin, end);\n    var start = toAbsoluteIndex(begin, len);\n    var upTo = toAbsoluteIndex(end, len);\n    var size = toLength(upTo - start);\n    var cloned = Array(size);\n    var i = 0;\n    for (; i < size; i++) cloned[i] = klass == 'String'\n      ? this.charAt(start + i)\n      : this[start + i];\n    return cloned;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $some = require('./_array-methods')(3);\n\n$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {\n  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","require('./_set-species')('Array');\n","// 20.3.3.1 / 15.9.4.4 Date.now()\nvar $export = require('./_export');\n\n$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });\n","// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar $export = require('./_export');\nvar toISOString = require('./_date-to-iso-string');\n\n// PhantomJS / old WebKit has a broken implementations\n$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {\n  toISOString: toISOString\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\n\n$export($export.P + $export.F * require('./_fails')(function () {\n  return new Date(NaN).toJSON() !== null\n    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;\n}), 'Date', {\n  // eslint-disable-next-line no-unused-vars\n  toJSON: function toJSON(key) {\n    var O = toObject(this);\n    var pv = toPrimitive(O);\n    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n  }\n});\n","var TO_PRIMITIVE = require('./_wks')('toPrimitive');\nvar proto = Date.prototype;\n\nif (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));\n","var DateProto = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar $toString = DateProto[TO_STRING];\nvar getTime = DateProto.getTime;\nif (new Date(NaN) + '' != INVALID_DATE) {\n  require('./_redefine')(DateProto, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}\n","// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)\nvar $export = require('./_export');\n\n$export($export.P, 'Function', { bind: require('./_bind') });\n","'use strict';\nvar isObject = require('./_is-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar HAS_INSTANCE = require('./_wks')('hasInstance');\nvar FunctionProto = Function.prototype;\n// 19.2.3.6 Function.prototype[@@hasInstance](V)\nif (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {\n  if (typeof this != 'function' || !isObject(O)) return false;\n  if (!isObject(this.prototype)) return O instanceof this;\n  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:\n  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;\n  return false;\n} });\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar MAP = 'Map';\n\n// 23.1 Map Objects\nmodule.exports = require('./_collection')(MAP, function (get) {\n  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key) {\n    var entry = strong.getEntry(validate(this, MAP), key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value) {\n    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n","// 20.2.2.3 Math.acosh(x)\nvar $export = require('./_export');\nvar log1p = require('./_math-log1p');\nvar sqrt = Math.sqrt;\nvar $acosh = Math.acosh;\n\n$export($export.S + $export.F * !($acosh\n  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n  && Math.floor($acosh(Number.MAX_VALUE)) == 710\n  // Tor Browser bug: Math.acosh(Infinity) -> NaN\n  && $acosh(Infinity) == Infinity\n), 'Math', {\n  acosh: function acosh(x) {\n    return (x = +x) < 1 ? NaN : x > 94906265.62425156\n      ? Math.log(x) + Math.LN2\n      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n  }\n});\n","// 20.2.2.5 Math.asinh(x)\nvar $export = require('./_export');\nvar $asinh = Math.asinh;\n\nfunction asinh(x) {\n  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));\n}\n\n// Tor Browser bug: Math.asinh(0) -> -0\n$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });\n","// 20.2.2.7 Math.atanh(x)\nvar $export = require('./_export');\nvar $atanh = Math.atanh;\n\n// Tor Browser bug: Math.atanh(-0) -> 0\n$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {\n  atanh: function atanh(x) {\n    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;\n  }\n});\n","// 20.2.2.9 Math.cbrt(x)\nvar $export = require('./_export');\nvar sign = require('./_math-sign');\n\n$export($export.S, 'Math', {\n  cbrt: function cbrt(x) {\n    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);\n  }\n});\n","// 20.2.2.11 Math.clz32(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  clz32: function clz32(x) {\n    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n  }\n});\n","// 20.2.2.12 Math.cosh(x)\nvar $export = require('./_export');\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  cosh: function cosh(x) {\n    return (exp(x = +x) + exp(-x)) / 2;\n  }\n});\n","// 20.2.2.14 Math.expm1(x)\nvar $export = require('./_export');\nvar $expm1 = require('./_math-expm1');\n\n$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });\n","// 20.2.2.16 Math.fround(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { fround: require('./_math-fround') });\n","// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n","// 20.2.2.18 Math.imul(x, y)\nvar $export = require('./_export');\nvar $imul = Math.imul;\n\n// some WebKit versions fails with big numbers, some has wrong arity\n$export($export.S + $export.F * require('./_fails')(function () {\n  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n}), 'Math', {\n  imul: function imul(x, y) {\n    var UINT16 = 0xffff;\n    var xn = +x;\n    var yn = +y;\n    var xl = UINT16 & xn;\n    var yl = UINT16 & yn;\n    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n  }\n});\n","// 20.2.2.21 Math.log10(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log10: function log10(x) {\n    return Math.log(x) * Math.LOG10E;\n  }\n});\n","// 20.2.2.20 Math.log1p(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { log1p: require('./_math-log1p') });\n","// 20.2.2.22 Math.log2(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log2: function log2(x) {\n    return Math.log(x) / Math.LN2;\n  }\n});\n","// 20.2.2.28 Math.sign(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { sign: require('./_math-sign') });\n","// 20.2.2.30 Math.sinh(x)\nvar $export = require('./_export');\nvar expm1 = require('./_math-expm1');\nvar exp = Math.exp;\n\n// V8 near Chromium 38 has a problem with very small numbers\n$export($export.S + $export.F * require('./_fails')(function () {\n  return !Math.sinh(-2e-17) != -2e-17;\n}), 'Math', {\n  sinh: function sinh(x) {\n    return Math.abs(x = +x) < 1\n      ? (expm1(x) - expm1(-x)) / 2\n      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);\n  }\n});\n","// 20.2.2.33 Math.tanh(x)\nvar $export = require('./_export');\nvar expm1 = require('./_math-expm1');\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  tanh: function tanh(x) {\n    var a = expm1(x = +x);\n    var b = expm1(-x);\n    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\n  }\n});\n","// 20.2.2.34 Math.trunc(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  trunc: function trunc(it) {\n    return (it > 0 ? Math.floor : Math.ceil)(it);\n  }\n});\n","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n","// 20.1.2.1 Number.EPSILON\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });\n","// 20.1.2.2 Number.isFinite(number)\nvar $export = require('./_export');\nvar _isFinite = require('./_global').isFinite;\n\n$export($export.S, 'Number', {\n  isFinite: function isFinite(it) {\n    return typeof it == 'number' && _isFinite(it);\n  }\n});\n","// 20.1.2.3 Number.isInteger(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { isInteger: require('./_is-integer') });\n","// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n","// 20.1.2.5 Number.isSafeInteger(number)\nvar $export = require('./_export');\nvar isInteger = require('./_is-integer');\nvar abs = Math.abs;\n\n$export($export.S, 'Number', {\n  isSafeInteger: function isSafeInteger(number) {\n    return isInteger(number) && abs(number) <= 0x1fffffffffffff;\n  }\n});\n","// 20.1.2.6 Number.MAX_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });\n","// 20.1.2.10 Number.MIN_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });\n","var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 20.1.2.12 Number.parseFloat(string)\n$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });\n","var $export = require('./_export');\nvar $parseInt = require('./_parse-int');\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });\n","'use strict';\nvar $export = require('./_export');\nvar toInteger = require('./_to-integer');\nvar aNumberValue = require('./_a-number-value');\nvar repeat = require('./_string-repeat');\nvar $toFixed = 1.0.toFixed;\nvar floor = Math.floor;\nvar data = [0, 0, 0, 0, 0, 0];\nvar ERROR = 'Number.toFixed: incorrect invocation!';\nvar ZERO = '0';\n\nvar multiply = function (n, c) {\n  var i = -1;\n  var c2 = c;\n  while (++i < 6) {\n    c2 += n * data[i];\n    data[i] = c2 % 1e7;\n    c2 = floor(c2 / 1e7);\n  }\n};\nvar divide = function (n) {\n  var i = 6;\n  var c = 0;\n  while (--i >= 0) {\n    c += data[i];\n    data[i] = floor(c / n);\n    c = (c % n) * 1e7;\n  }\n};\nvar numToString = function () {\n  var i = 6;\n  var s = '';\n  while (--i >= 0) {\n    if (s !== '' || i === 0 || data[i] !== 0) {\n      var t = String(data[i]);\n      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;\n    }\n  } return s;\n};\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\n$export($export.P + $export.F * (!!$toFixed && (\n  0.00008.toFixed(3) !== '0.000' ||\n  0.9.toFixed(0) !== '1' ||\n  1.255.toFixed(2) !== '1.25' ||\n  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n) || !require('./_fails')(function () {\n  // V8 ~ Android 4.3-\n  $toFixed.call({});\n})), 'Number', {\n  toFixed: function toFixed(fractionDigits) {\n    var x = aNumberValue(this, ERROR);\n    var f = toInteger(fractionDigits);\n    var s = '';\n    var m = ZERO;\n    var e, z, j, k;\n    if (f < 0 || f > 20) throw RangeError(ERROR);\n    // eslint-disable-next-line no-self-compare\n    if (x != x) return 'NaN';\n    if (x <= -1e21 || x >= 1e21) return String(x);\n    if (x < 0) {\n      s = '-';\n      x = -x;\n    }\n    if (x > 1e-21) {\n      e = log(x * pow(2, 69, 1)) - 69;\n      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(0, z);\n        j = f;\n        while (j >= 7) {\n          multiply(1e7, 0);\n          j -= 7;\n        }\n        multiply(pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(1 << 23);\n          j -= 23;\n        }\n        divide(1 << j);\n        multiply(1, 1);\n        divide(2);\n        m = numToString();\n      } else {\n        multiply(0, z);\n        multiply(1 << -e, 0);\n        m = numToString() + repeat.call(ZERO, f);\n      }\n    }\n    if (f > 0) {\n      k = m.length;\n      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));\n    } else {\n      m = s + m;\n    } return m;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $fails = require('./_fails');\nvar aNumberValue = require('./_a-number-value');\nvar $toPrecision = 1.0.toPrecision;\n\n$export($export.P + $export.F * ($fails(function () {\n  // IE7-\n  return $toPrecision.call(1, undefined) !== '1';\n}) || !$fails(function () {\n  // V8 ~ Android 4.3-\n  $toPrecision.call({});\n})), 'Number', {\n  toPrecision: function toPrecision(precision) {\n    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');\n    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);\n  }\n});\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","var $export = require('./_export');\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });\n","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = require('./_to-iobject');\nvar $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n","// 19.1.2.7 Object.getOwnPropertyNames(O)\nrequire('./_object-sap')('getOwnPropertyNames', function () {\n  return require('./_object-gopn-ext').f;\n});\n","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","// 19.1.2.11 Object.isExtensible(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isExtensible', function ($isExtensible) {\n  return function isExtensible(it) {\n    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n  };\n});\n","// 19.1.2.12 Object.isFrozen(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isFrozen', function ($isFrozen) {\n  return function isFrozen(it) {\n    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n  };\n});\n","// 19.1.2.13 Object.isSealed(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isSealed', function ($isSealed) {\n  return function isSealed(it) {\n    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n  };\n});\n","// 19.1.3.10 Object.is(value1, value2)\nvar $export = require('./_export');\n$export($export.S, 'Object', { is: require('./_same-value') });\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","// 19.1.2.15 Object.preventExtensions(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('preventExtensions', function ($preventExtensions) {\n  return function preventExtensions(it) {\n    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n  };\n});\n","// 19.1.2.17 Object.seal(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('seal', function ($seal) {\n  return function seal(it) {\n    return $seal && isObject(it) ? $seal(meta(it)) : it;\n  };\n});\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","'use strict';\n// 19.1.3.6 Object.prototype.toString()\nvar classof = require('./_classof');\nvar test = {};\ntest[require('./_wks')('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  require('./_redefine')(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n","var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 18.2.4 parseFloat(string)\n$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });\n","var $export = require('./_export');\nvar $parseInt = require('./_parse-int');\n// 18.2.5 parseInt(string, radix)\n$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });\n","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value);\n            if (domain) domain.exit();\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  if (promise._h == 1) return false;\n  var chain = promise._a || promise._c;\n  var i = 0;\n  var reaction;\n  while (chain.length > i) {\n    reaction = chain[i++];\n    if (reaction.fail || !isUnhandled(reaction.promise)) return false;\n  } return true;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar rApply = (require('./_global').Reflect || {}).apply;\nvar fApply = Function.apply;\n// MS Edge argumentsList argument is optional\n$export($export.S + $export.F * !require('./_fails')(function () {\n  rApply(function () { /* empty */ });\n}), 'Reflect', {\n  apply: function apply(target, thisArgument, argumentsList) {\n    var T = aFunction(target);\n    var L = anObject(argumentsList);\n    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);\n  }\n});\n","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\nvar dP = require('./_object-dp');\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar toPrimitive = require('./_to-primitive');\n\n// MS Edge has broken Reflect.defineProperty - throwing instead of returning false\n$export($export.S + $export.F * require('./_fails')(function () {\n  // eslint-disable-next-line no-undef\n  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });\n}), 'Reflect', {\n  defineProperty: function defineProperty(target, propertyKey, attributes) {\n    anObject(target);\n    propertyKey = toPrimitive(propertyKey, true);\n    anObject(attributes);\n    try {\n      dP.f(target, propertyKey, attributes);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.4 Reflect.deleteProperty(target, propertyKey)\nvar $export = require('./_export');\nvar gOPD = require('./_object-gopd').f;\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  deleteProperty: function deleteProperty(target, propertyKey) {\n    var desc = gOPD(anObject(target), propertyKey);\n    return desc && !desc.configurable ? false : delete target[propertyKey];\n  }\n});\n","'use strict';\n// 26.1.5 Reflect.enumerate(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar Enumerate = function (iterated) {\n  this._t = anObject(iterated); // target\n  this._i = 0;                  // next index\n  var keys = this._k = [];      // keys\n  var key;\n  for (key in iterated) keys.push(key);\n};\nrequire('./_iter-create')(Enumerate, 'Object', function () {\n  var that = this;\n  var keys = that._k;\n  var key;\n  do {\n    if (that._i >= keys.length) return { value: undefined, done: true };\n  } while (!((key = keys[that._i++]) in that._t));\n  return { value: key, done: false };\n});\n\n$export($export.S, 'Reflect', {\n  enumerate: function enumerate(target) {\n    return new Enumerate(target);\n  }\n});\n","// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\nvar gOPD = require('./_object-gopd');\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {\n    return gOPD.f(anObject(target), propertyKey);\n  }\n});\n","// 26.1.8 Reflect.getPrototypeOf(target)\nvar $export = require('./_export');\nvar getProto = require('./_object-gpo');\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getPrototypeOf: function getPrototypeOf(target) {\n    return getProto(anObject(target));\n  }\n});\n","// 26.1.6 Reflect.get(target, propertyKey [, receiver])\nvar gOPD = require('./_object-gopd');\nvar getPrototypeOf = require('./_object-gpo');\nvar has = require('./_has');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\n\nfunction get(target, propertyKey /* , receiver */) {\n  var receiver = arguments.length < 3 ? target : arguments[2];\n  var desc, proto;\n  if (anObject(target) === receiver) return target[propertyKey];\n  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')\n    ? desc.value\n    : desc.get !== undefined\n      ? desc.get.call(receiver)\n      : undefined;\n  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);\n}\n\n$export($export.S, 'Reflect', { get: get });\n","// 26.1.9 Reflect.has(target, propertyKey)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', {\n  has: function has(target, propertyKey) {\n    return propertyKey in target;\n  }\n});\n","// 26.1.10 Reflect.isExtensible(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar $isExtensible = Object.isExtensible;\n\n$export($export.S, 'Reflect', {\n  isExtensible: function isExtensible(target) {\n    anObject(target);\n    return $isExtensible ? $isExtensible(target) : true;\n  }\n});\n","// 26.1.11 Reflect.ownKeys(target)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });\n","// 26.1.12 Reflect.preventExtensions(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar $preventExtensions = Object.preventExtensions;\n\n$export($export.S, 'Reflect', {\n  preventExtensions: function preventExtensions(target) {\n    anObject(target);\n    try {\n      if ($preventExtensions) $preventExtensions(target);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.14 Reflect.setPrototypeOf(target, proto)\nvar $export = require('./_export');\nvar setProto = require('./_set-proto');\n\nif (setProto) $export($export.S, 'Reflect', {\n  setPrototypeOf: function setPrototypeOf(target, proto) {\n    setProto.check(target, proto);\n    try {\n      setProto.set(target, proto);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\nvar dP = require('./_object-dp');\nvar gOPD = require('./_object-gopd');\nvar getPrototypeOf = require('./_object-gpo');\nvar has = require('./_has');\nvar $export = require('./_export');\nvar createDesc = require('./_property-desc');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\n\nfunction set(target, propertyKey, V /* , receiver */) {\n  var receiver = arguments.length < 4 ? target : arguments[3];\n  var ownDesc = gOPD.f(anObject(target), propertyKey);\n  var existingDescriptor, proto;\n  if (!ownDesc) {\n    if (isObject(proto = getPrototypeOf(target))) {\n      return set(proto, propertyKey, V, receiver);\n    }\n    ownDesc = createDesc(0);\n  }\n  if (has(ownDesc, 'value')) {\n    if (ownDesc.writable === false || !isObject(receiver)) return false;\n    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);\n    existingDescriptor.value = V;\n    dP.f(receiver, propertyKey, existingDescriptor);\n    return true;\n  }\n  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n}\n\n$export($export.S, 'Reflect', { set: set });\n","var global = require('./_global');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar dP = require('./_object-dp').f;\nvar gOPN = require('./_object-gopn').f;\nvar isRegExp = require('./_is-regexp');\nvar $flags = require('./_flags');\nvar $RegExp = global.RegExp;\nvar Base = $RegExp;\nvar proto = $RegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n// \"new\" creates a new object, old webkit buggy here\nvar CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {\n  re2[require('./_wks')('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var tiRE = this instanceof $RegExp;\n    var piRE = isRegExp(p);\n    var fiU = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function (key) {\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function () { return Base[key]; },\n      set: function (it) { Base[key] = it; }\n    });\n  };\n  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require('./_redefine')(global, 'RegExp', $RegExp);\n}\n\nrequire('./_set-species')('RegExp');\n","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n","// @@match logic\nrequire('./_fix-re-wks')('match', 1, function (defined, MATCH, $match) {\n  // 21.1.3.11 String.prototype.match(regexp)\n  return [function match(regexp) {\n    'use strict';\n    var O = defined(this);\n    var fn = regexp == undefined ? undefined : regexp[MATCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n  }, $match];\n});\n","// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace) {\n  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)\n  return [function replace(searchValue, replaceValue) {\n    'use strict';\n    var O = defined(this);\n    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n    return fn !== undefined\n      ? fn.call(searchValue, O, replaceValue)\n      : $replace.call(String(O), searchValue, replaceValue);\n  }, $replace];\n});\n","// @@search logic\nrequire('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search) {\n  // 21.1.3.15 String.prototype.search(regexp)\n  return [function search(regexp) {\n    'use strict';\n    var O = defined(this);\n    var fn = regexp == undefined ? undefined : regexp[SEARCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n  }, $search];\n});\n","// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split) {\n  'use strict';\n  var isRegExp = require('./_is-regexp');\n  var _split = $split;\n  var $push = [].push;\n  var $SPLIT = 'split';\n  var LENGTH = 'length';\n  var LAST_INDEX = 'lastIndex';\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group\n    // based on es5-shim implementation, need to rework it\n    $split = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return _split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var separator2, match, lastIndex, lastLength, i;\n      // Doesn't need flags gy, but they don't hurt\n      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n      while (match = separatorCopy.exec(string)) {\n        // `separatorCopy.lastIndex` is not reliable cross-browser\n        lastIndex = match.index + match[0][LENGTH];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG\n          // eslint-disable-next-line no-loop-func\n          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {\n            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;\n          });\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    $split = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);\n    };\n  }\n  // 21.1.3.17 String.prototype.split(separator, limit)\n  return [function split(separator, limit) {\n    var O = defined(this);\n    var fn = separator == undefined ? undefined : separator[SPLIT];\n    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);\n  }, $split];\n});\n","'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar SET = 'Set';\n\n// 23.2 Set Objects\nmodule.exports = require('./_collection')(SET, function (get) {\n  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value) {\n    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n","'use strict';\n// B.2.3.2 String.prototype.anchor(name)\nrequire('./_string-html')('anchor', function (createHTML) {\n  return function anchor(name) {\n    return createHTML(this, 'a', 'name', name);\n  };\n});\n","'use strict';\n// B.2.3.3 String.prototype.big()\nrequire('./_string-html')('big', function (createHTML) {\n  return function big() {\n    return createHTML(this, 'big', '', '');\n  };\n});\n","'use strict';\n// B.2.3.4 String.prototype.blink()\nrequire('./_string-html')('blink', function (createHTML) {\n  return function blink() {\n    return createHTML(this, 'blink', '', '');\n  };\n});\n","'use strict';\n// B.2.3.5 String.prototype.bold()\nrequire('./_string-html')('bold', function (createHTML) {\n  return function bold() {\n    return createHTML(this, 'b', '', '');\n  };\n});\n","'use strict';\nvar $export = require('./_export');\nvar $at = require('./_string-at')(false);\n$export($export.P, 'String', {\n  // 21.1.3.3 String.prototype.codePointAt(pos)\n  codePointAt: function codePointAt(pos) {\n    return $at(this, pos);\n  }\n});\n","// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar ENDS_WITH = 'endsWith';\nvar $endsWith = ''[ENDS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {\n  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n    var that = context(this, searchString, ENDS_WITH);\n    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n    var len = toLength(that.length);\n    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);\n    var search = String(searchString);\n    return $endsWith\n      ? $endsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n","'use strict';\n// B.2.3.6 String.prototype.fixed()\nrequire('./_string-html')('fixed', function (createHTML) {\n  return function fixed() {\n    return createHTML(this, 'tt', '', '');\n  };\n});\n","'use strict';\n// B.2.3.7 String.prototype.fontcolor(color)\nrequire('./_string-html')('fontcolor', function (createHTML) {\n  return function fontcolor(color) {\n    return createHTML(this, 'font', 'color', color);\n  };\n});\n","'use strict';\n// B.2.3.8 String.prototype.fontsize(size)\nrequire('./_string-html')('fontsize', function (createHTML) {\n  return function fontsize(size) {\n    return createHTML(this, 'font', 'size', size);\n  };\n});\n","var $export = require('./_export');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar fromCharCode = String.fromCharCode;\nvar $fromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\n$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n  // 21.1.2.2 String.fromCodePoint(...codePoints)\n  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars\n    var res = [];\n    var aLen = arguments.length;\n    var i = 0;\n    var code;\n    while (aLen > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');\n      res.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n      );\n    } return res.join('');\n  }\n});\n","// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n'use strict';\nvar $export = require('./_export');\nvar context = require('./_string-context');\nvar INCLUDES = 'includes';\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","'use strict';\n// B.2.3.9 String.prototype.italics()\nrequire('./_string-html')('italics', function (createHTML) {\n  return function italics() {\n    return createHTML(this, 'i', '', '');\n  };\n});\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n","var $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\n\n$export($export.S, 'String', {\n  // 21.1.2.4 String.raw(callSite, ...substitutions)\n  raw: function raw(callSite) {\n    var tpl = toIObject(callSite.raw);\n    var len = toLength(tpl.length);\n    var aLen = arguments.length;\n    var res = [];\n    var i = 0;\n    while (len > i) {\n      res.push(String(tpl[i++]));\n      if (i < aLen) res.push(String(arguments[i]));\n    } return res.join('');\n  }\n});\n","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","'use strict';\n// B.2.3.11 String.prototype.small()\nrequire('./_string-html')('small', function (createHTML) {\n  return function small() {\n    return createHTML(this, 'small', '', '');\n  };\n});\n","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","'use strict';\n// B.2.3.12 String.prototype.strike()\nrequire('./_string-html')('strike', function (createHTML) {\n  return function strike() {\n    return createHTML(this, 'strike', '', '');\n  };\n});\n","'use strict';\n// B.2.3.13 String.prototype.sub()\nrequire('./_string-html')('sub', function (createHTML) {\n  return function sub() {\n    return createHTML(this, 'sub', '', '');\n  };\n});\n","'use strict';\n// B.2.3.14 String.prototype.sup()\nrequire('./_string-html')('sup', function (createHTML) {\n  return function sup() {\n    return createHTML(this, 'sup', '', '');\n  };\n});\n","'use strict';\n// 21.1.3.25 String.prototype.trim()\nrequire('./_string-trim')('trim', function ($trim) {\n  return function trim() {\n    return $trim(this, 3);\n  };\n});\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    replacer = args[1];\n    if (typeof replacer == 'function') $replacer = replacer;\n    if ($replacer || !isArray(replacer)) replacer = function (key, value) {\n      if ($replacer) value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","'use strict';\nvar $export = require('./_export');\nvar $typed = require('./_typed');\nvar buffer = require('./_typed-buffer');\nvar anObject = require('./_an-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nvar isObject = require('./_is-object');\nvar ArrayBuffer = require('./_global').ArrayBuffer;\nvar speciesConstructor = require('./_species-constructor');\nvar $ArrayBuffer = buffer.ArrayBuffer;\nvar $DataView = buffer.DataView;\nvar $isView = $typed.ABV && ArrayBuffer.isView;\nvar $slice = $ArrayBuffer.prototype.slice;\nvar VIEW = $typed.VIEW;\nvar ARRAY_BUFFER = 'ArrayBuffer';\n\n$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });\n\n$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n  // 24.1.3.1 ArrayBuffer.isView(arg)\n  isView: function isView(it) {\n    return $isView && $isView(it) || isObject(it) && VIEW in it;\n  }\n});\n\n$export($export.P + $export.U + $export.F * require('./_fails')(function () {\n  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n}), ARRAY_BUFFER, {\n  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n  slice: function slice(start, end) {\n    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix\n    var len = anObject(this).byteLength;\n    var first = toAbsoluteIndex(start, len);\n    var final = toAbsoluteIndex(end === undefined ? len : end, len);\n    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first));\n    var viewS = new $DataView(this);\n    var viewT = new $DataView(result);\n    var index = 0;\n    while (first < final) {\n      viewT.setUint8(index++, viewS.getUint8(first++));\n    } return result;\n  }\n});\n\nrequire('./_set-species')(ARRAY_BUFFER);\n","var $export = require('./_export');\n$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {\n  DataView: require('./_typed-buffer').DataView\n});\n","require('./_typed-array')('Float32', 4, function (init) {\n  return function Float32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Float64', 8, function (init) {\n  return function Float64Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int16', 2, function (init) {\n  return function Int16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int32', 4, function (init) {\n  return function Int32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int8', 1, function (init) {\n  return function Int8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint16', 2, function (init) {\n  return function Uint16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint32', 4, function (init) {\n  return function Uint32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8ClampedArray(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n}, true);\n","'use strict';\nvar each = require('./_array-methods')(0);\nvar redefine = require('./_redefine');\nvar meta = require('./_meta');\nvar assign = require('./_object-assign');\nvar weak = require('./_collection-weak');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar validate = require('./_validate-collection');\nvar WEAK_MAP = 'WeakMap';\nvar getWeak = meta.getWeak;\nvar isExtensible = Object.isExtensible;\nvar uncaughtFrozenStore = weak.ufstore;\nvar tmp = {};\nvar InternalMap;\n\nvar wrapper = function (get) {\n  return function WeakMap() {\n    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n  };\n};\n\nvar methods = {\n  // 23.3.3.3 WeakMap.prototype.get(key)\n  get: function get(key) {\n    if (isObject(key)) {\n      var data = getWeak(key);\n      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);\n      return data ? data[this._i] : undefined;\n    }\n  },\n  // 23.3.3.5 WeakMap.prototype.set(key, value)\n  set: function set(key, value) {\n    return weak.def(validate(this, WEAK_MAP), key, value);\n  }\n};\n\n// 23.3 WeakMap Objects\nvar $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);\n\n// IE11 WeakMap frozen keys fix\nif (fails(function () { return new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7; })) {\n  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);\n  assign(InternalMap.prototype, methods);\n  meta.NEED = true;\n  each(['delete', 'has', 'get', 'set'], function (key) {\n    var proto = $WeakMap.prototype;\n    var method = proto[key];\n    redefine(proto, key, function (a, b) {\n      // store frozen objects on internal weakmap shim\n      if (isObject(a) && !isExtensible(a)) {\n        if (!this._f) this._f = new InternalMap();\n        var result = this._f[key](a, b);\n        return key == 'set' ? this : result;\n      // store all the rest on native weakmap\n      } return method.call(this, a, b);\n    });\n  });\n}\n","'use strict';\nvar weak = require('./_collection-weak');\nvar validate = require('./_validate-collection');\nvar WEAK_SET = 'WeakSet';\n\n// 23.4 WeakSet Objects\nrequire('./_collection')(WEAK_SET, function (get) {\n  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.4.3.1 WeakSet.prototype.add(value)\n  add: function add(value) {\n    return weak.def(validate(this, WEAK_SET), value, true);\n  }\n}, weak, false, true);\n","'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap\nvar $export = require('./_export');\nvar flattenIntoArray = require('./_flatten-into-array');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar aFunction = require('./_a-function');\nvar arraySpeciesCreate = require('./_array-species-create');\n\n$export($export.P, 'Array', {\n  flatMap: function flatMap(callbackfn /* , thisArg */) {\n    var O = toObject(this);\n    var sourceLen, A;\n    aFunction(callbackfn);\n    sourceLen = toLength(O.length);\n    A = arraySpeciesCreate(O, 0);\n    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);\n    return A;\n  }\n});\n\nrequire('./_add-to-unscopables')('flatMap');\n","'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten\nvar $export = require('./_export');\nvar flattenIntoArray = require('./_flatten-into-array');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar toInteger = require('./_to-integer');\nvar arraySpeciesCreate = require('./_array-species-create');\n\n$export($export.P, 'Array', {\n  flatten: function flatten(/* depthArg = 1 */) {\n    var depthArg = arguments[0];\n    var O = toObject(this);\n    var sourceLen = toLength(O.length);\n    var A = arraySpeciesCreate(O, 0);\n    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));\n    return A;\n  }\n});\n\nrequire('./_add-to-unscopables')('flatten');\n","'use strict';\n// https://github.com/tc39/Array.prototype.includes\nvar $export = require('./_export');\nvar $includes = require('./_array-includes')(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nrequire('./_add-to-unscopables')('includes');\n","// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask\nvar $export = require('./_export');\nvar microtask = require('./_microtask')();\nvar process = require('./_global').process;\nvar isNode = require('./_cof')(process) == 'process';\n\n$export($export.G, {\n  asap: function asap(fn) {\n    var domain = isNode && process.domain;\n    microtask(domain ? domain.bind(fn) : fn);\n  }\n});\n","// https://github.com/ljharb/proposal-is-error\nvar $export = require('./_export');\nvar cof = require('./_cof');\n\n$export($export.S, 'Error', {\n  isError: function isError(it) {\n    return cof(it) === 'Error';\n  }\n});\n","// https://github.com/tc39/proposal-global\nvar $export = require('./_export');\n\n$export($export.G, { global: require('./_global') });\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from\nrequire('./_set-collection-from')('Map');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of\nrequire('./_set-collection-of')('Map');\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export = require('./_export');\n\n$export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  clamp: function clamp(x, lower, upper) {\n    return Math.min(upper, Math.max(lower, x));\n  }\n});\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\nvar RAD_PER_DEG = 180 / Math.PI;\n\n$export($export.S, 'Math', {\n  degrees: function degrees(radians) {\n    return radians * RAD_PER_DEG;\n  }\n});\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\nvar scale = require('./_math-scale');\nvar fround = require('./_math-fround');\n\n$export($export.S, 'Math', {\n  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {\n    return fround(scale(x, inLow, inHigh, outLow, outHigh));\n  }\n});\n","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  iaddh: function iaddh(x0, x1, y0, y1) {\n    var $x0 = x0 >>> 0;\n    var $x1 = x1 >>> 0;\n    var $y0 = y0 >>> 0;\n    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;\n  }\n});\n","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  imulh: function imulh(u, v) {\n    var UINT16 = 0xffff;\n    var $u = +u;\n    var $v = +v;\n    var u0 = $u & UINT16;\n    var v0 = $v & UINT16;\n    var u1 = $u >> 16;\n    var v1 = $v >> 16;\n    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);\n  }\n});\n","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  isubh: function isubh(x0, x1, y0, y1) {\n    var $x0 = x0 >>> 0;\n    var $x1 = x1 >>> 0;\n    var $y0 = y0 >>> 0;\n    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;\n  }\n});\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\nvar DEG_PER_RAD = Math.PI / 180;\n\n$export($export.S, 'Math', {\n  radians: function radians(degrees) {\n    return degrees * DEG_PER_RAD;\n  }\n});\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { scale: require('./_math-scale') });\n","// http://jfbastien.github.io/papers/Math.signbit.html\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { signbit: function signbit(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;\n} });\n","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  umulh: function umulh(u, v) {\n    var UINT16 = 0xffff;\n    var $u = +u;\n    var $v = +v;\n    var u0 = $u & UINT16;\n    var v0 = $v & UINT16;\n    var u1 = $u >>> 16;\n    var v1 = $v >>> 16;\n    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar aFunction = require('./_a-function');\nvar $defineProperty = require('./_object-dp');\n\n// B.2.2.2 Object.prototype.__defineGetter__(P, getter)\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\n  __defineGetter__: function __defineGetter__(P, getter) {\n    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar aFunction = require('./_a-function');\nvar $defineProperty = require('./_object-dp');\n\n// B.2.2.3 Object.prototype.__defineSetter__(P, setter)\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\n  __defineSetter__: function __defineSetter__(P, setter) {\n    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });\n  }\n});\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n","// https://github.com/tc39/proposal-object-getownpropertydescriptors\nvar $export = require('./_export');\nvar ownKeys = require('./_own-keys');\nvar toIObject = require('./_to-iobject');\nvar gOPD = require('./_object-gopd');\nvar createProperty = require('./_create-property');\n\n$export($export.S, 'Object', {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n    var O = toIObject(object);\n    var getDesc = gOPD.f;\n    var keys = ownKeys(O);\n    var result = {};\n    var i = 0;\n    var key, desc;\n    while (keys.length > i) {\n      desc = getDesc(O, key = keys[i++]);\n      if (desc !== undefined) createProperty(result, key, desc);\n    }\n    return result;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\nvar getPrototypeOf = require('./_object-gpo');\nvar getOwnPropertyDescriptor = require('./_object-gopd').f;\n\n// B.2.2.4 Object.prototype.__lookupGetter__(P)\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\n  __lookupGetter__: function __lookupGetter__(P) {\n    var O = toObject(this);\n    var K = toPrimitive(P, true);\n    var D;\n    do {\n      if (D = getOwnPropertyDescriptor(O, K)) return D.get;\n    } while (O = getPrototypeOf(O));\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\nvar getPrototypeOf = require('./_object-gpo');\nvar getOwnPropertyDescriptor = require('./_object-gopd').f;\n\n// B.2.2.5 Object.prototype.__lookupSetter__(P)\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\n  __lookupSetter__: function __lookupSetter__(P) {\n    var O = toObject(this);\n    var K = toPrimitive(P, true);\n    var D;\n    do {\n      if (D = getOwnPropertyDescriptor(O, K)) return D.set;\n    } while (O = getPrototypeOf(O));\n  }\n});\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","'use strict';\n// https://github.com/zenparsing/es-observable\nvar $export = require('./_export');\nvar global = require('./_global');\nvar core = require('./_core');\nvar microtask = require('./_microtask')();\nvar OBSERVABLE = require('./_wks')('observable');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar anInstance = require('./_an-instance');\nvar redefineAll = require('./_redefine-all');\nvar hide = require('./_hide');\nvar forOf = require('./_for-of');\nvar RETURN = forOf.RETURN;\n\nvar getMethod = function (fn) {\n  return fn == null ? undefined : aFunction(fn);\n};\n\nvar cleanupSubscription = function (subscription) {\n  var cleanup = subscription._c;\n  if (cleanup) {\n    subscription._c = undefined;\n    cleanup();\n  }\n};\n\nvar subscriptionClosed = function (subscription) {\n  return subscription._o === undefined;\n};\n\nvar closeSubscription = function (subscription) {\n  if (!subscriptionClosed(subscription)) {\n    subscription._o = undefined;\n    cleanupSubscription(subscription);\n  }\n};\n\nvar Subscription = function (observer, subscriber) {\n  anObject(observer);\n  this._c = undefined;\n  this._o = observer;\n  observer = new SubscriptionObserver(this);\n  try {\n    var cleanup = subscriber(observer);\n    var subscription = cleanup;\n    if (cleanup != null) {\n      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };\n      else aFunction(cleanup);\n      this._c = cleanup;\n    }\n  } catch (e) {\n    observer.error(e);\n    return;\n  } if (subscriptionClosed(this)) cleanupSubscription(this);\n};\n\nSubscription.prototype = redefineAll({}, {\n  unsubscribe: function unsubscribe() { closeSubscription(this); }\n});\n\nvar SubscriptionObserver = function (subscription) {\n  this._s = subscription;\n};\n\nSubscriptionObserver.prototype = redefineAll({}, {\n  next: function next(value) {\n    var subscription = this._s;\n    if (!subscriptionClosed(subscription)) {\n      var observer = subscription._o;\n      try {\n        var m = getMethod(observer.next);\n        if (m) return m.call(observer, value);\n      } catch (e) {\n        try {\n          closeSubscription(subscription);\n        } finally {\n          throw e;\n        }\n      }\n    }\n  },\n  error: function error(value) {\n    var subscription = this._s;\n    if (subscriptionClosed(subscription)) throw value;\n    var observer = subscription._o;\n    subscription._o = undefined;\n    try {\n      var m = getMethod(observer.error);\n      if (!m) throw value;\n      value = m.call(observer, value);\n    } catch (e) {\n      try {\n        cleanupSubscription(subscription);\n      } finally {\n        throw e;\n      }\n    } cleanupSubscription(subscription);\n    return value;\n  },\n  complete: function complete(value) {\n    var subscription = this._s;\n    if (!subscriptionClosed(subscription)) {\n      var observer = subscription._o;\n      subscription._o = undefined;\n      try {\n        var m = getMethod(observer.complete);\n        value = m ? m.call(observer, value) : undefined;\n      } catch (e) {\n        try {\n          cleanupSubscription(subscription);\n        } finally {\n          throw e;\n        }\n      } cleanupSubscription(subscription);\n      return value;\n    }\n  }\n});\n\nvar $Observable = function Observable(subscriber) {\n  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);\n};\n\nredefineAll($Observable.prototype, {\n  subscribe: function subscribe(observer) {\n    return new Subscription(observer, this._f);\n  },\n  forEach: function forEach(fn) {\n    var that = this;\n    return new (core.Promise || global.Promise)(function (resolve, reject) {\n      aFunction(fn);\n      var subscription = that.subscribe({\n        next: function (value) {\n          try {\n            return fn(value);\n          } catch (e) {\n            reject(e);\n            subscription.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve\n      });\n    });\n  }\n});\n\nredefineAll($Observable, {\n  from: function from(x) {\n    var C = typeof this === 'function' ? this : $Observable;\n    var method = getMethod(anObject(x)[OBSERVABLE]);\n    if (method) {\n      var observable = anObject(method.call(x));\n      return observable.constructor === C ? observable : new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n    return new C(function (observer) {\n      var done = false;\n      microtask(function () {\n        if (!done) {\n          try {\n            if (forOf(x, false, function (it) {\n              observer.next(it);\n              if (done) return RETURN;\n            }) === RETURN) return;\n          } catch (e) {\n            if (done) throw e;\n            observer.error(e);\n            return;\n          } observer.complete();\n        }\n      });\n      return function () { done = true; };\n    });\n  },\n  of: function of() {\n    for (var i = 0, l = arguments.length, items = Array(l); i < l;) items[i] = arguments[i++];\n    return new (typeof this === 'function' ? this : $Observable)(function (observer) {\n      var done = false;\n      microtask(function () {\n        if (!done) {\n          for (var j = 0; j < items.length; ++j) {\n            observer.next(items[j]);\n            if (done) return;\n          } observer.complete();\n        }\n      });\n      return function () { done = true; };\n    });\n  }\n});\n\nhide($Observable.prototype, OBSERVABLE, function () { return this; });\n\n$export($export.G, { Observable: $Observable });\n\nrequire('./_set-species')('Observable');\n","// https://github.com/tc39/proposal-promise-finally\n'use strict';\nvar $export = require('./_export');\nvar core = require('./_core');\nvar global = require('./_global');\nvar speciesConstructor = require('./_species-constructor');\nvar promiseResolve = require('./_promise-resolve');\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n","'use strict';\n// https://github.com/tc39/proposal-promise-try\nvar $export = require('./_export');\nvar newPromiseCapability = require('./_new-promise-capability');\nvar perform = require('./_perform');\n\n$export($export.S, 'Promise', { 'try': function (callbackfn) {\n  var promiseCapability = newPromiseCapability.f(this);\n  var result = perform(callbackfn);\n  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n  return promiseCapability.promise;\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar toMetaKey = metadata.key;\nvar ordinaryDefineOwnMetadata = metadata.set;\n\nmetadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {\n  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar toMetaKey = metadata.key;\nvar getOrCreateMetadataMap = metadata.map;\nvar store = metadata.store;\n\nmetadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {\n  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);\n  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);\n  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;\n  if (metadataMap.size) return true;\n  var targetMetadata = store.get(target);\n  targetMetadata['delete'](targetKey);\n  return !!targetMetadata.size || store['delete'](target);\n} });\n","var Set = require('./es6.set');\nvar from = require('./_array-from-iterable');\nvar metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar ordinaryOwnMetadataKeys = metadata.keys;\nvar toMetaKey = metadata.key;\n\nvar ordinaryMetadataKeys = function (O, P) {\n  var oKeys = ordinaryOwnMetadataKeys(O, P);\n  var parent = getPrototypeOf(O);\n  if (parent === null) return oKeys;\n  var pKeys = ordinaryMetadataKeys(parent, P);\n  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;\n};\n\nmetadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {\n  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar ordinaryHasOwnMetadata = metadata.has;\nvar ordinaryGetOwnMetadata = metadata.get;\nvar toMetaKey = metadata.key;\n\nvar ordinaryGetMetadata = function (MetadataKey, O, P) {\n  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);\n  var parent = getPrototypeOf(O);\n  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;\n};\n\nmetadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar ordinaryOwnMetadataKeys = metadata.keys;\nvar toMetaKey = metadata.key;\n\nmetadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {\n  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar ordinaryGetOwnMetadata = metadata.get;\nvar toMetaKey = metadata.key;\n\nmetadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryGetOwnMetadata(metadataKey, anObject(target)\n    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar ordinaryHasOwnMetadata = metadata.has;\nvar toMetaKey = metadata.key;\n\nvar ordinaryHasMetadata = function (MetadataKey, O, P) {\n  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n  if (hasOwn) return true;\n  var parent = getPrototypeOf(O);\n  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;\n};\n\nmetadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar ordinaryHasOwnMetadata = metadata.has;\nvar toMetaKey = metadata.key;\n\nmetadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryHasOwnMetadata(metadataKey, anObject(target)\n    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n","var $metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar toMetaKey = $metadata.key;\nvar ordinaryDefineOwnMetadata = $metadata.set;\n\n$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {\n  return function decorator(target, targetKey) {\n    ordinaryDefineOwnMetadata(\n      metadataKey, metadataValue,\n      (targetKey !== undefined ? anObject : aFunction)(target),\n      toMetaKey(targetKey)\n    );\n  };\n} });\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from\nrequire('./_set-collection-from')('Set');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of\nrequire('./_set-collection-of')('Set');\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export = require('./_export');\n\n$export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });\n","'use strict';\n// https://github.com/mathiasbynens/String.prototype.at\nvar $export = require('./_export');\nvar $at = require('./_string-at')(true);\n\n$export($export.P, 'String', {\n  at: function at(pos) {\n    return $at(this, pos);\n  }\n});\n","'use strict';\n// https://tc39.github.io/String.prototype.matchAll/\nvar $export = require('./_export');\nvar defined = require('./_defined');\nvar toLength = require('./_to-length');\nvar isRegExp = require('./_is-regexp');\nvar getFlags = require('./_flags');\nvar RegExpProto = RegExp.prototype;\n\nvar $RegExpStringIterator = function (regexp, string) {\n  this._r = regexp;\n  this._s = string;\n};\n\nrequire('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {\n  var match = this._r.exec(this._s);\n  return { value: match, done: match === null };\n});\n\n$export($export.P, 'String', {\n  matchAll: function matchAll(regexp) {\n    defined(this);\n    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');\n    var S = String(this);\n    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);\n    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);\n    rx.lastIndex = toLength(regexp.lastIndex);\n    return new $RegExpStringIterator(rx, S);\n  }\n});\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\n\n$export($export.P, 'String', {\n  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n  }\n});\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\n\n$export($export.P, 'String', {\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n","'use strict';\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\nrequire('./_string-trim')('trimLeft', function ($trim) {\n  return function trimLeft() {\n    return $trim(this, 1);\n  };\n}, 'trimStart');\n","'use strict';\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\nrequire('./_string-trim')('trimRight', function ($trim) {\n  return function trimRight() {\n    return $trim(this, 2);\n  };\n}, 'trimEnd');\n","require('./_wks-define')('asyncIterator');\n","require('./_wks-define')('observable');\n","// https://github.com/tc39/proposal-global\nvar $export = require('./_export');\n\n$export($export.S, 'System', { global: require('./_global') });\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from\nrequire('./_set-collection-from')('WeakMap');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of\nrequire('./_set-collection-of')('WeakMap');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from\nrequire('./_set-collection-from')('WeakSet');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of\nrequire('./_set-collection-of')('WeakSet');\n","var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n","var $export = require('./_export');\nvar $task = require('./_task');\n$export($export.G + $export.B, {\n  setImmediate: $task.set,\n  clearImmediate: $task.clear\n});\n","// ie9- setTimeout & setInterval additional parameters fix\nvar global = require('./_global');\nvar $export = require('./_export');\nvar navigator = global.navigator;\nvar slice = [].slice;\nvar MSIE = !!navigator && /MSIE .\\./.test(navigator.userAgent); // <- dirty ie9- check\nvar wrap = function (set) {\n  return function (fn, time /* , ...args */) {\n    var boundArgs = arguments.length > 2;\n    var args = boundArgs ? slice.call(arguments, 2) : false;\n    return set(boundArgs ? function () {\n      // eslint-disable-next-line no-new-func\n      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);\n    } : fn, time);\n  };\n};\n$export($export.G + $export.B + $export.F * MSIE, {\n  setTimeout: wrap(global.setTimeout),\n  setInterval: wrap(global.setInterval)\n});\n","require('./modules/es6.symbol');\nrequire('./modules/es6.object.create');\nrequire('./modules/es6.object.define-property');\nrequire('./modules/es6.object.define-properties');\nrequire('./modules/es6.object.get-own-property-descriptor');\nrequire('./modules/es6.object.get-prototype-of');\nrequire('./modules/es6.object.keys');\nrequire('./modules/es6.object.get-own-property-names');\nrequire('./modules/es6.object.freeze');\nrequire('./modules/es6.object.seal');\nrequire('./modules/es6.object.prevent-extensions');\nrequire('./modules/es6.object.is-frozen');\nrequire('./modules/es6.object.is-sealed');\nrequire('./modules/es6.object.is-extensible');\nrequire('./modules/es6.object.assign');\nrequire('./modules/es6.object.is');\nrequire('./modules/es6.object.set-prototype-of');\nrequire('./modules/es6.object.to-string');\nrequire('./modules/es6.function.bind');\nrequire('./modules/es6.function.name');\nrequire('./modules/es6.function.has-instance');\nrequire('./modules/es6.parse-int');\nrequire('./modules/es6.parse-float');\nrequire('./modules/es6.number.constructor');\nrequire('./modules/es6.number.to-fixed');\nrequire('./modules/es6.number.to-precision');\nrequire('./modules/es6.number.epsilon');\nrequire('./modules/es6.number.is-finite');\nrequire('./modules/es6.number.is-integer');\nrequire('./modules/es6.number.is-nan');\nrequire('./modules/es6.number.is-safe-integer');\nrequire('./modules/es6.number.max-safe-integer');\nrequire('./modules/es6.number.min-safe-integer');\nrequire('./modules/es6.number.parse-float');\nrequire('./modules/es6.number.parse-int');\nrequire('./modules/es6.math.acosh');\nrequire('./modules/es6.math.asinh');\nrequire('./modules/es6.math.atanh');\nrequire('./modules/es6.math.cbrt');\nrequire('./modules/es6.math.clz32');\nrequire('./modules/es6.math.cosh');\nrequire('./modules/es6.math.expm1');\nrequire('./modules/es6.math.fround');\nrequire('./modules/es6.math.hypot');\nrequire('./modules/es6.math.imul');\nrequire('./modules/es6.math.log10');\nrequire('./modules/es6.math.log1p');\nrequire('./modules/es6.math.log2');\nrequire('./modules/es6.math.sign');\nrequire('./modules/es6.math.sinh');\nrequire('./modules/es6.math.tanh');\nrequire('./modules/es6.math.trunc');\nrequire('./modules/es6.string.from-code-point');\nrequire('./modules/es6.string.raw');\nrequire('./modules/es6.string.trim');\nrequire('./modules/es6.string.iterator');\nrequire('./modules/es6.string.code-point-at');\nrequire('./modules/es6.string.ends-with');\nrequire('./modules/es6.string.includes');\nrequire('./modules/es6.string.repeat');\nrequire('./modules/es6.string.starts-with');\nrequire('./modules/es6.string.anchor');\nrequire('./modules/es6.string.big');\nrequire('./modules/es6.string.blink');\nrequire('./modules/es6.string.bold');\nrequire('./modules/es6.string.fixed');\nrequire('./modules/es6.string.fontcolor');\nrequire('./modules/es6.string.fontsize');\nrequire('./modules/es6.string.italics');\nrequire('./modules/es6.string.link');\nrequire('./modules/es6.string.small');\nrequire('./modules/es6.string.strike');\nrequire('./modules/es6.string.sub');\nrequire('./modules/es6.string.sup');\nrequire('./modules/es6.date.now');\nrequire('./modules/es6.date.to-json');\nrequire('./modules/es6.date.to-iso-string');\nrequire('./modules/es6.date.to-string');\nrequire('./modules/es6.date.to-primitive');\nrequire('./modules/es6.array.is-array');\nrequire('./modules/es6.array.from');\nrequire('./modules/es6.array.of');\nrequire('./modules/es6.array.join');\nrequire('./modules/es6.array.slice');\nrequire('./modules/es6.array.sort');\nrequire('./modules/es6.array.for-each');\nrequire('./modules/es6.array.map');\nrequire('./modules/es6.array.filter');\nrequire('./modules/es6.array.some');\nrequire('./modules/es6.array.every');\nrequire('./modules/es6.array.reduce');\nrequire('./modules/es6.array.reduce-right');\nrequire('./modules/es6.array.index-of');\nrequire('./modules/es6.array.last-index-of');\nrequire('./modules/es6.array.copy-within');\nrequire('./modules/es6.array.fill');\nrequire('./modules/es6.array.find');\nrequire('./modules/es6.array.find-index');\nrequire('./modules/es6.array.species');\nrequire('./modules/es6.array.iterator');\nrequire('./modules/es6.regexp.constructor');\nrequire('./modules/es6.regexp.to-string');\nrequire('./modules/es6.regexp.flags');\nrequire('./modules/es6.regexp.match');\nrequire('./modules/es6.regexp.replace');\nrequire('./modules/es6.regexp.search');\nrequire('./modules/es6.regexp.split');\nrequire('./modules/es6.promise');\nrequire('./modules/es6.map');\nrequire('./modules/es6.set');\nrequire('./modules/es6.weak-map');\nrequire('./modules/es6.weak-set');\nrequire('./modules/es6.typed.array-buffer');\nrequire('./modules/es6.typed.data-view');\nrequire('./modules/es6.typed.int8-array');\nrequire('./modules/es6.typed.uint8-array');\nrequire('./modules/es6.typed.uint8-clamped-array');\nrequire('./modules/es6.typed.int16-array');\nrequire('./modules/es6.typed.uint16-array');\nrequire('./modules/es6.typed.int32-array');\nrequire('./modules/es6.typed.uint32-array');\nrequire('./modules/es6.typed.float32-array');\nrequire('./modules/es6.typed.float64-array');\nrequire('./modules/es6.reflect.apply');\nrequire('./modules/es6.reflect.construct');\nrequire('./modules/es6.reflect.define-property');\nrequire('./modules/es6.reflect.delete-property');\nrequire('./modules/es6.reflect.enumerate');\nrequire('./modules/es6.reflect.get');\nrequire('./modules/es6.reflect.get-own-property-descriptor');\nrequire('./modules/es6.reflect.get-prototype-of');\nrequire('./modules/es6.reflect.has');\nrequire('./modules/es6.reflect.is-extensible');\nrequire('./modules/es6.reflect.own-keys');\nrequire('./modules/es6.reflect.prevent-extensions');\nrequire('./modules/es6.reflect.set');\nrequire('./modules/es6.reflect.set-prototype-of');\nrequire('./modules/es7.array.includes');\nrequire('./modules/es7.array.flat-map');\nrequire('./modules/es7.array.flatten');\nrequire('./modules/es7.string.at');\nrequire('./modules/es7.string.pad-start');\nrequire('./modules/es7.string.pad-end');\nrequire('./modules/es7.string.trim-left');\nrequire('./modules/es7.string.trim-right');\nrequire('./modules/es7.string.match-all');\nrequire('./modules/es7.symbol.async-iterator');\nrequire('./modules/es7.symbol.observable');\nrequire('./modules/es7.object.get-own-property-descriptors');\nrequire('./modules/es7.object.values');\nrequire('./modules/es7.object.entries');\nrequire('./modules/es7.object.define-getter');\nrequire('./modules/es7.object.define-setter');\nrequire('./modules/es7.object.lookup-getter');\nrequire('./modules/es7.object.lookup-setter');\nrequire('./modules/es7.map.to-json');\nrequire('./modules/es7.set.to-json');\nrequire('./modules/es7.map.of');\nrequire('./modules/es7.set.of');\nrequire('./modules/es7.weak-map.of');\nrequire('./modules/es7.weak-set.of');\nrequire('./modules/es7.map.from');\nrequire('./modules/es7.set.from');\nrequire('./modules/es7.weak-map.from');\nrequire('./modules/es7.weak-set.from');\nrequire('./modules/es7.global');\nrequire('./modules/es7.system.global');\nrequire('./modules/es7.error.is-error');\nrequire('./modules/es7.math.clamp');\nrequire('./modules/es7.math.deg-per-rad');\nrequire('./modules/es7.math.degrees');\nrequire('./modules/es7.math.fscale');\nrequire('./modules/es7.math.iaddh');\nrequire('./modules/es7.math.isubh');\nrequire('./modules/es7.math.imulh');\nrequire('./modules/es7.math.rad-per-deg');\nrequire('./modules/es7.math.radians');\nrequire('./modules/es7.math.scale');\nrequire('./modules/es7.math.umulh');\nrequire('./modules/es7.math.signbit');\nrequire('./modules/es7.promise.finally');\nrequire('./modules/es7.promise.try');\nrequire('./modules/es7.reflect.define-metadata');\nrequire('./modules/es7.reflect.delete-metadata');\nrequire('./modules/es7.reflect.get-metadata');\nrequire('./modules/es7.reflect.get-metadata-keys');\nrequire('./modules/es7.reflect.get-own-metadata');\nrequire('./modules/es7.reflect.get-own-metadata-keys');\nrequire('./modules/es7.reflect.has-metadata');\nrequire('./modules/es7.reflect.has-own-metadata');\nrequire('./modules/es7.reflect.metadata');\nrequire('./modules/es7.asap');\nrequire('./modules/es7.observable');\nrequire('./modules/web.timers');\nrequire('./modules/web.immediate');\nrequire('./modules/web.dom.iterable');\nmodule.exports = require('./modules/_core');\n","import $ from 'jquery';\n\nimport { Foundation } from '../../js/foundation.core';\nFoundation.addToJquery($);\n\n// Add Foundation Utils to Foundation global namespace for backwards\n// compatibility.\n\nimport { rtl, GetYoDigits, transitionend } from '../../js/foundation.util.core';\nFoundation.rtl = rtl;\nFoundation.GetYoDigits = GetYoDigits;\nFoundation.transitionend = transitionend;\n\nimport { Box } from '../../js/foundation.util.box'\nimport { onImagesLoaded } from '../../js/foundation.util.imageLoader';\nimport { Keyboard } from '../../js/foundation.util.keyboard';\nimport { MediaQuery } from '../../js/foundation.util.mediaQuery';\nimport { Motion, Move } from '../../js/foundation.util.motion';\nimport { Nest } from '../../js/foundation.util.nest';\nimport { Timer } from '../../js/foundation.util.timer';\n\nFoundation.Box = Box;\nFoundation.onImagesLoaded = onImagesLoaded;\nFoundation.Keyboard = Keyboard;\nFoundation.MediaQuery = MediaQuery;\nFoundation.Motion = Motion;\nFoundation.Move = Move;\nFoundation.Nest = Nest;\nFoundation.Timer = Timer;\n\n// Touch and Triggers previously were almost purely sede effect driven,\n// so n../../js// need to add it to Foundation, just init them.\n\nimport { Touch } from '../../js/foundation.util.touch';\nTouch.init($);\n\nimport { Triggers } from '../../js/foundation.util.triggers';\nTriggers.init($, Foundation);\n\nimport { Abide } from '../../js/foundation.abide';\nFoundation.plugin(Abide, 'Abide');\n\nimport { Accordion } from '../../js/foundation.accordion';\nFoundation.plugin(Accordion, 'Accordion');\n\nimport { AccordionMenu } from '../../js/foundation.accordionMenu';\nFoundation.plugin(AccordionMenu, 'AccordionMenu');\n\nimport { Drilldown } from '../../js/foundation.drilldown';\nFoundation.plugin(Drilldown, 'Drilldown');\n\nimport { Dropdown } from '../../js/foundation.dropdown';\nFoundation.plugin(Dropdown, 'Dropdown');\n\nimport { DropdownMenu } from '../../js/foundation.dropdownMenu';\nFoundation.plugin(DropdownMenu, 'DropdownMenu');\n\nimport { Equalizer } from '../../js/foundation.equalizer';\nFoundation.plugin(Equalizer, 'Equalizer');\n\nimport { Interchange } from '../../js/foundation.interchange';\nFoundation.plugin(Interchange, 'Interchange');\n\nimport { Magellan } from '../../js/foundation.magellan';\nFoundation.plugin(Magellan, 'Magellan');\n\nimport { OffCanvas } from '../../js/foundation.offcanvas';\nFoundation.plugin(OffCanvas, 'OffCanvas');\n\nimport { Orbit } from '../../js/foundation.orbit';\nFoundation.plugin(Orbit, 'Orbit');\n\nimport { ResponsiveMenu } from '../../js/foundation.responsiveMenu';\nFoundation.plugin(ResponsiveMenu, 'ResponsiveMenu');\n\nimport { ResponsiveToggle } from '../../js/foundation.responsiveToggle';\nFoundation.plugin(ResponsiveToggle, 'ResponsiveToggle');\n\nimport { Reveal } from '../../js/foundation.reveal';\nFoundation.plugin(Reveal, 'Reveal');\n\nimport { Slider } from '../../js/foundation.slider';\nFoundation.plugin(Slider, 'Slider');\n\nimport { SmoothScroll } from '../../js/foundation.smoothScroll';\nFoundation.plugin(SmoothScroll, 'SmoothScroll');\n\nimport { Sticky } from '../../js/foundation.sticky';\nFoundation.plugin(Sticky, 'Sticky');\n\nimport { Tabs } from '../../js/foundation.tabs';\nFoundation.plugin(Tabs, 'Tabs');\n\nimport { Toggler } from '../../js/foundation.toggler';\nFoundation.plugin(Toggler, 'Toggler');\n\nimport { Tooltip } from '../../js/foundation.tooltip';\nFoundation.plugin(Tooltip, 'Tooltip');\n\nimport { ResponsiveAccordionTabs } from '../../js/foundation.responsiveAccordionTabs';\nFoundation.plugin(ResponsiveAccordionTabs, 'ResponsiveAccordionTabs');\n\nexport default Foundation;\n","'use strict';\n\nimport $ from 'jquery';\nimport { Plugin } from './foundation.plugin';\n\n/**\n * Abide module.\n * @module foundation.abide\n */\n\nclass Abide extends Plugin {\n  /**\n   * Creates a new instance of Abide.\n   * @class\n   * @name Abide\n   * @fires Abide#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options = {}) {\n    this.$element = element;\n    this.options  = $.extend(true, {}, Abide.defaults, this.$element.data(), options);\n\n    this.className = 'Abide'; // ie9 back compat\n    this._init();\n  }\n\n  /**\n   * Initializes the Abide plugin and calls functions to get Abide functioning on load.\n   * @private\n   */\n  _init() {\n    this.$inputs = this.$element.find('input, textarea, select');\n\n    this._events();\n  }\n\n  /**\n   * Initializes events for Abide.\n   * @private\n   */\n  _events() {\n    this.$element.off('.abide')\n      .on('reset.zf.abide', () => {\n        this.resetForm();\n      })\n      .on('submit.zf.abide', () => {\n        return this.validateForm();\n      });\n\n    if (this.options.validateOn === 'fieldChange') {\n      this.$inputs\n        .off('change.zf.abide')\n        .on('change.zf.abide', (e) => {\n          this.validateInput($(e.target));\n        });\n    }\n\n    if (this.options.liveValidate) {\n      this.$inputs\n        .off('input.zf.abide')\n        .on('input.zf.abide', (e) => {\n          this.validateInput($(e.target));\n        });\n    }\n\n    if (this.options.validateOnBlur) {\n      this.$inputs\n        .off('blur.zf.abide')\n        .on('blur.zf.abide', (e) => {\n          this.validateInput($(e.target));\n        });\n    }\n  }\n\n  /**\n   * Calls necessary functions to update Abide upon DOM change\n   * @private\n   */\n  _reflow() {\n    this._init();\n  }\n\n  /**\n   * Checks whether or not a form element has the required attribute and if it's checked or not\n   * @param {Object} element - jQuery object to check for required attribute\n   * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n   */\n  requiredCheck($el) {\n    if (!$el.attr('required')) return true;\n\n    var isGood = true;\n\n    switch ($el[0].type) {\n      case 'checkbox':\n        isGood = $el[0].checked;\n        break;\n\n      case 'select':\n      case 'select-one':\n      case 'select-multiple':\n        var opt = $el.find('option:selected');\n        if (!opt.length || !opt.val()) isGood = false;\n        break;\n\n      default:\n        if(!$el.val() || !$el.val().length) isGood = false;\n    }\n\n    return isGood;\n  }\n\n  /**\n   * Get:\n   * - Based on $el, the first element(s) corresponding to `formErrorSelector` in this order:\n   *   1. The element's direct sibling('s).\n   *   2. The element's parent's children.\n   * - Element(s) with the attribute `[data-form-error-for]` set with the element's id.\n   *\n   * This allows for multiple form errors per input, though if none are found, no form errors will be shown.\n   *\n   * @param {Object} $el - jQuery object to use as reference to find the form error selector.\n   * @returns {Object} jQuery object with the selector.\n   */\n  findFormError($el) {\n    var id = $el[0].id;\n    var $error = $el.siblings(this.options.formErrorSelector);\n\n    if (!$error.length) {\n      $error = $el.parent().find(this.options.formErrorSelector);\n    }\n\n    $error = $error.add(this.$element.find(`[data-form-error-for=\"${id}\"]`));\n\n    return $error;\n  }\n\n  /**\n   * Get the first element in this order:\n   * 2. The <label> with the attribute `[for=\"someInputId\"]`\n   * 3. The `.closest()` <label>\n   *\n   * @param {Object} $el - jQuery object to check for required attribute\n   * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n   */\n  findLabel($el) {\n    var id = $el[0].id;\n    var $label = this.$element.find(`label[for=\"${id}\"]`);\n\n    if (!$label.length) {\n      return $el.closest('label');\n    }\n\n    return $label;\n  }\n\n  /**\n   * Get the set of labels associated with a set of radio els in this order\n   * 2. The <label> with the attribute `[for=\"someInputId\"]`\n   * 3. The `.closest()` <label>\n   *\n   * @param {Object} $el - jQuery object to check for required attribute\n   * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty\n   */\n  findRadioLabels($els) {\n    var labels = $els.map((i, el) => {\n      var id = el.id;\n      var $label = this.$element.find(`label[for=\"${id}\"]`);\n\n      if (!$label.length) {\n        $label = $(el).closest('label');\n      }\n      return $label[0];\n    });\n\n    return $(labels);\n  }\n\n  /**\n   * Adds the CSS error class as specified by the Abide settings to the label, input, and the form\n   * @param {Object} $el - jQuery object to add the class to\n   */\n  addErrorClasses($el) {\n    var $label = this.findLabel($el);\n    var $formError = this.findFormError($el);\n\n    if ($label.length) {\n      $label.addClass(this.options.labelErrorClass);\n    }\n\n    if ($formError.length) {\n      $formError.addClass(this.options.formErrorClass);\n    }\n\n    $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');\n  }\n\n  /**\n   * Remove CSS error classes etc from an entire radio button group\n   * @param {String} groupName - A string that specifies the name of a radio button group\n   *\n   */\n\n  removeRadioErrorClasses(groupName) {\n    var $els = this.$element.find(`:radio[name=\"${groupName}\"]`);\n    var $labels = this.findRadioLabels($els);\n    var $formErrors = this.findFormError($els);\n\n    if ($labels.length) {\n      $labels.removeClass(this.options.labelErrorClass);\n    }\n\n    if ($formErrors.length) {\n      $formErrors.removeClass(this.options.formErrorClass);\n    }\n\n    $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n\n  }\n\n  /**\n   * Removes CSS error class as specified by the Abide settings from the label, input, and the form\n   * @param {Object} $el - jQuery object to remove the class from\n   */\n  removeErrorClasses($el) {\n    // radios need to clear all of the els\n    if($el[0].type == 'radio') {\n      return this.removeRadioErrorClasses($el.attr('name'));\n    }\n\n    var $label = this.findLabel($el);\n    var $formError = this.findFormError($el);\n\n    if ($label.length) {\n      $label.removeClass(this.options.labelErrorClass);\n    }\n\n    if ($formError.length) {\n      $formError.removeClass(this.options.formErrorClass);\n    }\n\n    $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');\n  }\n\n  /**\n   * Goes through a form to find inputs and proceeds to validate them in ways specific to their type.\n   * Ignores inputs with data-abide-ignore, type=\"hidden\" or disabled attributes set\n   * @fires Abide#invalid\n   * @fires Abide#valid\n   * @param {Object} element - jQuery object to validate, should be an HTML input\n   * @returns {Boolean} goodToGo - If the input is valid or not.\n   */\n  validateInput($el) {\n    var clearRequire = this.requiredCheck($el),\n        validated = false,\n        customValidator = true,\n        validator = $el.attr('data-validator'),\n        equalTo = true;\n\n    // don't validate ignored inputs or hidden inputs or disabled inputs\n    if ($el.is('[data-abide-ignore]') || $el.is('[type=\"hidden\"]') || $el.is('[disabled]')) {\n      return true;\n    }\n\n    switch ($el[0].type) {\n      case 'radio':\n        validated = this.validateRadio($el.attr('name'));\n        break;\n\n      case 'checkbox':\n        validated = clearRequire;\n        break;\n\n      case 'select':\n      case 'select-one':\n      case 'select-multiple':\n        validated = clearRequire;\n        break;\n\n      default:\n        validated = this.validateText($el);\n    }\n\n    if (validator) {\n      customValidator = this.matchValidation($el, validator, $el.attr('required'));\n    }\n\n    if ($el.attr('data-equalto')) {\n      equalTo = this.options.validators.equalTo($el);\n    }\n\n\n    var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;\n    var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';\n\n    if (goodToGo) {\n      // Re-validate inputs that depend on this one with equalto\n      const dependentElements = this.$element.find(`[data-equalto=\"${$el.attr('id')}\"]`);\n      if (dependentElements.length) {\n        let _this = this;\n        dependentElements.each(function() {\n          if ($(this).val()) {\n            _this.validateInput($(this));\n          }\n        });\n      }\n    }\n\n    this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);\n\n    /**\n     * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`\n     * Trigger includes the DOM element of the input.\n     * @event Abide#valid\n     * @event Abide#invalid\n     */\n    $el.trigger(message, [$el]);\n\n    return goodToGo;\n  }\n\n  /**\n   * Goes through a form and if there are any invalid inputs, it will display the form error element\n   * @returns {Boolean} noError - true if no errors were detected...\n   * @fires Abide#formvalid\n   * @fires Abide#forminvalid\n   */\n  validateForm() {\n    var acc = [];\n    var _this = this;\n\n    this.$inputs.each(function() {\n      acc.push(_this.validateInput($(this)));\n    });\n\n    var noError = acc.indexOf(false) === -1;\n\n    this.$element.find('[data-abide-error]').css('display', (noError ? 'none' : 'block'));\n\n    /**\n     * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.\n     * Trigger includes the element of the form.\n     * @event Abide#formvalid\n     * @event Abide#forminvalid\n     */\n    this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);\n\n    return noError;\n  }\n\n  /**\n   * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.\n   * @param {Object} $el - jQuery object to validate, should be a text input HTML element\n   * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns\n   * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified\n   */\n  validateText($el, pattern) {\n    // A pattern can be passed to this function, or it will be infered from the input's \"pattern\" attribute, or it's \"type\" attribute\n    pattern = (pattern || $el.attr('pattern') || $el.attr('type'));\n    var inputText = $el.val();\n    var valid = false;\n\n    if (inputText.length) {\n      // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp\n      if (this.options.patterns.hasOwnProperty(pattern)) {\n        valid = this.options.patterns[pattern].test(inputText);\n      }\n      // If the pattern name isn't also the type attribute of the field, then test it as a regexp\n      else if (pattern !== $el.attr('type')) {\n        valid = new RegExp(pattern).test(inputText);\n      }\n      else {\n        valid = true;\n      }\n    }\n    // An empty field is valid if it's not required\n    else if (!$el.prop('required')) {\n      valid = true;\n    }\n\n    return valid;\n   }\n\n  /**\n   * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.\n   * @param {String} groupName - A string that specifies the name of a radio button group\n   * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)\n   */\n  validateRadio(groupName) {\n    // If at least one radio in the group has the `required` attribute, the group is considered required\n    // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice\n    var $group = this.$element.find(`:radio[name=\"${groupName}\"]`);\n    var valid = false, required = false;\n\n    // For the group to be required, at least one radio needs to be required\n    $group.each((i, e) => {\n      if ($(e).attr('required')) {\n        required = true;\n      }\n    });\n    if(!required) valid=true;\n\n    if (!valid) {\n      // For the group to be valid, at least one radio needs to be checked\n      $group.each((i, e) => {\n        if ($(e).prop('checked')) {\n          valid = true;\n        }\n      });\n    };\n\n    return valid;\n  }\n\n  /**\n   * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator=\"foo bar baz\"` in a space separated listed.\n   * @param {Object} $el - jQuery input element.\n   * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.\n   * @param {Boolean} required - self explanatory?\n   * @returns {Boolean} - true if validations passed.\n   */\n  matchValidation($el, validators, required) {\n    required = required ? true : false;\n\n    var clear = validators.split(' ').map((v) => {\n      return this.options.validators[v]($el, required, $el.parent());\n    });\n    return clear.indexOf(false) === -1;\n  }\n\n  /**\n   * Resets form inputs and styles\n   * @fires Abide#formreset\n   */\n  resetForm() {\n    var $form = this.$element,\n        opts = this.options;\n\n    $(`.${opts.labelErrorClass}`, $form).not('small').removeClass(opts.labelErrorClass);\n    $(`.${opts.inputErrorClass}`, $form).not('small').removeClass(opts.inputErrorClass);\n    $(`${opts.formErrorSelector}.${opts.formErrorClass}`).removeClass(opts.formErrorClass);\n    $form.find('[data-abide-error]').css('display', 'none');\n    $(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');\n    $(':input:radio', $form).not('[data-abide-ignore]').prop('checked',false).removeAttr('data-invalid');\n    $(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked',false).removeAttr('data-invalid');\n    /**\n     * Fires when the form has been reset.\n     * @event Abide#formreset\n     */\n    $form.trigger('formreset.zf.abide', [$form]);\n  }\n\n  /**\n   * Destroys an instance of Abide.\n   * Removes error styles and classes from elements, without resetting their values.\n   */\n  _destroy() {\n    var _this = this;\n    this.$element\n      .off('.abide')\n      .find('[data-abide-error]')\n        .css('display', 'none');\n\n    this.$inputs\n      .off('.abide')\n      .each(function() {\n        _this.removeErrorClasses($(this));\n      });\n  }\n}\n\n/**\n * Default settings for plugin\n */\nAbide.defaults = {\n  /**\n   * The default event to validate inputs. Checkboxes and radios validate immediately.\n   * Remove or change this value for manual validation.\n   * @option\n   * @type {?string}\n   * @default 'fieldChange'\n   */\n  validateOn: 'fieldChange',\n\n  /**\n   * Class to be applied to input labels on failed validation.\n   * @option\n   * @type {string}\n   * @default 'is-invalid-label'\n   */\n  labelErrorClass: 'is-invalid-label',\n\n  /**\n   * Class to be applied to inputs on failed validation.\n   * @option\n   * @type {string}\n   * @default 'is-invalid-input'\n   */\n  inputErrorClass: 'is-invalid-input',\n\n  /**\n   * Class selector to use to target Form Errors for show/hide.\n   * @option\n   * @type {string}\n   * @default '.form-error'\n   */\n  formErrorSelector: '.form-error',\n\n  /**\n   * Class added to Form Errors on failed validation.\n   * @option\n   * @type {string}\n   * @default 'is-visible'\n   */\n  formErrorClass: 'is-visible',\n\n  /**\n   * Set to true to validate text inputs on any value change.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  liveValidate: false,\n\n  /**\n   * Set to true to validate inputs on blur.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  validateOnBlur: false,\n\n  patterns: {\n    alpha : /^[a-zA-Z]+$/,\n    alpha_numeric : /^[a-zA-Z0-9]+$/,\n    integer : /^[-+]?\\d+$/,\n    number : /^[-+]?\\d*(?:[\\.\\,]\\d+)?$/,\n\n    // amex, visa, diners\n    card : /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(?:222[1-9]|2[3-6][0-9]{2}|27[0-1][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/,\n    cvv : /^([0-9]){3,4}$/,\n\n    // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address\n    email : /^[a-zA-Z0-9.!#$%&'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,\n\n    url : /^(https?|ftp|file|ssh):\\/\\/(((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-zA-Z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-zA-Z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/,\n    // abc.de\n    domain : /^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,8}$/,\n\n    datetime : /^([0-2][0-9]{3})\\-([0-1][0-9])\\-([0-3][0-9])T([0-5][0-9])\\:([0-5][0-9])\\:([0-5][0-9])(Z|([\\-\\+]([0-1][0-9])\\:00))$/,\n    // YYYY-MM-DD\n    date : /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,\n    // HH:MM:SS\n    time : /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,\n    dateISO : /^\\d{4}[\\/\\-]\\d{1,2}[\\/\\-]\\d{1,2}$/,\n    // MM/DD/YYYY\n    month_day_year : /^(0[1-9]|1[012])[- \\/.](0[1-9]|[12][0-9]|3[01])[- \\/.]\\d{4}$/,\n    // DD/MM/YYYY\n    day_month_year : /^(0[1-9]|[12][0-9]|3[01])[- \\/.](0[1-9]|1[012])[- \\/.]\\d{4}$/,\n\n    // #FFF or #FFFFFF\n    color : /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,\n\n    // Domain || URL\n    website: {\n      test: (text) => {\n        return Abide.defaults.patterns['domain'].test(text) || Abide.defaults.patterns['url'].test(text);\n      }\n    }\n  },\n\n  /**\n   * Optional validation functions to be used. `equalTo` being the only default included function.\n   * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:\n   * el : The jQuery element to validate.\n   * required : Boolean value of the required attribute be present or not.\n   * parent : The direct parent of the input.\n   * @option\n   */\n  validators: {\n    equalTo: function (el, required, parent) {\n      return $(`#${el.attr('data-equalto')}`).val() === el.val();\n    }\n  }\n}\n\nexport {Abide};\n","'use strict';\n\nimport $ from 'jquery';\nimport { Keyboard } from './foundation.util.keyboard';\nimport { GetYoDigits } from './foundation.util.core';\nimport { Plugin } from './foundation.plugin';\n\n/**\n * Accordion module.\n * @module foundation.accordion\n * @requires foundation.util.keyboard\n */\n\nclass Accordion extends Plugin {\n  /**\n   * Creates a new instance of an accordion.\n   * @class\n   * @name Accordion\n   * @fires Accordion#init\n   * @param {jQuery} element - jQuery object to make into an accordion.\n   * @param {Object} options - a plain object with settings to override the default options.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Accordion.defaults, this.$element.data(), options);\n\n    this.className = 'Accordion'; // ie9 back compat\n    this._init();\n\n    Keyboard.register('Accordion', {\n      'ENTER': 'toggle',\n      'SPACE': 'toggle',\n      'ARROW_DOWN': 'next',\n      'ARROW_UP': 'previous'\n    });\n  }\n\n  /**\n   * Initializes the accordion by animating the preset active pane(s).\n   * @private\n   */\n  _init() {\n    this.$element.attr('role', 'tablist');\n    this.$tabs = this.$element.children('[data-accordion-item]');\n\n    this.$tabs.each(function(idx, el) {\n      var $el = $(el),\n          $content = $el.children('[data-tab-content]'),\n          id = $content[0].id || GetYoDigits(6, 'accordion'),\n          linkId = el.id || `${id}-label`;\n\n      $el.find('a:first').attr({\n        'aria-controls': id,\n        'role': 'tab',\n        'id': linkId,\n        'aria-expanded': false,\n        'aria-selected': false\n      });\n\n      $content.attr({'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id});\n    });\n    var $initActive = this.$element.find('.is-active').children('[data-tab-content]');\n    this.firstTimeInit = true;\n    if($initActive.length){\n      this.down($initActive, this.firstTimeInit);\n      this.firstTimeInit = false;\n    }\n\n    this._checkDeepLink = () => {\n      var anchor = window.location.hash;\n      //need a hash and a relevant anchor in this tabset\n      if(anchor.length) {\n        var $link = this.$element.find('[href$=\"'+anchor+'\"]'),\n        $anchor = $(anchor);\n\n        if ($link.length && $anchor) {\n          if (!$link.parent('[data-accordion-item]').hasClass('is-active')) {\n            this.down($anchor, this.firstTimeInit);\n            this.firstTimeInit = false;\n          };\n\n          //roll up a little to show the titles\n          if (this.options.deepLinkSmudge) {\n            var _this = this;\n            $(window).load(function() {\n              var offset = _this.$element.offset();\n              $('html, body').animate({ scrollTop: offset.top }, _this.options.deepLinkSmudgeDelay);\n            });\n          }\n\n          /**\n            * Fires when the zplugin has deeplinked at pageload\n            * @event Accordion#deeplink\n            */\n          this.$element.trigger('deeplink.zf.accordion', [$link, $anchor]);\n        }\n      }\n    }\n\n    //use browser to open a tab, if it exists in this tabset\n    if (this.options.deepLink) {\n      this._checkDeepLink();\n    }\n\n    this._events();\n  }\n\n  /**\n   * Adds event handlers for items within the accordion.\n   * @private\n   */\n  _events() {\n    var _this = this;\n\n    this.$tabs.each(function() {\n      var $elem = $(this);\n      var $tabContent = $elem.children('[data-tab-content]');\n      if ($tabContent.length) {\n        $elem.children('a').off('click.zf.accordion keydown.zf.accordion')\n               .on('click.zf.accordion', function(e) {\n          e.preventDefault();\n          _this.toggle($tabContent);\n        }).on('keydown.zf.accordion', function(e){\n          Keyboard.handleKey(e, 'Accordion', {\n            toggle: function() {\n              _this.toggle($tabContent);\n            },\n            next: function() {\n              var $a = $elem.next().find('a').focus();\n              if (!_this.options.multiExpand) {\n                $a.trigger('click.zf.accordion')\n              }\n            },\n            previous: function() {\n              var $a = $elem.prev().find('a').focus();\n              if (!_this.options.multiExpand) {\n                $a.trigger('click.zf.accordion')\n              }\n            },\n            handled: function() {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n          });\n        });\n      }\n    });\n    if(this.options.deepLink) {\n      $(window).on('popstate', this._checkDeepLink);\n    }\n  }\n\n  /**\n   * Toggles the selected content pane's open/close state.\n   * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).\n   * @function\n   */\n  toggle($target) {\n    if ($target.closest('[data-accordion]').is('[disabled]')) {\n      console.info('Cannot toggle an accordion that is disabled.');\n      return;\n    }\n    if($target.parent().hasClass('is-active')) {\n      this.up($target);\n    } else {\n      this.down($target);\n    }\n    //either replace or update browser history\n    if (this.options.deepLink) {\n      var anchor = $target.prev('a').attr('href');\n\n      if (this.options.updateHistory) {\n        history.pushState({}, '', anchor);\n      } else {\n        history.replaceState({}, '', anchor);\n      }\n    }\n  }\n\n  /**\n   * Opens the accordion tab defined by `$target`.\n   * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).\n   * @param {Boolean} firstTime - flag to determine if reflow should happen.\n   * @fires Accordion#down\n   * @function\n   */\n  down($target, firstTime) {\n    /**\n     * checking firstTime allows for initial render of the accordion\n     * to render preset is-active panes.\n     */\n    if ($target.closest('[data-accordion]').is('[disabled]') && !firstTime)  {\n      console.info('Cannot call down on an accordion that is disabled.');\n      return;\n    }\n    $target\n      .attr('aria-hidden', false)\n      .parent('[data-tab-content]')\n      .addBack()\n      .parent().addClass('is-active');\n\n    if (!this.options.multiExpand && !firstTime) {\n      var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');\n      if ($currentActive.length) {\n        this.up($currentActive.not($target));\n      }\n    }\n\n    $target.slideDown(this.options.slideSpeed, () => {\n      /**\n       * Fires when the tab is done opening.\n       * @event Accordion#down\n       */\n      this.$element.trigger('down.zf.accordion', [$target]);\n    });\n\n    $(`#${$target.attr('aria-labelledby')}`).attr({\n      'aria-expanded': true,\n      'aria-selected': true\n    });\n  }\n\n  /**\n   * Closes the tab defined by `$target`.\n   * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).\n   * @fires Accordion#up\n   * @function\n   */\n  up($target) {\n    if ($target.closest('[data-accordion]').is('[disabled]')) {\n      console.info('Cannot call up on an accordion that is disabled.');\n      return;\n    }\n\n    var $aunts = $target.parent().siblings(),\n        _this = this;\n\n    if((!this.options.allowAllClosed && !$aunts.hasClass('is-active')) || !$target.parent().hasClass('is-active')) {\n      return;\n    }\n\n    $target.slideUp(_this.options.slideSpeed, function () {\n      /**\n       * Fires when the tab is done collapsing up.\n       * @event Accordion#up\n       */\n      _this.$element.trigger('up.zf.accordion', [$target]);\n    });\n\n    $target.attr('aria-hidden', true)\n           .parent().removeClass('is-active');\n\n    $(`#${$target.attr('aria-labelledby')}`).attr({\n     'aria-expanded': false,\n     'aria-selected': false\n   });\n  }\n\n  /**\n   * Destroys an instance of an accordion.\n   * @fires Accordion#destroyed\n   * @function\n   */\n  _destroy() {\n    this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');\n    this.$element.find('a').off('.zf.accordion');\n    if(this.options.deepLink) {\n      $(window).off('popstate', this._checkDeepLink);\n    }\n\n  }\n}\n\nAccordion.defaults = {\n  /**\n   * Amount of time to animate the opening of an accordion pane.\n   * @option\n   * @type {number}\n   * @default 250\n   */\n  slideSpeed: 250,\n  /**\n   * Allow the accordion to have multiple open panes.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  multiExpand: false,\n  /**\n   * Allow the accordion to close all panes.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  allowAllClosed: false,\n  /**\n   * Allows the window to scroll to content of pane specified by hash anchor\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  deepLink: false,\n\n  /**\n   * Adjust the deep link scroll to make sure the top of the accordion panel is visible\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  deepLinkSmudge: false,\n\n  /**\n   * Animation time (ms) for the deep link adjustment\n   * @option\n   * @type {number}\n   * @default 300\n   */\n  deepLinkSmudgeDelay: 300,\n\n  /**\n   * Update the browser history with the open accordion\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  updateHistory: false\n};\n\nexport {Accordion};\n","'use strict';\n\n\nimport $ from 'jquery';\nimport { Keyboard } from './foundation.util.keyboard';\nimport { Nest } from './foundation.util.nest';\nimport { GetYoDigits } from './foundation.util.core';\nimport { Plugin } from './foundation.plugin';\n\n/**\n * AccordionMenu module.\n * @module foundation.accordionMenu\n * @requires foundation.util.keyboard\n * @requires foundation.util.nest\n */\n\nclass AccordionMenu extends Plugin {\n  /**\n   * Creates a new instance of an accordion menu.\n   * @class\n   * @name AccordionMenu\n   * @fires AccordionMenu#init\n   * @param {jQuery} element - jQuery object to make into an accordion menu.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, AccordionMenu.defaults, this.$element.data(), options);\n    this.className = 'AccordionMenu'; // ie9 back compat\n\n    this._init();\n\n    Keyboard.register('AccordionMenu', {\n      'ENTER': 'toggle',\n      'SPACE': 'toggle',\n      'ARROW_RIGHT': 'open',\n      'ARROW_UP': 'up',\n      'ARROW_DOWN': 'down',\n      'ARROW_LEFT': 'close',\n      'ESCAPE': 'closeAll'\n    });\n  }\n\n\n\n  /**\n   * Initializes the accordion menu by hiding all nested menus.\n   * @private\n   */\n  _init() {\n    Nest.Feather(this.$element, 'accordion');\n\n    var _this = this;\n\n    this.$element.find('[data-submenu]').not('.is-active').slideUp(0);//.find('a').css('padding-left', '1rem');\n    this.$element.attr({\n      'role': 'tree',\n      'aria-multiselectable': this.options.multiOpen\n    });\n\n    this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');\n    this.$menuLinks.each(function(){\n      var linkId = this.id || GetYoDigits(6, 'acc-menu-link'),\n          $elem = $(this),\n          $sub = $elem.children('[data-submenu]'),\n          subId = $sub[0].id || GetYoDigits(6, 'acc-menu'),\n          isActive = $sub.hasClass('is-active');\n\n      if(_this.options.parentLink) {\n        let $anchor = $elem.children('a');\n        $anchor.clone().prependTo($sub).wrap('<li data-is-parent-link class=\"is-submenu-parent-item is-submenu-item is-accordion-submenu-item\"></li>');\n      }\n\n      if(_this.options.submenuToggle) {\n        $elem.addClass('has-submenu-toggle');\n        $elem.children('a').after('<button id=\"' + linkId + '\" class=\"submenu-toggle\" aria-controls=\"' + subId + '\" aria-expanded=\"' + isActive + '\" title=\"' + _this.options.submenuToggleText + '\"><span class=\"submenu-toggle-text\">' + _this.options.submenuToggleText + '</span></button>');\n      } else {\n        $elem.attr({\n          'aria-controls': subId,\n          'aria-expanded': isActive,\n          'id': linkId\n        });\n      }\n      $sub.attr({\n        'aria-labelledby': linkId,\n        'aria-hidden': !isActive,\n        'role': 'group',\n        'id': subId\n      });\n    });\n    this.$element.find('li').attr({\n      'role': 'treeitem'\n    });\n    var initPanes = this.$element.find('.is-active');\n    if(initPanes.length){\n      var _this = this;\n      initPanes.each(function(){\n        _this.down($(this));\n      });\n    }\n    this._events();\n  }\n\n  /**\n   * Adds event handlers for items within the menu.\n   * @private\n   */\n  _events() {\n    var _this = this;\n\n    this.$element.find('li').each(function() {\n      var $submenu = $(this).children('[data-submenu]');\n\n      if ($submenu.length) {\n        if(_this.options.submenuToggle) {\n          $(this).children('.submenu-toggle').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function(e) {\n            _this.toggle($submenu);\n          });\n        } else {\n            $(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function(e) {\n              e.preventDefault();\n              _this.toggle($submenu);\n            });\n        }\n      }\n    }).on('keydown.zf.accordionmenu', function(e){\n      var $element = $(this),\n          $elements = $element.parent('ul').children('li'),\n          $prevElement,\n          $nextElement,\n          $target = $element.children('[data-submenu]');\n\n      $elements.each(function(i) {\n        if ($(this).is($element)) {\n          $prevElement = $elements.eq(Math.max(0, i-1)).find('a').first();\n          $nextElement = $elements.eq(Math.min(i+1, $elements.length-1)).find('a').first();\n\n          if ($(this).children('[data-submenu]:visible').length) { // has open sub menu\n            $nextElement = $element.find('li:first-child').find('a').first();\n          }\n          if ($(this).is(':first-child')) { // is first element of sub menu\n            $prevElement = $element.parents('li').first().find('a').first();\n          } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) { // if previous element has open sub menu\n            $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();\n          }\n          if ($(this).is(':last-child')) { // is last element of sub menu\n            $nextElement = $element.parents('li').first().next('li').find('a').first();\n          }\n\n          return;\n        }\n      });\n\n      Keyboard.handleKey(e, 'AccordionMenu', {\n        open: function() {\n          if ($target.is(':hidden')) {\n            _this.down($target);\n            $target.find('li').first().find('a').first().focus();\n          }\n        },\n        close: function() {\n          if ($target.length && !$target.is(':hidden')) { // close active sub of this item\n            _this.up($target);\n          } else if ($element.parent('[data-submenu]').length) { // close currently open sub\n            _this.up($element.parent('[data-submenu]'));\n            $element.parents('li').first().find('a').first().focus();\n          }\n        },\n        up: function() {\n          $prevElement.focus();\n          return true;\n        },\n        down: function() {\n          $nextElement.focus();\n          return true;\n        },\n        toggle: function() {\n          if (_this.options.submenuToggle) {\n            return false;\n          }\n          if ($element.children('[data-submenu]').length) {\n            _this.toggle($element.children('[data-submenu]'));\n            return true;\n          }\n        },\n        closeAll: function() {\n          _this.hideAll();\n        },\n        handled: function(preventDefault) {\n          if (preventDefault) {\n            e.preventDefault();\n          }\n          e.stopImmediatePropagation();\n        }\n      });\n    });//.attr('tabindex', 0);\n  }\n\n  /**\n   * Closes all panes of the menu.\n   * @function\n   */\n  hideAll() {\n    this.up(this.$element.find('[data-submenu]'));\n  }\n\n  /**\n   * Opens all panes of the menu.\n   * @function\n   */\n  showAll() {\n    this.down(this.$element.find('[data-submenu]'));\n  }\n\n  /**\n   * Toggles the open/close state of a submenu.\n   * @function\n   * @param {jQuery} $target - the submenu to toggle\n   */\n  toggle($target){\n    if(!$target.is(':animated')) {\n      if (!$target.is(':hidden')) {\n        this.up($target);\n      }\n      else {\n        this.down($target);\n      }\n    }\n  }\n\n  /**\n   * Opens the sub-menu defined by `$target`.\n   * @param {jQuery} $target - Sub-menu to open.\n   * @fires AccordionMenu#down\n   */\n  down($target) {\n    var _this = this;\n\n    if(!this.options.multiOpen) {\n      this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));\n    }\n\n    $target.addClass('is-active').attr({'aria-hidden': false});\n\n    if(this.options.submenuToggle) {\n      $target.prev('.submenu-toggle').attr({'aria-expanded': true});\n    }\n    else {\n      $target.parent('.is-accordion-submenu-parent').attr({'aria-expanded': true});\n    }\n\n    $target.slideDown(_this.options.slideSpeed, function () {\n      /**\n       * Fires when the menu is done opening.\n       * @event AccordionMenu#down\n       */\n      _this.$element.trigger('down.zf.accordionMenu', [$target]);\n    });\n  }\n\n  /**\n   * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.\n   * @param {jQuery} $target - Sub-menu to close.\n   * @fires AccordionMenu#up\n   */\n  up($target) {\n    var _this = this;\n    $target.slideUp(_this.options.slideSpeed, function () {\n      /**\n       * Fires when the menu is done collapsing up.\n       * @event AccordionMenu#up\n       */\n      _this.$element.trigger('up.zf.accordionMenu', [$target]);\n    });\n\n    var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);\n\n    if(this.options.submenuToggle) {\n      $menus.prev('.submenu-toggle').attr('aria-expanded', false);\n    }\n    else {\n      $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);\n    }\n  }\n\n  /**\n   * Destroys an instance of accordion menu.\n   * @fires AccordionMenu#destroyed\n   */\n  _destroy() {\n    this.$element.find('[data-submenu]').slideDown(0).css('display', '');\n    this.$element.find('a').off('click.zf.accordionMenu');\n    this.$element.find('[data-is-parent-link]').detach();\n\n    if(this.options.submenuToggle) {\n      this.$element.find('.has-submenu-toggle').removeClass('has-submenu-toggle');\n      this.$element.find('.submenu-toggle').remove();\n    }\n\n    Nest.Burn(this.$element, 'accordion');\n  }\n}\n\nAccordionMenu.defaults = {\n  /**\n   * Adds the parent link to the submenu.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  parentLink: false,\n  /**\n   * Amount of time to animate the opening of a submenu in ms.\n   * @option\n   * @type {number}\n   * @default 250\n   */\n  slideSpeed: 250,\n  /**\n   * Adds a separate submenu toggle button. This allows the parent item to have a link.\n   * @option\n   * @example true\n   */\n  submenuToggle: false,\n  /**\n   * The text used for the submenu toggle if enabled. This is used for screen readers only.\n   * @option\n   * @example true\n   */\n  submenuToggleText: 'Toggle menu',\n  /**\n   * Allow the menu to have multiple open panes.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  multiOpen: true\n};\n\nexport {AccordionMenu};\n","\"use strict\";\n\nimport $ from 'jquery';\nimport { GetYoDigits } from './foundation.util.core';\nimport { MediaQuery } from './foundation.util.mediaQuery';\n\nvar FOUNDATION_VERSION = '6.4.4-rc1';\n\n// Global Foundation object\n// This is attached to the window, or used as a module for AMD/Browserify\nvar Foundation = {\n  version: FOUNDATION_VERSION,\n\n  /**\n   * Stores initialized plugins.\n   */\n  _plugins: {},\n\n  /**\n   * Stores generated unique ids for plugin instances\n   */\n  _uuids: [],\n\n  /**\n   * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.\n   * @param {Object} plugin - The constructor of the plugin.\n   */\n  plugin: function(plugin, name) {\n    // Object key to use when adding to global Foundation object\n    // Examples: Foundation.Reveal, Foundation.OffCanvas\n    var className = (name || functionName(plugin));\n    // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin\n    // Examples: data-reveal, data-off-canvas\n    var attrName  = hyphenate(className);\n\n    // Add to the Foundation object and the plugins list (for reflowing)\n    this._plugins[attrName] = this[className] = plugin;\n  },\n  /**\n   * @function\n   * Populates the _uuids array with pointers to each individual plugin instance.\n   * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.\n   * Also fires the initialization event for each plugin, consolidating repetitive code.\n   * @param {Object} plugin - an instance of a plugin, usually `this` in context.\n   * @param {String} name - the name of the plugin, passed as a camelCased string.\n   * @fires Plugin#init\n   */\n  registerPlugin: function(plugin, name){\n    var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();\n    plugin.uuid = GetYoDigits(6, pluginName);\n\n    if(!plugin.$element.attr(`data-${pluginName}`)){ plugin.$element.attr(`data-${pluginName}`, plugin.uuid); }\n    if(!plugin.$element.data('zfPlugin')){ plugin.$element.data('zfPlugin', plugin); }\n          /**\n           * Fires when the plugin has initialized.\n           * @event Plugin#init\n           */\n    plugin.$element.trigger(`init.zf.${pluginName}`);\n\n    this._uuids.push(plugin.uuid);\n\n    return;\n  },\n  /**\n   * @function\n   * Removes the plugins uuid from the _uuids array.\n   * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.\n   * Also fires the destroyed event for the plugin, consolidating repetitive code.\n   * @param {Object} plugin - an instance of a plugin, usually `this` in context.\n   * @fires Plugin#destroyed\n   */\n  unregisterPlugin: function(plugin){\n    var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));\n\n    this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);\n    plugin.$element.removeAttr(`data-${pluginName}`).removeData('zfPlugin')\n          /**\n           * Fires when the plugin has been destroyed.\n           * @event Plugin#destroyed\n           */\n          .trigger(`destroyed.zf.${pluginName}`);\n    for(var prop in plugin){\n      plugin[prop] = null;//clean up script to prep for garbage collection.\n    }\n    return;\n  },\n\n  /**\n   * @function\n   * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.\n   * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`\n   * @default If no argument is passed, reflow all currently active plugins.\n   */\n   reInit: function(plugins){\n     var isJQ = plugins instanceof $;\n     try{\n       if(isJQ){\n         plugins.each(function(){\n           $(this).data('zfPlugin')._init();\n         });\n       }else{\n         var type = typeof plugins,\n         _this = this,\n         fns = {\n           'object': function(plgs){\n             plgs.forEach(function(p){\n               p = hyphenate(p);\n               $('[data-'+ p +']').foundation('_init');\n             });\n           },\n           'string': function(){\n             plugins = hyphenate(plugins);\n             $('[data-'+ plugins +']').foundation('_init');\n           },\n           'undefined': function(){\n             this['object'](Object.keys(_this._plugins));\n           }\n         };\n         fns[type](plugins);\n       }\n     }catch(err){\n       console.error(err);\n     }finally{\n       return plugins;\n     }\n   },\n\n  /**\n   * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.\n   * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.\n   * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.\n   */\n  reflow: function(elem, plugins) {\n\n    // If plugins is undefined, just grab everything\n    if (typeof plugins === 'undefined') {\n      plugins = Object.keys(this._plugins);\n    }\n    // If plugins is a string, convert it to an array with one item\n    else if (typeof plugins === 'string') {\n      plugins = [plugins];\n    }\n\n    var _this = this;\n\n    // Iterate through each plugin\n    $.each(plugins, function(i, name) {\n      // Get the current plugin\n      var plugin = _this._plugins[name];\n\n      // Localize the search to all elements inside elem, as well as elem itself, unless elem === document\n      var $elem = $(elem).find('[data-'+name+']').addBack('[data-'+name+']');\n\n      // For each plugin found, initialize it\n      $elem.each(function() {\n        var $el = $(this),\n            opts = {};\n        // Don't double-dip on plugins\n        if ($el.data('zfPlugin')) {\n          console.warn(\"Tried to initialize \"+name+\" on an element that already has a Foundation plugin.\");\n          return;\n        }\n\n        if($el.attr('data-options')){\n          var thing = $el.attr('data-options').split(';').forEach(function(e, i){\n            var opt = e.split(':').map(function(el){ return el.trim(); });\n            if(opt[0]) opts[opt[0]] = parseValue(opt[1]);\n          });\n        }\n        try{\n          $el.data('zfPlugin', new plugin($(this), opts));\n        }catch(er){\n          console.error(er);\n        }finally{\n          return;\n        }\n      });\n    });\n  },\n  getFnName: functionName,\n\n  addToJquery: function($) {\n    // TODO: consider not making this a jQuery function\n    // TODO: need way to reflow vs. re-initialize\n    /**\n     * The Foundation jQuery method.\n     * @param {String|Array} method - An action to perform on the current jQuery object.\n     */\n    var foundation = function(method) {\n      var type = typeof method,\n          $noJS = $('.no-js');\n\n      if($noJS.length){\n        $noJS.removeClass('no-js');\n      }\n\n      if(type === 'undefined'){//needs to initialize the Foundation object, or an individual plugin.\n        MediaQuery._init();\n        Foundation.reflow(this);\n      }else if(type === 'string'){//an individual method to invoke on a plugin or group of plugins\n        var args = Array.prototype.slice.call(arguments, 1);//collect all the arguments, if necessary\n        var plugClass = this.data('zfPlugin');//determine the class of plugin\n\n        if(plugClass !== undefined && plugClass[method] !== undefined){//make sure both the class and method exist\n          if(this.length === 1){//if there's only one, call it directly.\n              plugClass[method].apply(plugClass, args);\n          }else{\n            this.each(function(i, el){//otherwise loop through the jQuery collection and invoke the method on each\n              plugClass[method].apply($(el).data('zfPlugin'), args);\n            });\n          }\n        }else{//error for no class or no method\n          throw new ReferenceError(\"We're sorry, '\" + method + \"' is not an available method for \" + (plugClass ? functionName(plugClass) : 'this element') + '.');\n        }\n      }else{//error for invalid argument type\n        throw new TypeError(`We're sorry, ${type} is not a valid parameter. You must use a string representing the method you wish to invoke.`);\n      }\n      return this;\n    };\n    $.fn.foundation = foundation;\n    return $;\n  }\n};\n\nFoundation.util = {\n  /**\n   * Function for applying a debounce effect to a function call.\n   * @function\n   * @param {Function} func - Function to be called at end of timeout.\n   * @param {Number} delay - Time in ms to delay the call of `func`.\n   * @returns function\n   */\n  throttle: function (func, delay) {\n    var timer = null;\n\n    return function () {\n      var context = this, args = arguments;\n\n      if (timer === null) {\n        timer = setTimeout(function () {\n          func.apply(context, args);\n          timer = null;\n        }, delay);\n      }\n    };\n  }\n};\n\nwindow.Foundation = Foundation;\n\n// Polyfill for requestAnimationFrame\n(function() {\n  if (!Date.now || !window.Date.now)\n    window.Date.now = Date.now = function() { return new Date().getTime(); };\n\n  var vendors = ['webkit', 'moz'];\n  for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {\n      var vp = vendors[i];\n      window.requestAnimationFrame = window[vp+'RequestAnimationFrame'];\n      window.cancelAnimationFrame = (window[vp+'CancelAnimationFrame']\n                                 || window[vp+'CancelRequestAnimationFrame']);\n  }\n  if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)\n    || !window.requestAnimationFrame || !window.cancelAnimationFrame) {\n    var lastTime = 0;\n    window.requestAnimationFrame = function(callback) {\n        var now = Date.now();\n        var nextTime = Math.max(lastTime + 16, now);\n        return setTimeout(function() { callback(lastTime = nextTime); },\n                          nextTime - now);\n    };\n    window.cancelAnimationFrame = clearTimeout;\n  }\n  /**\n   * Polyfill for performance.now, required by rAF\n   */\n  if(!window.performance || !window.performance.now){\n    window.performance = {\n      start: Date.now(),\n      now: function(){ return Date.now() - this.start; }\n    };\n  }\n})();\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (typeof this !== 'function') {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n    }\n\n    var aArgs   = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP    = function() {},\n        fBound  = function() {\n          return fToBind.apply(this instanceof fNOP\n                 ? this\n                 : oThis,\n                 aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    if (this.prototype) {\n      // native functions don't have a prototype\n      fNOP.prototype = this.prototype;\n    }\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n// Polyfill to get the name of a function in IE9\nfunction functionName(fn) {\n  if (Function.prototype.name === undefined) {\n    var funcNameRegex = /function\\s([^(]{1,})\\(/;\n    var results = (funcNameRegex).exec((fn).toString());\n    return (results && results.length > 1) ? results[1].trim() : \"\";\n  }\n  else if (fn.prototype === undefined) {\n    return fn.constructor.name;\n  }\n  else {\n    return fn.prototype.constructor.name;\n  }\n}\nfunction parseValue(str){\n  if ('true' === str) return true;\n  else if ('false' === str) return false;\n  else if (!isNaN(str * 1)) return parseFloat(str);\n  return str;\n}\n// Convert PascalCase to kebab-case\n// Thank you: http://stackoverflow.com/a/8955580\nfunction hyphenate(str) {\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\nexport {Foundation};\n","'use strict';\n\nimport $ from 'jquery';\nimport { Keyboard } from './foundation.util.keyboard';\nimport { Nest } from './foundation.util.nest';\nimport { GetYoDigits, transitionend } from './foundation.util.core';\nimport { Box } from './foundation.util.box';\nimport { Plugin } from './foundation.plugin';\n\n/**\n * Drilldown module.\n * @module foundation.drilldown\n * @requires foundation.util.keyboard\n * @requires foundation.util.nest\n * @requires foundation.util.box\n */\n\nclass Drilldown extends Plugin {\n  /**\n   * Creates a new instance of a drilldown menu.\n   * @class\n   * @name Drilldown\n   * @param {jQuery} element - jQuery object to make into an accordion menu.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Drilldown.defaults, this.$element.data(), options);\n    this.className = 'Drilldown'; // ie9 back compat\n\n    this._init();\n\n    Keyboard.register('Drilldown', {\n      'ENTER': 'open',\n      'SPACE': 'open',\n      'ARROW_RIGHT': 'next',\n      'ARROW_UP': 'up',\n      'ARROW_DOWN': 'down',\n      'ARROW_LEFT': 'previous',\n      'ESCAPE': 'close',\n      'TAB': 'down',\n      'SHIFT_TAB': 'up'\n    });\n  }\n\n  /**\n   * Initializes the drilldown by creating jQuery collections of elements\n   * @private\n   */\n  _init() {\n    Nest.Feather(this.$element, 'drilldown');\n\n    if(this.options.autoApplyClass) {\n      this.$element.addClass('drilldown');\n    }\n\n    this.$element.attr({\n      'role': 'tree',\n      'aria-multiselectable': false\n    });\n    this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');\n    this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]').attr('role', 'group');\n    this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'treeitem').find('a');\n    this.$element.attr('data-mutate', (this.$element.attr('data-drilldown') || GetYoDigits(6, 'drilldown')));\n\n    this._prepareMenu();\n    this._registerEvents();\n\n    this._keyboardEvents();\n  }\n\n  /**\n   * prepares drilldown menu by setting attributes to links and elements\n   * sets a min height to prevent content jumping\n   * wraps the element if not already wrapped\n   * @private\n   * @function\n   */\n  _prepareMenu() {\n    var _this = this;\n    // if(!this.options.holdOpen){\n    //   this._menuLinkEvents();\n    // }\n    this.$submenuAnchors.each(function(){\n      var $link = $(this);\n      var $sub = $link.parent();\n      if(_this.options.parentLink){\n        $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li data-is-parent-link class=\"is-submenu-parent-item is-submenu-item is-drilldown-submenu-item\" role=\"menuitem\"></li>');\n      }\n      $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);\n      $link.children('[data-submenu]')\n          .attr({\n            'aria-hidden': true,\n            'tabindex': 0,\n            'role': 'group'\n          });\n      _this._events($link);\n    });\n    this.$submenus.each(function(){\n      var $menu = $(this),\n          $back = $menu.find('.js-drilldown-back');\n      if(!$back.length){\n        switch (_this.options.backButtonPosition) {\n          case \"bottom\":\n            $menu.append(_this.options.backButton);\n            break;\n          case \"top\":\n            $menu.prepend(_this.options.backButton);\n            break;\n          default:\n            console.error(\"Unsupported backButtonPosition value '\" + _this.options.backButtonPosition + \"'\");\n        }\n      }\n      _this._back($menu);\n    });\n\n    this.$submenus.addClass('invisible');\n    if(!this.options.autoHeight) {\n      this.$submenus.addClass('drilldown-submenu-cover-previous');\n    }\n\n    // create a wrapper on element if it doesn't exist.\n    if(!this.$element.parent().hasClass('is-drilldown')){\n      this.$wrapper = $(this.options.wrapper).addClass('is-drilldown');\n      if(this.options.animateHeight) this.$wrapper.addClass('animate-height');\n      this.$element.wrap(this.$wrapper);\n    }\n    // set wrapper\n    this.$wrapper = this.$element.parent();\n    this.$wrapper.css(this._getMaxDims());\n  }\n\n  _resize() {\n    this.$wrapper.css({'max-width': 'none', 'min-height': 'none'});\n    // _getMaxDims has side effects (boo) but calling it should update all other necessary heights & widths\n    this.$wrapper.css(this._getMaxDims());\n  }\n\n  /**\n   * Adds event handlers to elements in the menu.\n   * @function\n   * @private\n   * @param {jQuery} $elem - the current menu item to add handlers to.\n   */\n  _events($elem) {\n    var _this = this;\n\n    $elem.off('click.zf.drilldown')\n    .on('click.zf.drilldown', function(e){\n      if($(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')){\n        e.stopImmediatePropagation();\n        e.preventDefault();\n      }\n\n      // if(e.target !== e.currentTarget.firstElementChild){\n      //   return false;\n      // }\n      _this._show($elem.parent('li'));\n\n      if(_this.options.closeOnClick){\n        var $body = $('body');\n        $body.off('.zf.drilldown').on('click.zf.drilldown', function(e){\n          if (e.target === _this.$element[0] || $.contains(_this.$element[0], e.target)) { return; }\n          e.preventDefault();\n          _this._hideAll();\n          $body.off('.zf.drilldown');\n        });\n      }\n    });\n  }\n\n  /**\n   * Adds event handlers to the menu element.\n   * @function\n   * @private\n   */\n  _registerEvents() {\n    if(this.options.scrollTop){\n      this._bindHandler = this._scrollTop.bind(this);\n      this.$element.on('open.zf.drilldown hide.zf.drilldown closed.zf.drilldown',this._bindHandler);\n    }\n    this.$element.on('mutateme.zf.trigger', this._resize.bind(this));\n  }\n\n  /**\n   * Scroll to Top of Element or data-scroll-top-element\n   * @function\n   * @fires Drilldown#scrollme\n   */\n  _scrollTop() {\n    var _this = this;\n    var $scrollTopElement = _this.options.scrollTopElement!=''?$(_this.options.scrollTopElement):_this.$element,\n        scrollPos = parseInt($scrollTopElement.offset().top+_this.options.scrollTopOffset, 10);\n    $('html, body').stop(true).animate({ scrollTop: scrollPos }, _this.options.animationDuration, _this.options.animationEasing,function(){\n      /**\n        * Fires after the menu has scrolled\n        * @event Drilldown#scrollme\n        */\n      if(this===$('html')[0])_this.$element.trigger('scrollme.zf.drilldown');\n    });\n  }\n\n  /**\n   * Adds keydown event listener to `li`'s in the menu.\n   * @private\n   */\n  _keyboardEvents() {\n    var _this = this;\n\n    this.$menuItems.add(this.$element.find('.js-drilldown-back > a, .is-submenu-parent-item > a')).on('keydown.zf.drilldown', function(e){\n      var $element = $(this),\n          $elements = $element.parent('li').parent('ul').children('li').children('a'),\n          $prevElement,\n          $nextElement;\n\n      $elements.each(function(i) {\n        if ($(this).is($element)) {\n          $prevElement = $elements.eq(Math.max(0, i-1));\n          $nextElement = $elements.eq(Math.min(i+1, $elements.length-1));\n          return;\n        }\n      });\n\n      Keyboard.handleKey(e, 'Drilldown', {\n        next: function() {\n          if ($element.is(_this.$submenuAnchors)) {\n            _this._show($element.parent('li'));\n            $element.parent('li').one(transitionend($element), function(){\n              $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();\n            });\n            return true;\n          }\n        },\n        previous: function() {\n          _this._hide($element.parent('li').parent('ul'));\n          $element.parent('li').parent('ul').one(transitionend($element), function(){\n            setTimeout(function() {\n              $element.parent('li').parent('ul').parent('li').children('a').first().focus();\n            }, 1);\n          });\n          return true;\n        },\n        up: function() {\n          $prevElement.focus();\n          // Don't tap focus on first element in root ul\n          return !$element.is(_this.$element.find('> li:first-child > a'));\n        },\n        down: function() {\n          $nextElement.focus();\n          // Don't tap focus on last element in root ul\n          return !$element.is(_this.$element.find('> li:last-child > a'));\n        },\n        close: function() {\n          // Don't close on element in root ul\n          if (!$element.is(_this.$element.find('> li > a'))) {\n            _this._hide($element.parent().parent());\n            $element.parent().parent().siblings('a').focus();\n          }\n        },\n        open: function() {\n          if (!$element.is(_this.$menuItems)) { // not menu item means back button\n            _this._hide($element.parent('li').parent('ul'));\n            $element.parent('li').parent('ul').one(transitionend($element), function(){\n              setTimeout(function() {\n                $element.parent('li').parent('ul').parent('li').children('a').first().focus();\n              }, 1);\n            });\n            return true;\n          } else if ($element.is(_this.$submenuAnchors)) {\n            _this._show($element.parent('li'));\n            $element.parent('li').one(transitionend($element), function(){\n              $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();\n            });\n            return true;\n          }\n        },\n        handled: function(preventDefault) {\n          if (preventDefault) {\n            e.preventDefault();\n          }\n          e.stopImmediatePropagation();\n        }\n      });\n    }); // end keyboardAccess\n  }\n\n  /**\n   * Closes all open elements, and returns to root menu.\n   * @function\n   * @fires Drilldown#closed\n   */\n  _hideAll() {\n    var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');\n    if(this.options.autoHeight) this.$wrapper.css({height:$elem.parent().closest('ul').data('calcHeight')});\n    $elem.one(transitionend($elem), function(e){\n      $elem.removeClass('is-active is-closing');\n    });\n        /**\n         * Fires when the menu is fully closed.\n         * @event Drilldown#closed\n         */\n    this.$element.trigger('closed.zf.drilldown');\n  }\n\n  /**\n   * Adds event listener for each `back` button, and closes open menus.\n   * @function\n   * @fires Drilldown#back\n   * @param {jQuery} $elem - the current sub-menu to add `back` event.\n   */\n  _back($elem) {\n    var _this = this;\n    $elem.off('click.zf.drilldown');\n    $elem.children('.js-drilldown-back')\n      .on('click.zf.drilldown', function(e){\n        e.stopImmediatePropagation();\n        // console.log('mouseup on back');\n        _this._hide($elem);\n\n        // If there is a parent submenu, call show\n        let parentSubMenu = $elem.parent('li').parent('ul').parent('li');\n        if (parentSubMenu.length) {\n          _this._show(parentSubMenu);\n        }\n      });\n  }\n\n  /**\n   * Adds event listener to menu items w/o submenus to close open menus on click.\n   * @function\n   * @private\n   */\n  _menuLinkEvents() {\n    var _this = this;\n    this.$menuItems.not('.is-drilldown-submenu-parent')\n        .off('click.zf.drilldown')\n        .on('click.zf.drilldown', function(e){\n          // e.stopImmediatePropagation();\n          setTimeout(function(){\n            _this._hideAll();\n          }, 0);\n      });\n  }\n\n  /**\n   * Sets the CSS classes for submenu to show it.\n   * @function\n   * @private\n   * @param {jQuery} $elem - the target submenu (`ul` tag)\n   * @param {boolean} trigger - trigger drilldown event\n   */\n  _setShowSubMenuClasses($elem, trigger) {\n    $elem.addClass('is-active').removeClass('invisible').attr('aria-hidden', false);\n    $elem.parent('li').attr('aria-expanded', true);\n    if (trigger === true) {\n      this.$element.trigger('open.zf.drilldown', [$elem]);\n    }\n  }\n\n  /**\n   * Sets the CSS classes for submenu to hide it.\n   * @function\n   * @private\n   * @param {jQuery} $elem - the target submenu (`ul` tag)\n   * @param {boolean} trigger - trigger drilldown event\n   */\n  _setHideSubMenuClasses($elem, trigger) {\n    $elem.removeClass('is-active').addClass('invisible').attr('aria-hidden', true);\n    $elem.parent('li').attr('aria-expanded', false);\n    if (trigger === true) {\n      $elem.trigger('hide.zf.drilldown', [$elem]);\n    }\n  }\n\n  /**\n   * Opens a specific drilldown (sub)menu no matter which (sub)menu in it is currently visible.\n   * Compared to _show() this lets you jump into any submenu without clicking through every submenu on the way to it.\n   * @function\n   * @fires Drilldown#open\n   * @param {jQuery} $elem - the target (sub)menu (`ul` tag)\n   * @param {boolean} autoFocus - if true the first link in the target (sub)menu gets auto focused\n   */\n  _showMenu($elem, autoFocus) {\n\n    var _this = this;\n\n    // Reset drilldown\n    var $expandedSubmenus = this.$element.find('li[aria-expanded=\"true\"] > ul[data-submenu]');\n    $expandedSubmenus.each(function(index) {\n      _this._setHideSubMenuClasses($(this));\n    });\n\n    // If target menu is root, focus first link & exit\n    if ($elem.is('[data-drilldown]')) {\n      if (autoFocus === true) $elem.find('li[role=\"treeitem\"] > a').first().focus();\n      if (this.options.autoHeight) this.$wrapper.css('height', $elem.data('calcHeight'));\n      return;\n    }\n\n    // Find all submenus on way to root incl. the element itself\n    var $submenus = $elem.children().first().parentsUntil('[data-drilldown]', '[data-submenu]');\n\n    // Open target menu and all submenus on its way to root\n    $submenus.each(function(index) {\n\n      // Update height of first child (target menu) if autoHeight option true\n      if (index === 0 && _this.options.autoHeight) {\n        _this.$wrapper.css('height', $(this).data('calcHeight'));\n      }\n\n      var isLastChild = index == $submenus.length - 1;\n\n      // Add transitionsend listener to last child (root due to reverse order) to open target menu's first link\n      // Last child makes sure the event gets always triggered even if going through several menus\n      if (isLastChild === true) {\n        $(this).one(transitionend($(this)), () => {\n          if (autoFocus === true) {\n            $elem.find('li[role=\"treeitem\"] > a').first().focus();\n          }\n        });\n      }\n\n      _this._setShowSubMenuClasses($(this), isLastChild);\n    });\n  }\n\n  /**\n   * Opens a submenu.\n   * @function\n   * @fires Drilldown#open\n   * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.\n   */\n  _show($elem) {\n    if(this.options.autoHeight) this.$wrapper.css({height:$elem.children('[data-submenu]').data('calcHeight')});\n    $elem.attr('aria-expanded', true);\n    $elem.children('[data-submenu]').addClass('is-active').removeClass('invisible').attr('aria-hidden', false);\n    /**\n     * Fires when the submenu has opened.\n     * @event Drilldown#open\n     */\n    this.$element.trigger('open.zf.drilldown', [$elem]);\n  }\n\n  /**\n   * Hides a submenu\n   * @function\n   * @fires Drilldown#hide\n   * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.\n   */\n  _hide($elem) {\n    if(this.options.autoHeight) this.$wrapper.css({height:$elem.parent().closest('ul').data('calcHeight')});\n    var _this = this;\n    $elem.parent('li').attr('aria-expanded', false);\n    $elem.attr('aria-hidden', true);\n    $elem.addClass('is-closing')\n         .one(transitionend($elem), function(){\n           $elem.removeClass('is-active is-closing');\n           $elem.blur().addClass('invisible');\n         });\n    /**\n     * Fires when the submenu has closed.\n     * @event Drilldown#hide\n     */\n    $elem.trigger('hide.zf.drilldown', [$elem]);\n  }\n\n  /**\n   * Iterates through the nested menus to calculate the min-height, and max-width for the menu.\n   * Prevents content jumping.\n   * @function\n   * @private\n   */\n  _getMaxDims() {\n    var  maxHeight = 0, result = {}, _this = this;\n    this.$submenus.add(this.$element).each(function(){\n      var numOfElems = $(this).children('li').length;\n      var height = Box.GetDimensions(this).height;\n      maxHeight = height > maxHeight ? height : maxHeight;\n      if(_this.options.autoHeight) {\n        $(this).data('calcHeight',height);\n        if (!$(this).hasClass('is-drilldown-submenu')) result['height'] = height;\n      }\n    });\n\n    if(!this.options.autoHeight) result['min-height'] = `${maxHeight}px`;\n\n    result['max-width'] = `${this.$element[0].getBoundingClientRect().width}px`;\n\n    return result;\n  }\n\n  /**\n   * Destroys the Drilldown Menu\n   * @function\n   */\n  _destroy() {\n    if(this.options.scrollTop) this.$element.off('.zf.drilldown',this._bindHandler);\n    this._hideAll();\n\t  this.$element.off('mutateme.zf.trigger');\n    Nest.Burn(this.$element, 'drilldown');\n    this.$element.unwrap()\n                 .find('.js-drilldown-back, .is-submenu-parent-item').remove()\n                 .end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu')\n                 .end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');\n    this.$submenuAnchors.each(function() {\n      $(this).off('.zf.drilldown');\n    });\n\n    this.$element.find('[data-is-parent-link]').detach();\n    this.$submenus.removeClass('drilldown-submenu-cover-previous invisible');\n\n    this.$element.find('a').each(function(){\n      var $link = $(this);\n      $link.removeAttr('tabindex');\n      if($link.data('savedHref')){\n        $link.attr('href', $link.data('savedHref')).removeData('savedHref');\n      }else{ return; }\n    });\n  };\n}\n\nDrilldown.defaults = {\n  /**\n   * Drilldowns depend on styles in order to function properly; in the default build of Foundation these are\n   * on the `drilldown` class. This option auto-applies this class to the drilldown upon initialization.\n   * @option\n   * @type {boolian}\n   * @default true\n   */\n  autoApplyClass: true,\n  /**\n   * Markup used for JS generated back button. Prepended  or appended (see backButtonPosition) to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\\`) if copy and pasting.\n   * @option\n   * @type {string}\n   * @default '<li class=\"js-drilldown-back\"><a tabindex=\"0\">Back</a></li>'\n   */\n  backButton: '<li class=\"js-drilldown-back\"><a tabindex=\"0\">Back</a></li>',\n  /**\n   * Position the back button either at the top or bottom of drilldown submenus. Can be `'left'` or `'bottom'`.\n   * @option\n   * @type {string}\n   * @default top\n   */\n  backButtonPosition: 'top',\n  /**\n   * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\\`) if copy and pasting.\n   * @option\n   * @type {string}\n   * @default '<div></div>'\n   */\n  wrapper: '<div></div>',\n  /**\n   * Adds the parent link to the submenu.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  parentLink: false,\n  /**\n   * Allow the menu to return to root list on body click.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  closeOnClick: false,\n  /**\n   * Allow the menu to auto adjust height.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  autoHeight: false,\n  /**\n   * Animate the auto adjust height.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  animateHeight: false,\n  /**\n   * Scroll to the top of the menu after opening a submenu or navigating back using the menu back button\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  scrollTop: false,\n  /**\n   * String jquery selector (for example 'body') of element to take offset().top from, if empty string the drilldown menu offset().top is taken\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  scrollTopElement: '',\n  /**\n   * ScrollTop offset\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  scrollTopOffset: 0,\n  /**\n   * Scroll animation duration\n   * @option\n   * @type {number}\n   * @default 500\n   */\n  animationDuration: 500,\n  /**\n   * Scroll animation easing. Can be `'swing'` or `'linear'`.\n   * @option\n   * @type {string}\n   * @see {@link https://api.jquery.com/animate|JQuery animate}\n   * @default 'swing'\n   */\n  animationEasing: 'swing'\n  // holdOpen: false\n};\n\nexport {Drilldown};\n","'use strict';\n\nimport $ from 'jquery';\nimport { Keyboard } from './foundation.util.keyboard';\nimport { GetYoDigits } from './foundation.util.core';\nimport { Positionable } from './foundation.positionable';\n\nimport { Triggers } from './foundation.util.triggers';\n\n\n/**\n * Dropdown module.\n * @module foundation.dropdown\n * @requires foundation.util.keyboard\n * @requires foundation.util.box\n * @requires foundation.util.triggers\n */\nclass Dropdown extends Positionable {\n  /**\n   * Creates a new instance of a dropdown.\n   * @class\n   * @name Dropdown\n   * @param {jQuery} element - jQuery object to make into a dropdown.\n   *        Object should be of the dropdown panel, rather than its anchor.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Dropdown.defaults, this.$element.data(), options);\n    this.className = 'Dropdown'; // ie9 back compat\n\n    // Triggers init is idempotent, just need to make sure it is initialized\n    Triggers.init($);\n\n    this._init();\n\n    Keyboard.register('Dropdown', {\n      'ENTER': 'open',\n      'SPACE': 'open',\n      'ESCAPE': 'close'\n    });\n  }\n\n  /**\n   * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.\n   * @function\n   * @private\n   */\n  _init() {\n    var $id = this.$element.attr('id');\n\n    this.$anchors = $(`[data-toggle=\"${$id}\"]`).length ? $(`[data-toggle=\"${$id}\"]`) : $(`[data-open=\"${$id}\"]`);\n    this.$anchors.attr({\n      'aria-controls': $id,\n      'data-is-focus': false,\n      'data-yeti-box': $id,\n      'aria-haspopup': true,\n      'aria-expanded': false\n    });\n\n    this._setCurrentAnchor(this.$anchors.first());\n\n    if(this.options.parentClass){\n      this.$parent = this.$element.parents('.' + this.options.parentClass);\n    }else{\n      this.$parent = null;\n    }\n\n    this.$element.attr({\n      'aria-hidden': 'true',\n      'data-yeti-box': $id,\n      'data-resize': $id,\n      'aria-labelledby': this.$currentAnchor.id || GetYoDigits(6, 'dd-anchor')\n    });\n    super._init();\n    this._events();\n  }\n\n  _getDefaultPosition() {\n    // handle legacy classnames\n    var position = this.$element[0].className.match(/(top|left|right|bottom)/g);\n    if(position) {\n      return position[0];\n    } else {\n      return 'bottom'\n    }\n  }\n\n  _getDefaultAlignment() {\n    // handle legacy float approach\n    var horizontalPosition = /float-(\\S+)/.exec(this.$currentAnchor.className);\n    if(horizontalPosition) {\n      return horizontalPosition[1];\n    }\n\n    return super._getDefaultAlignment();\n  }\n\n\n\n  /**\n   * Sets the position and orientation of the dropdown pane, checks for collisions if allow-overlap is not true.\n   * Recursively calls itself if a collision is detected, with a new position class.\n   * @function\n   * @private\n   */\n  _setPosition() {\n    this.$element.removeClass(`has-position-${this.position} has-alignment-${this.alignment}`);\n    super._setPosition(this.$currentAnchor, this.$element, this.$parent);\n    this.$element.addClass(`has-position-${this.position} has-alignment-${this.alignment}`);\n  }\n\n  /**\n   * Make it a current anchor.\n   * Current anchor as the reference for the position of Dropdown panes.\n   * @param {HTML} el - DOM element of the anchor.\n   * @function\n   * @private\n   */\n  _setCurrentAnchor(el) {\n    this.$currentAnchor = $(el);\n  }\n\n  /**\n   * Adds event listeners to the element utilizing the triggers utility library.\n   * @function\n   * @private\n   */\n  _events() {\n    var _this = this;\n    this.$element.on({\n      'open.zf.trigger': this.open.bind(this),\n      'close.zf.trigger': this.close.bind(this),\n      'toggle.zf.trigger': this.toggle.bind(this),\n      'resizeme.zf.trigger': this._setPosition.bind(this)\n    });\n\n    this.$anchors.off('click.zf.trigger')\n      .on('click.zf.trigger', function() { _this._setCurrentAnchor(this); });\n\n    if(this.options.hover){\n      this.$anchors.off('mouseenter.zf.dropdown mouseleave.zf.dropdown')\n      .on('mouseenter.zf.dropdown', function(){\n        _this._setCurrentAnchor(this);\n\n        var bodyData = $('body').data();\n        if(typeof(bodyData.whatinput) === 'undefined' || bodyData.whatinput === 'mouse') {\n          clearTimeout(_this.timeout);\n          _this.timeout = setTimeout(function(){\n            _this.open();\n            _this.$anchors.data('hover', true);\n          }, _this.options.hoverDelay);\n        }\n      }).on('mouseleave.zf.dropdown', function(){\n        clearTimeout(_this.timeout);\n        _this.timeout = setTimeout(function(){\n          _this.close();\n          _this.$anchors.data('hover', false);\n        }, _this.options.hoverDelay);\n      });\n      if(this.options.hoverPane){\n        this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown')\n            .on('mouseenter.zf.dropdown', function(){\n              clearTimeout(_this.timeout);\n            }).on('mouseleave.zf.dropdown', function(){\n              clearTimeout(_this.timeout);\n              _this.timeout = setTimeout(function(){\n                _this.close();\n                _this.$anchors.data('hover', false);\n              }, _this.options.hoverDelay);\n            });\n      }\n    }\n    this.$anchors.add(this.$element).on('keydown.zf.dropdown', function(e) {\n\n      var $target = $(this),\n        visibleFocusableElements = Keyboard.findFocusable(_this.$element);\n\n      Keyboard.handleKey(e, 'Dropdown', {\n        open: function() {\n          if ($target.is(_this.$anchors)) {\n            _this.open();\n            _this.$element.attr('tabindex', -1).focus();\n            e.preventDefault();\n          }\n        },\n        close: function() {\n          _this.close();\n          _this.$anchors.focus();\n        }\n      });\n    });\n  }\n\n  /**\n   * Adds an event handler to the body to close any dropdowns on a click.\n   * @function\n   * @private\n   */\n  _addBodyHandler() {\n     var $body = $(document.body).not(this.$element),\n         _this = this;\n     $body.off('click.zf.dropdown')\n          .on('click.zf.dropdown', function(e){\n            if(_this.$anchors.is(e.target) || _this.$anchors.find(e.target).length) {\n              return;\n            }\n            if(_this.$element.is(e.target) || _this.$element.find(e.target).length) {\n              return;\n            }\n            _this.close();\n            $body.off('click.zf.dropdown');\n          });\n  }\n\n  /**\n   * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.\n   * @function\n   * @fires Dropdown#closeme\n   * @fires Dropdown#show\n   */\n  open() {\n    // var _this = this;\n    /**\n     * Fires to close other open dropdowns, typically when dropdown is opening\n     * @event Dropdown#closeme\n     */\n    this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));\n    this.$anchors.addClass('hover')\n        .attr({'aria-expanded': true});\n    // this.$element/*.show()*/;\n\n    this.$element.addClass('is-opening');\n    this._setPosition();\n    this.$element.removeClass('is-opening').addClass('is-open')\n        .attr({'aria-hidden': false});\n\n    if(this.options.autoFocus){\n      var $focusable = Keyboard.findFocusable(this.$element);\n      if($focusable.length){\n        $focusable.eq(0).focus();\n      }\n    }\n\n    if(this.options.closeOnClick){ this._addBodyHandler(); }\n\n    if (this.options.trapFocus) {\n      Keyboard.trapFocus(this.$element);\n    }\n\n    /**\n     * Fires once the dropdown is visible.\n     * @event Dropdown#show\n     */\n    this.$element.trigger('show.zf.dropdown', [this.$element]);\n  }\n\n  /**\n   * Closes the open dropdown pane.\n   * @function\n   * @fires Dropdown#hide\n   */\n  close() {\n    if(!this.$element.hasClass('is-open')){\n      return false;\n    }\n    this.$element.removeClass('is-open')\n        .attr({'aria-hidden': true});\n\n    this.$anchors.removeClass('hover')\n        .attr('aria-expanded', false);\n\n    /**\n     * Fires once the dropdown is no longer visible.\n     * @event Dropdown#hide\n     */\n    this.$element.trigger('hide.zf.dropdown', [this.$element]);\n\n    if (this.options.trapFocus) {\n      Keyboard.releaseFocus(this.$element);\n    }\n  }\n\n  /**\n   * Toggles the dropdown pane's visibility.\n   * @function\n   */\n  toggle() {\n    if(this.$element.hasClass('is-open')){\n      if(this.$anchors.data('hover')) return;\n      this.close();\n    }else{\n      this.open();\n    }\n  }\n\n  /**\n   * Destroys the dropdown.\n   * @function\n   */\n  _destroy() {\n    this.$element.off('.zf.trigger').hide();\n    this.$anchors.off('.zf.dropdown');\n    $(document.body).off('click.zf.dropdown');\n\n  }\n}\n\nDropdown.defaults = {\n  /**\n   * Class that designates bounding container of Dropdown (default: window)\n   * @option\n   * @type {?string}\n   * @default null\n   */\n  parentClass: null,\n  /**\n   * Amount of time to delay opening a submenu on hover event.\n   * @option\n   * @type {number}\n   * @default 250\n   */\n  hoverDelay: 250,\n  /**\n   * Allow submenus to open on hover events\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  hover: false,\n  /**\n   * Don't close dropdown when hovering over dropdown pane\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  hoverPane: false,\n  /**\n   * Number of pixels between the dropdown pane and the triggering element on open.\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  vOffset: 0,\n  /**\n   * Number of pixels between the dropdown pane and the triggering element on open.\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  hOffset: 0,\n  /**\n   * DEPRECATED: Class applied to adjust open position.\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  positionClass: '',\n\n  /**\n   * Position of dropdown. Can be left, right, bottom, top, or auto.\n   * @option\n   * @type {string}\n   * @default 'auto'\n   */\n  position: 'auto',\n  /**\n   * Alignment of dropdown relative to anchor. Can be left, right, bottom, top, center, or auto.\n   * @option\n   * @type {string}\n   * @default 'auto'\n   */\n  alignment: 'auto',\n  /**\n   * Allow overlap of container/window. If false, dropdown will first try to position as defined by data-position and data-alignment, but reposition if it would cause an overflow.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  allowOverlap: false,\n  /**\n   * Allow overlap of only the bottom of the container. This is the most common\n   * behavior for dropdowns, allowing the dropdown to extend the bottom of the\n   * screen but not otherwise influence or break out of the container.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  allowBottomOverlap: true,\n  /**\n   * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  trapFocus: false,\n  /**\n   * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  autoFocus: false,\n  /**\n   * Allows a click on the body to close the dropdown.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  closeOnClick: false\n}\n\nexport {Dropdown};\n","'use strict';\n\nimport $ from 'jquery';\nimport { Keyboard } from './foundation.util.keyboard';\nimport { Nest } from './foundation.util.nest';\nimport { Box } from './foundation.util.box';\nimport { rtl as Rtl } from './foundation.util.core';\nimport { Plugin } from './foundation.plugin';\n\n\n/**\n * DropdownMenu module.\n * @module foundation.dropdown-menu\n * @requires foundation.util.keyboard\n * @requires foundation.util.box\n * @requires foundation.util.nest\n */\n\nclass DropdownMenu extends Plugin {\n  /**\n   * Creates a new instance of DropdownMenu.\n   * @class\n   * @name DropdownMenu\n   * @fires DropdownMenu#init\n   * @param {jQuery} element - jQuery object to make into a dropdown menu.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, DropdownMenu.defaults, this.$element.data(), options);\n    this.className = 'DropdownMenu'; // ie9 back compat\n\n    this._init();\n\n    Keyboard.register('DropdownMenu', {\n      'ENTER': 'open',\n      'SPACE': 'open',\n      'ARROW_RIGHT': 'next',\n      'ARROW_UP': 'up',\n      'ARROW_DOWN': 'down',\n      'ARROW_LEFT': 'previous',\n      'ESCAPE': 'close'\n    });\n  }\n\n  /**\n   * Initializes the plugin, and calls _prepareMenu\n   * @private\n   * @function\n   */\n  _init() {\n    Nest.Feather(this.$element, 'dropdown');\n\n    var subs = this.$element.find('li.is-dropdown-submenu-parent');\n    this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');\n\n    this.$menuItems = this.$element.find('[role=\"menuitem\"]');\n    this.$tabs = this.$element.children('[role=\"menuitem\"]');\n    this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);\n\n    if (this.options.alignment === 'auto') {\n        if (this.$element.hasClass(this.options.rightClass) || Rtl() || this.$element.parents('.top-bar-right').is('*')) {\n            this.options.alignment = 'right';\n            subs.addClass('opens-left');\n        } else {\n            this.options.alignment = 'left';\n            subs.addClass('opens-right');\n        }\n    } else {\n      if (this.options.alignment === 'right') {\n          subs.addClass('opens-left');\n      } else {\n          subs.addClass('opens-right');\n      }\n    }\n    this.changed = false;\n    this._events();\n  };\n\n  _isVertical() {\n    return this.$tabs.css('display') === 'block' || this.$element.css('flex-direction') === 'column';\n  }\n\n  _isRtl() {\n    return this.$element.hasClass('align-right') || (Rtl() && !this.$element.hasClass('align-left'));\n  }\n\n  /**\n   * Adds event listeners to elements within the menu\n   * @private\n   * @function\n   */\n  _events() {\n    var _this = this,\n        hasTouch = 'ontouchstart' in window || (typeof window.ontouchstart !== 'undefined'),\n        parClass = 'is-dropdown-submenu-parent';\n\n    // used for onClick and in the keyboard handlers\n    var handleClickFn = function(e) {\n      var $elem = $(e.target).parentsUntil('ul', `.${parClass}`),\n          hasSub = $elem.hasClass(parClass),\n          hasClicked = $elem.attr('data-is-click') === 'true',\n          $sub = $elem.children('.is-dropdown-submenu');\n\n      if (hasSub) {\n        if (hasClicked) {\n          if (!_this.options.closeOnClick || (!_this.options.clickOpen && !hasTouch) || (_this.options.forceFollow && hasTouch)) { return; }\n          else {\n            e.stopImmediatePropagation();\n            e.preventDefault();\n            _this._hide($elem);\n          }\n        } else {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          _this._show($sub);\n          $elem.add($elem.parentsUntil(_this.$element, `.${parClass}`)).attr('data-is-click', true);\n        }\n      }\n    };\n\n    if (this.options.clickOpen || hasTouch) {\n      this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);\n    }\n\n    // Handle Leaf element Clicks\n    if(_this.options.closeOnClickInside){\n      this.$menuItems.on('click.zf.dropdownmenu', function(e) {\n        var $elem = $(this),\n            hasSub = $elem.hasClass(parClass);\n        if(!hasSub){\n          _this._hide();\n        }\n      });\n    }\n\n    if (!this.options.disableHover) {\n      this.$menuItems.on('mouseenter.zf.dropdownmenu', function(e) {\n        var $elem = $(this),\n            hasSub = $elem.hasClass(parClass);\n\n        if (hasSub) {\n          clearTimeout($elem.data('_delay'));\n          $elem.data('_delay', setTimeout(function() {\n            _this._show($elem.children('.is-dropdown-submenu'));\n          }, _this.options.hoverDelay));\n        }\n      }).on('mouseleave.zf.dropdownmenu', function(e) {\n        var $elem = $(this),\n            hasSub = $elem.hasClass(parClass);\n        if (hasSub && _this.options.autoclose) {\n          if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) { return false; }\n\n          clearTimeout($elem.data('_delay'));\n          $elem.data('_delay', setTimeout(function() {\n            _this._hide($elem);\n          }, _this.options.closingTime));\n        }\n      });\n    }\n    this.$menuItems.on('keydown.zf.dropdownmenu', function(e) {\n      var $element = $(e.target).parentsUntil('ul', '[role=\"menuitem\"]'),\n          isTab = _this.$tabs.index($element) > -1,\n          $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),\n          $prevElement,\n          $nextElement;\n\n      $elements.each(function(i) {\n        if ($(this).is($element)) {\n          $prevElement = $elements.eq(i-1);\n          $nextElement = $elements.eq(i+1);\n          return;\n        }\n      });\n\n      var nextSibling = function() {\n        $nextElement.children('a:first').focus();\n        e.preventDefault();\n      }, prevSibling = function() {\n        $prevElement.children('a:first').focus();\n        e.preventDefault();\n      }, openSub = function() {\n        var $sub = $element.children('ul.is-dropdown-submenu');\n        if ($sub.length) {\n          _this._show($sub);\n          $element.find('li > a:first').focus();\n          e.preventDefault();\n        } else { return; }\n      }, closeSub = function() {\n        //if ($element.is(':first-child')) {\n        var close = $element.parent('ul').parent('li');\n        close.children('a:first').focus();\n        _this._hide(close);\n        e.preventDefault();\n        //}\n      };\n      var functions = {\n        open: openSub,\n        close: function() {\n          _this._hide(_this.$element);\n          _this.$menuItems.eq(0).children('a').focus(); // focus to first element\n          e.preventDefault();\n        },\n        handled: function() {\n          e.stopImmediatePropagation();\n        }\n      };\n\n      if (isTab) {\n        if (_this._isVertical()) { // vertical menu\n          if (_this._isRtl()) { // right aligned\n            $.extend(functions, {\n              down: nextSibling,\n              up: prevSibling,\n              next: closeSub,\n              previous: openSub\n            });\n          } else { // left aligned\n            $.extend(functions, {\n              down: nextSibling,\n              up: prevSibling,\n              next: openSub,\n              previous: closeSub\n            });\n          }\n        } else { // horizontal menu\n          if (_this._isRtl()) { // right aligned\n            $.extend(functions, {\n              next: prevSibling,\n              previous: nextSibling,\n              down: openSub,\n              up: closeSub\n            });\n          } else { // left aligned\n            $.extend(functions, {\n              next: nextSibling,\n              previous: prevSibling,\n              down: openSub,\n              up: closeSub\n            });\n          }\n        }\n      } else { // not tabs -> one sub\n        if (_this._isRtl()) { // right aligned\n          $.extend(functions, {\n            next: closeSub,\n            previous: openSub,\n            down: nextSibling,\n            up: prevSibling\n          });\n        } else { // left aligned\n          $.extend(functions, {\n            next: openSub,\n            previous: closeSub,\n            down: nextSibling,\n            up: prevSibling\n          });\n        }\n      }\n      Keyboard.handleKey(e, 'DropdownMenu', functions);\n\n    });\n  }\n\n  /**\n   * Adds an event handler to the body to close any dropdowns on a click.\n   * @function\n   * @private\n   */\n  _addBodyHandler() {\n    var $body = $(document.body),\n        _this = this;\n    $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu')\n         .on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function(e) {\n           var $link = _this.$element.find(e.target);\n           if ($link.length) { return; }\n\n           _this._hide();\n           $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');\n         });\n  }\n\n  /**\n   * Opens a dropdown pane, and checks for collisions first.\n   * @param {jQuery} $sub - ul element that is a submenu to show\n   * @function\n   * @private\n   * @fires DropdownMenu#show\n   */\n  _show($sub) {\n    var idx = this.$tabs.index(this.$tabs.filter(function(i, el) {\n      return $(el).find($sub).length > 0;\n    }));\n    var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');\n    this._hide($sibs, idx);\n    $sub.css('visibility', 'hidden').addClass('js-dropdown-active')\n        .parent('li.is-dropdown-submenu-parent').addClass('is-active');\n    var clear = Box.ImNotTouchingYou($sub, null, true);\n    if (!clear) {\n      var oldClass = this.options.alignment === 'left' ? '-right' : '-left',\n          $parentLi = $sub.parent('.is-dropdown-submenu-parent');\n      $parentLi.removeClass(`opens${oldClass}`).addClass(`opens-${this.options.alignment}`);\n      clear = Box.ImNotTouchingYou($sub, null, true);\n      if (!clear) {\n        $parentLi.removeClass(`opens-${this.options.alignment}`).addClass('opens-inner');\n      }\n      this.changed = true;\n    }\n    $sub.css('visibility', '');\n    if (this.options.closeOnClick) { this._addBodyHandler(); }\n    /**\n     * Fires when the new dropdown pane is visible.\n     * @event DropdownMenu#show\n     */\n    this.$element.trigger('show.zf.dropdownmenu', [$sub]);\n  }\n\n  /**\n   * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.\n   * @function\n   * @param {jQuery} $elem - element with a submenu to hide\n   * @param {Number} idx - index of the $tabs collection to hide\n   * @private\n   */\n  _hide($elem, idx) {\n    var $toClose;\n    if ($elem && $elem.length) {\n      $toClose = $elem;\n    } else if (idx !== undefined) {\n      $toClose = this.$tabs.not(function(i, el) {\n        return i === idx;\n      });\n    }\n    else {\n      $toClose = this.$element;\n    }\n    var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;\n\n    if (somethingToClose) {\n      $toClose.find('li.is-active').add($toClose).attr({\n        'data-is-click': false\n      }).removeClass('is-active');\n\n      $toClose.find('ul.js-dropdown-active').removeClass('js-dropdown-active');\n\n      if (this.changed || $toClose.find('opens-inner').length) {\n        var oldClass = this.options.alignment === 'left' ? 'right' : 'left';\n        $toClose.find('li.is-dropdown-submenu-parent').add($toClose)\n                .removeClass(`opens-inner opens-${this.options.alignment}`)\n                .addClass(`opens-${oldClass}`);\n        this.changed = false;\n      }\n      /**\n       * Fires when the open menus are closed.\n       * @event DropdownMenu#hide\n       */\n      this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);\n    }\n  }\n\n  /**\n   * Destroys the plugin.\n   * @function\n   */\n  _destroy() {\n    this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click')\n        .removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');\n    $(document.body).off('.zf.dropdownmenu');\n    Nest.Burn(this.$element, 'dropdown');\n  }\n}\n\n/**\n * Default settings for plugin\n */\nDropdownMenu.defaults = {\n  /**\n   * Disallows hover events from opening submenus\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  disableHover: false,\n  /**\n   * Allow a submenu to automatically close on a mouseleave event, if not clicked open.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  autoclose: true,\n  /**\n   * Amount of time to delay opening a submenu on hover event.\n   * @option\n   * @type {number}\n   * @default 50\n   */\n  hoverDelay: 50,\n  /**\n   * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  clickOpen: false,\n  /**\n   * Amount of time to delay closing a submenu on a mouseleave event.\n   * @option\n   * @type {number}\n   * @default 500\n   */\n\n  closingTime: 500,\n  /**\n   * Position of the menu relative to what direction the submenus should open. Handled by JS. Can be `'auto'`, `'left'` or `'right'`.\n   * @option\n   * @type {string}\n   * @default 'auto'\n   */\n  alignment: 'auto',\n  /**\n   * Allow clicks on the body to close any open submenus.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  closeOnClick: true,\n  /**\n   * Allow clicks on leaf anchor links to close any open submenus.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  closeOnClickInside: true,\n  /**\n   * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.\n   * @option\n   * @type {string}\n   * @default 'vertical'\n   */\n  verticalClass: 'vertical',\n  /**\n   * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.\n   * @option\n   * @type {string}\n   * @default 'align-right'\n   */\n  rightClass: 'align-right',\n  /**\n   * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  forceFollow: true\n};\n\nexport {DropdownMenu};\n","'use strict';\n\nimport $ from 'jquery';\nimport { MediaQuery } from './foundation.util.mediaQuery';\nimport { onImagesLoaded } from './foundation.util.imageLoader';\nimport { GetYoDigits } from './foundation.util.core';\nimport { Plugin } from './foundation.plugin';\n\n/**\n * Equalizer module.\n * @module foundation.equalizer\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.imageLoader if equalizer contains images\n */\n\nclass Equalizer extends Plugin {\n  /**\n   * Creates a new instance of Equalizer.\n   * @class\n   * @name Equalizer\n   * @fires Equalizer#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options){\n    this.$element = element;\n    this.options  = $.extend({}, Equalizer.defaults, this.$element.data(), options);\n    this.className = 'Equalizer'; // ie9 back compat\n\n    this._init();\n  }\n\n  /**\n   * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.\n   * @private\n   */\n  _init() {\n    var eqId = this.$element.attr('data-equalizer') || '';\n    var $watched = this.$element.find(`[data-equalizer-watch=\"${eqId}\"]`);\n\n    MediaQuery._init();\n\n    this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');\n    this.$element.attr('data-resize', (eqId || GetYoDigits(6, 'eq')));\n    this.$element.attr('data-mutate', (eqId || GetYoDigits(6, 'eq')));\n\n    this.hasNested = this.$element.find('[data-equalizer]').length > 0;\n    this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;\n    this.isOn = false;\n    this._bindHandler = {\n      onResizeMeBound: this._onResizeMe.bind(this),\n      onPostEqualizedBound: this._onPostEqualized.bind(this)\n    };\n\n    var imgs = this.$element.find('img');\n    var tooSmall;\n    if(this.options.equalizeOn){\n      tooSmall = this._checkMQ();\n      $(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));\n    }else{\n      this._events();\n    }\n    if((tooSmall !== undefined && tooSmall === false) || tooSmall === undefined){\n      if(imgs.length){\n        onImagesLoaded(imgs, this._reflow.bind(this));\n      }else{\n        this._reflow();\n      }\n    }\n  }\n\n  /**\n   * Removes event listeners if the breakpoint is too small.\n   * @private\n   */\n  _pauseEvents() {\n    this.isOn = false;\n    this.$element.off({\n      '.zf.equalizer': this._bindHandler.onPostEqualizedBound,\n      'resizeme.zf.trigger': this._bindHandler.onResizeMeBound,\n\t  'mutateme.zf.trigger': this._bindHandler.onResizeMeBound\n    });\n  }\n\n  /**\n   * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound\n   * @private\n   */\n  _onResizeMe(e) {\n    this._reflow();\n  }\n\n  /**\n   * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound\n   * @private\n   */\n  _onPostEqualized(e) {\n    if(e.target !== this.$element[0]){ this._reflow(); }\n  }\n\n  /**\n   * Initializes events for Equalizer.\n   * @private\n   */\n  _events() {\n    var _this = this;\n    this._pauseEvents();\n    if(this.hasNested){\n      this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);\n    }else{\n      this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);\n\t  this.$element.on('mutateme.zf.trigger', this._bindHandler.onResizeMeBound);\n    }\n    this.isOn = true;\n  }\n\n  /**\n   * Checks the current breakpoint to the minimum required size.\n   * @private\n   */\n  _checkMQ() {\n    var tooSmall = !MediaQuery.is(this.options.equalizeOn);\n    if(tooSmall){\n      if(this.isOn){\n        this._pauseEvents();\n        this.$watched.css('height', 'auto');\n      }\n    }else{\n      if(!this.isOn){\n        this._events();\n      }\n    }\n    return tooSmall;\n  }\n\n  /**\n   * A noop version for the plugin\n   * @private\n   */\n  _killswitch() {\n    return;\n  }\n\n  /**\n   * Calls necessary functions to update Equalizer upon DOM change\n   * @private\n   */\n  _reflow() {\n    if(!this.options.equalizeOnStack){\n      if(this._isStacked()){\n        this.$watched.css('height', 'auto');\n        return false;\n      }\n    }\n    if (this.options.equalizeByRow) {\n      this.getHeightsByRow(this.applyHeightByRow.bind(this));\n    }else{\n      this.getHeights(this.applyHeight.bind(this));\n    }\n  }\n\n  /**\n   * Manually determines if the first 2 elements are *NOT* stacked.\n   * @private\n   */\n  _isStacked() {\n    if (!this.$watched[0] || !this.$watched[1]) {\n      return true;\n    }\n    return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;\n  }\n\n  /**\n   * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n   * @param {Function} cb - A non-optional callback to return the heights array to.\n   * @returns {Array} heights - An array of heights of children within Equalizer container\n   */\n  getHeights(cb) {\n    var heights = [];\n    for(var i = 0, len = this.$watched.length; i < len; i++){\n      this.$watched[i].style.height = 'auto';\n      heights.push(this.$watched[i].offsetHeight);\n    }\n    cb(heights);\n  }\n\n  /**\n   * Finds the outer heights of children contained within an Equalizer parent and returns them in an array\n   * @param {Function} cb - A non-optional callback to return the heights array to.\n   * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n   */\n  getHeightsByRow(cb) {\n    var lastElTopOffset = (this.$watched.length ? this.$watched.first().offset().top : 0),\n        groups = [],\n        group = 0;\n    //group by Row\n    groups[group] = [];\n    for(var i = 0, len = this.$watched.length; i < len; i++){\n      this.$watched[i].style.height = 'auto';\n      //maybe could use this.$watched[i].offsetTop\n      var elOffsetTop = $(this.$watched[i]).offset().top;\n      if (elOffsetTop!=lastElTopOffset) {\n        group++;\n        groups[group] = [];\n        lastElTopOffset=elOffsetTop;\n      }\n      groups[group].push([this.$watched[i],this.$watched[i].offsetHeight]);\n    }\n\n    for (var j = 0, ln = groups.length; j < ln; j++) {\n      var heights = $(groups[j]).map(function(){ return this[1]; }).get();\n      var max         = Math.max.apply(null, heights);\n      groups[j].push(max);\n    }\n    cb(groups);\n  }\n\n  /**\n   * Changes the CSS height property of each child in an Equalizer parent to match the tallest\n   * @param {array} heights - An array of heights of children within Equalizer container\n   * @fires Equalizer#preequalized\n   * @fires Equalizer#postequalized\n   */\n  applyHeight(heights) {\n    var max = Math.max.apply(null, heights);\n    /**\n     * Fires before the heights are applied\n     * @event Equalizer#preequalized\n     */\n    this.$element.trigger('preequalized.zf.equalizer');\n\n    this.$watched.css('height', max);\n\n    /**\n     * Fires when the heights have been applied\n     * @event Equalizer#postequalized\n     */\n     this.$element.trigger('postequalized.zf.equalizer');\n  }\n\n  /**\n   * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row\n   * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child\n   * @fires Equalizer#preequalized\n   * @fires Equalizer#preequalizedrow\n   * @fires Equalizer#postequalizedrow\n   * @fires Equalizer#postequalized\n   */\n  applyHeightByRow(groups) {\n    /**\n     * Fires before the heights are applied\n     */\n    this.$element.trigger('preequalized.zf.equalizer');\n    for (var i = 0, len = groups.length; i < len ; i++) {\n      var groupsILength = groups[i].length,\n          max = groups[i][groupsILength - 1];\n      if (groupsILength<=2) {\n        $(groups[i][0][0]).css({'height':'auto'});\n        continue;\n      }\n      /**\n        * Fires before the heights per row are applied\n        * @event Equalizer#preequalizedrow\n        */\n      this.$element.trigger('preequalizedrow.zf.equalizer');\n      for (var j = 0, lenJ = (groupsILength-1); j < lenJ ; j++) {\n        $(groups[i][j][0]).css({'height':max});\n      }\n      /**\n        * Fires when the heights per row have been applied\n        * @event Equalizer#postequalizedrow\n        */\n      this.$element.trigger('postequalizedrow.zf.equalizer');\n    }\n    /**\n     * Fires when the heights have been applied\n     */\n     this.$element.trigger('postequalized.zf.equalizer');\n  }\n\n  /**\n   * Destroys an instance of Equalizer.\n   * @function\n   */\n  _destroy() {\n    this._pauseEvents();\n    this.$watched.css('height', 'auto');\n  }\n}\n\n/**\n * Default settings for plugin\n */\nEqualizer.defaults = {\n  /**\n   * Enable height equalization when stacked on smaller screens.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  equalizeOnStack: false,\n  /**\n   * Enable height equalization row by row.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  equalizeByRow: false,\n  /**\n   * String representing the minimum breakpoint size the plugin should equalize heights on.\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  equalizeOn: ''\n};\n\nexport {Equalizer};\n","'use strict';\n\nimport $ from 'jquery';\nimport { MediaQuery } from './foundation.util.mediaQuery';\nimport { Plugin } from './foundation.plugin';\nimport { GetYoDigits } from './foundation.util.core';\n\n\n/**\n * Interchange module.\n * @module foundation.interchange\n * @requires foundation.util.mediaQuery\n */\n\nclass Interchange extends Plugin {\n  /**\n   * Creates a new instance of Interchange.\n   * @class\n   * @name Interchange\n   * @fires Interchange#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Interchange.defaults, options);\n    this.rules = [];\n    this.currentPath = '';\n    this.className = 'Interchange'; // ie9 back compat\n\n    this._init();\n    this._events();\n  }\n\n  /**\n   * Initializes the Interchange plugin and calls functions to get interchange functioning on load.\n   * @function\n   * @private\n   */\n  _init() {\n    MediaQuery._init();\n\n    var id = this.$element[0].id || GetYoDigits(6, 'interchange');\n    this.$element.attr({\n      'data-resize': id,\n      'id': id\n    });\n\n    this._addBreakpoints();\n    this._generateRules();\n    this._reflow();\n  }\n\n  /**\n   * Initializes events for Interchange.\n   * @function\n   * @private\n   */\n  _events() {\n    this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', () => this._reflow());\n  }\n\n  /**\n   * Calls necessary functions to update Interchange upon DOM change\n   * @function\n   * @private\n   */\n  _reflow() {\n    var match;\n\n    // Iterate through each rule, but only save the last match\n    for (var i in this.rules) {\n      if(this.rules.hasOwnProperty(i)) {\n        var rule = this.rules[i];\n        if (window.matchMedia(rule.query).matches) {\n          match = rule;\n        }\n      }\n    }\n\n    if (match) {\n      this.replace(match.path);\n    }\n  }\n\n  /**\n   * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.\n   * @function\n   * @private\n   */\n  _addBreakpoints() {\n    for (var i in MediaQuery.queries) {\n      if (MediaQuery.queries.hasOwnProperty(i)) {\n        var query = MediaQuery.queries[i];\n        Interchange.SPECIAL_QUERIES[query.name] = query.value;\n      }\n    }\n  }\n\n  /**\n   * Checks the Interchange element for the provided media query + content pairings\n   * @function\n   * @private\n   * @param {Object} element - jQuery object that is an Interchange instance\n   * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys\n   */\n  _generateRules(element) {\n    var rulesList = [];\n    var rules;\n\n    if (this.options.rules) {\n      rules = this.options.rules;\n    }\n    else {\n      rules = this.$element.data('interchange');\n    }\n\n    rules =  typeof rules === 'string' ? rules.match(/\\[.*?\\]/g) : rules;\n\n    for (var i in rules) {\n      if(rules.hasOwnProperty(i)) {\n        var rule = rules[i].slice(1, -1).split(', ');\n        var path = rule.slice(0, -1).join('');\n        var query = rule[rule.length - 1];\n\n        if (Interchange.SPECIAL_QUERIES[query]) {\n          query = Interchange.SPECIAL_QUERIES[query];\n        }\n\n        rulesList.push({\n          path: path,\n          query: query\n        });\n      }\n    }\n\n    this.rules = rulesList;\n  }\n\n  /**\n   * Update the `src` property of an image, or change the HTML of a container, to the specified path.\n   * @function\n   * @param {String} path - Path to the image or HTML partial.\n   * @fires Interchange#replaced\n   */\n  replace(path) {\n    if (this.currentPath === path) return;\n\n    var _this = this,\n        trigger = 'replaced.zf.interchange';\n\n    // Replacing images\n    if (this.$element[0].nodeName === 'IMG') {\n      this.$element.attr('src', path).on('load', function() {\n        _this.currentPath = path;\n      })\n      .trigger(trigger);\n    }\n    // Replacing background images\n    else if (path.match(/\\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {\n      path = path.replace(/\\(/g, '%28').replace(/\\)/g, '%29');\n      this.$element.css({ 'background-image': 'url('+path+')' })\n          .trigger(trigger);\n    }\n    // Replacing HTML\n    else {\n      $.get(path, function(response) {\n        _this.$element.html(response)\n             .trigger(trigger);\n        $(response).foundation();\n        _this.currentPath = path;\n      });\n    }\n\n    /**\n     * Fires when content in an Interchange element is done being loaded.\n     * @event Interchange#replaced\n     */\n    // this.$element.trigger('replaced.zf.interchange');\n  }\n\n  /**\n   * Destroys an instance of interchange.\n   * @function\n   */\n  _destroy() {\n    this.$element.off('resizeme.zf.trigger')\n  }\n}\n\n/**\n * Default settings for plugin\n */\nInterchange.defaults = {\n  /**\n   * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.\n   * @option\n   * @type {?array}\n   * @default null\n   */\n  rules: null\n};\n\nInterchange.SPECIAL_QUERIES = {\n  'landscape': 'screen and (orientation: landscape)',\n  'portrait': 'screen and (orientation: portrait)',\n  'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'\n};\n\nexport {Interchange};\n","'use strict';\n\n\nimport $ from 'jquery';\nimport { GetYoDigits } from './foundation.util.core';\nimport { Plugin } from './foundation.plugin';\nimport { SmoothScroll } from './foundation.smoothScroll';\n\n/**\n * Magellan module.\n * @module foundation.magellan\n * @requires foundation.smoothScroll\n */\n\nclass Magellan extends Plugin {\n  /**\n   * Creates a new instance of Magellan.\n   * @class\n   * @name Magellan\n   * @fires Magellan#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options  = $.extend({}, Magellan.defaults, this.$element.data(), options);\n    this.className = 'Magellan'; // ie9 back compat\n\n    this._init();\n    this.calcPoints();\n  }\n\n  /**\n   * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.\n   * @private\n   */\n  _init() {\n    var id = this.$element[0].id || GetYoDigits(6, 'magellan');\n    var _this = this;\n    this.$targets = $('[data-magellan-target]');\n    this.$links = this.$element.find('a');\n    this.$element.attr({\n      'data-resize': id,\n      'data-scroll': id,\n      'id': id\n    });\n    this.$active = $();\n    this.scrollPos = parseInt(window.pageYOffset, 10);\n\n    this._events();\n  }\n\n  /**\n   * Calculates an array of pixel values that are the demarcation lines between locations on the page.\n   * Can be invoked if new elements are added or the size of a location changes.\n   * @function\n   */\n  calcPoints() {\n    var _this = this,\n        body = document.body,\n        html = document.documentElement;\n\n    this.points = [];\n    this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));\n    this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));\n\n    this.$targets.each(function(){\n      var $tar = $(this),\n          pt = Math.round($tar.offset().top - _this.options.threshold);\n      $tar.targetPoint = pt;\n      _this.points.push(pt);\n    });\n  }\n\n  /**\n   * Initializes events for Magellan.\n   * @private\n   */\n  _events() {\n    var _this = this,\n        $body = $('html, body'),\n        opts = {\n          duration: _this.options.animationDuration,\n          easing:   _this.options.animationEasing\n        };\n    $(window).one('load', function(){\n      if(_this.options.deepLinking){\n        if(location.hash){\n          _this.scrollToLoc(location.hash);\n        }\n      }\n      _this.calcPoints();\n      _this._updateActive();\n    });\n\n    this.$element.on({\n      'resizeme.zf.trigger': this.reflow.bind(this),\n      'scrollme.zf.trigger': this._updateActive.bind(this)\n    }).on('click.zf.magellan', 'a[href^=\"#\"]', function(e) {\n        e.preventDefault();\n        var arrival   = this.getAttribute('href');\n        _this.scrollToLoc(arrival);\n      });\n\n    this._deepLinkScroll = function(e) {\n      if(_this.options.deepLinking) {\n        _this.scrollToLoc(window.location.hash);\n      }\n    };\n\n    $(window).on('popstate', this._deepLinkScroll);\n  }\n\n  /**\n   * Function to scroll to a given location on the page.\n   * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'\n   * @function\n   */\n  scrollToLoc(loc) {\n    this._inTransition = true;\n    var _this = this;\n\n    var options = {\n      animationEasing: this.options.animationEasing,\n      animationDuration: this.options.animationDuration,\n      threshold: this.options.threshold,\n      offset: this.options.offset\n    };\n\n    SmoothScroll.scrollToLoc(loc, options, function() {\n      _this._inTransition = false;\n      _this._updateActive();\n    })\n  }\n\n  /**\n   * Calls necessary functions to update Magellan upon DOM change\n   * @function\n   */\n  reflow() {\n    this.calcPoints();\n    this._updateActive();\n  }\n\n  /**\n   * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.\n   * @private\n   * @function\n   * @fires Magellan#update\n   */\n  _updateActive(/*evt, elem, scrollPos*/) {\n    if(this._inTransition) {return;}\n    var winPos = /*scrollPos ||*/ parseInt(window.pageYOffset, 10),\n        curIdx;\n\n    if(winPos + this.winHeight === this.docHeight){ curIdx = this.points.length - 1; }\n    else if(winPos < this.points[0]){ curIdx = undefined; }\n    else{\n      var isDown = this.scrollPos < winPos,\n          _this = this,\n          curVisible = this.points.filter(function(p, i){\n            return isDown ? p - _this.options.offset <= winPos : p - _this.options.offset - _this.options.threshold <= winPos;\n          });\n      curIdx = curVisible.length ? curVisible.length - 1 : 0;\n    }\n\n    this.$active.removeClass(this.options.activeClass);\n    this.$active = this.$links.filter('[href=\"#' + this.$targets.eq(curIdx).data('magellan-target') + '\"]').addClass(this.options.activeClass);\n\n    if(this.options.deepLinking){\n      var hash = \"\";\n      if(curIdx != undefined){\n        hash = this.$active[0].getAttribute('href');\n      }\n      if(hash !== window.location.hash) {\n        if(window.history.pushState){\n          window.history.pushState(null, null, hash);\n        }else{\n          window.location.hash = hash;\n        }\n      }\n    }\n\n    this.scrollPos = winPos;\n    /**\n     * Fires when magellan is finished updating to the new active element.\n     * @event Magellan#update\n     */\n    this.$element.trigger('update.zf.magellan', [this.$active]);\n  }\n\n  /**\n   * Destroys an instance of Magellan and resets the url of the window.\n   * @function\n   */\n  _destroy() {\n    this.$element.off('.zf.trigger .zf.magellan')\n        .find(`.${this.options.activeClass}`).removeClass(this.options.activeClass);\n\n    if(this.options.deepLinking){\n      var hash = this.$active[0].getAttribute('href');\n      window.location.hash.replace(hash, '');\n    }\n    $(window).off('popstate', this._deepLinkScroll);\n  }\n}\n\n/**\n * Default settings for plugin\n */\nMagellan.defaults = {\n  /**\n   * Amount of time, in ms, the animated scrolling should take between locations.\n   * @option\n   * @type {number}\n   * @default 500\n   */\n  animationDuration: 500,\n  /**\n   * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.\n   * @option\n   * @type {string}\n   * @default 'linear'\n   * @see {@link https://api.jquery.com/animate|Jquery animate}\n   */\n  animationEasing: 'linear',\n  /**\n   * Number of pixels to use as a marker for location changes.\n   * @option\n   * @type {number}\n   * @default 50\n   */\n  threshold: 50,\n  /**\n   * Class applied to the active locations link on the magellan container.\n   * @option\n   * @type {string}\n   * @default 'is-active'\n   */\n  activeClass: 'is-active',\n  /**\n   * Allows the script to manipulate the url of the current page, and if supported, alter the history.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  deepLinking: false,\n  /**\n   * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  offset: 0\n}\n\nexport {Magellan};\n","'use strict';\n\nimport $ from 'jquery';\nimport { Keyboard } from './foundation.util.keyboard';\nimport { MediaQuery } from './foundation.util.mediaQuery';\nimport { transitionend } from './foundation.util.core';\nimport { Plugin } from './foundation.plugin';\n\nimport { Triggers } from './foundation.util.triggers';\n\n/**\n * OffCanvas module.\n * @module foundation.offcanvas\n * @requires foundation.util.keyboard\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.triggers\n */\n\nclass OffCanvas extends Plugin {\n  /**\n   * Creates a new instance of an off-canvas wrapper.\n   * @class\n   * @name OffCanvas\n   * @fires OffCanvas#init\n   * @param {Object} element - jQuery object to initialize.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.className = 'OffCanvas'; // ie9 back compat\n    this.$element = element;\n    this.options = $.extend({}, OffCanvas.defaults, this.$element.data(), options);\n    this.contentClasses = { base: [], reveal: [] };\n    this.$lastTrigger = $();\n    this.$triggers = $();\n    this.position = 'left';\n    this.$content = $();\n    this.nested = !!(this.options.nested);\n\n    // Defines the CSS transition/position classes of the off-canvas content container.\n    $(['push', 'overlap']).each((index, val) => {\n      this.contentClasses.base.push('has-transition-'+val);\n    });\n    $(['left', 'right', 'top', 'bottom']).each((index, val) => {\n      this.contentClasses.base.push('has-position-'+val);\n      this.contentClasses.reveal.push('has-reveal-'+val);\n    });\n\n    // Triggers init is idempotent, just need to make sure it is initialized\n    Triggers.init($);\n    MediaQuery._init();\n\n    this._init();\n    this._events();\n\n    Keyboard.register('OffCanvas', {\n      'ESCAPE': 'close'\n    });\n\n  }\n\n  /**\n   * Initializes the off-canvas wrapper by adding the exit overlay (if needed).\n   * @function\n   * @private\n   */\n  _init() {\n    var id = this.$element.attr('id');\n\n    this.$element.attr('aria-hidden', 'true');\n\n    // Find off-canvas content, either by ID (if specified), by siblings or by closest selector (fallback)\n    if (this.options.contentId) {\n      this.$content = $('#'+this.options.contentId);\n    } else if (this.$element.siblings('[data-off-canvas-content]').length) {\n      this.$content = this.$element.siblings('[data-off-canvas-content]').first();\n    } else {\n      this.$content = this.$element.closest('[data-off-canvas-content]').first();\n    }\n\n    if (!this.options.contentId) {\n      // Assume that the off-canvas element is nested if it isn't a sibling of the content\n      this.nested = this.$element.siblings('[data-off-canvas-content]').length === 0;\n\n    } else if (this.options.contentId && this.options.nested === null) {\n      // Warning if using content ID without setting the nested option\n      // Once the element is nested it is required to work properly in this case\n      console.warn('Remember to use the nested option if using the content ID option!');\n    }\n\n    if (this.nested === true) {\n      // Force transition overlap if nested\n      this.options.transition = 'overlap';\n      // Remove appropriate classes if already assigned in markup\n      this.$element.removeClass('is-transition-push');\n    }\n\n    this.$element.addClass(`is-transition-${this.options.transition} is-closed`);\n\n    // Find triggers that affect this element and add aria-expanded to them\n    this.$triggers = $(document)\n      .find('[data-open=\"'+id+'\"], [data-close=\"'+id+'\"], [data-toggle=\"'+id+'\"]')\n      .attr('aria-expanded', 'false')\n      .attr('aria-controls', id);\n\n    // Get position by checking for related CSS class\n    this.position = this.$element.is('.position-left, .position-top, .position-right, .position-bottom') ? this.$element.attr('class').match(/position\\-(left|top|right|bottom)/)[1] : this.position;\n\n    // Add an overlay over the content if necessary\n    if (this.options.contentOverlay === true) {\n      var overlay = document.createElement('div');\n      var overlayPosition = $(this.$element).css(\"position\") === 'fixed' ? 'is-overlay-fixed' : 'is-overlay-absolute';\n      overlay.setAttribute('class', 'js-off-canvas-overlay ' + overlayPosition);\n      this.$overlay = $(overlay);\n      if(overlayPosition === 'is-overlay-fixed') {\n        $(this.$overlay).insertAfter(this.$element);\n      } else {\n        this.$content.append(this.$overlay);\n      }\n    }\n\n    this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);\n\n    if (this.options.isRevealed === true) {\n      this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];\n      this._setMQChecker();\n    }\n\n    if (this.options.transitionTime) {\n      this.$element.css('transition-duration', this.options.transitionTime);\n    }\n\n    // Initally remove all transition/position CSS classes from off-canvas content container.\n    this._removeContentClasses();\n  }\n\n  /**\n   * Adds event handlers to the off-canvas wrapper and the exit overlay.\n   * @function\n   * @private\n   */\n  _events() {\n    this.$element.off('.zf.trigger .zf.offcanvas').on({\n      'open.zf.trigger': this.open.bind(this),\n      'close.zf.trigger': this.close.bind(this),\n      'toggle.zf.trigger': this.toggle.bind(this),\n      'keydown.zf.offcanvas': this._handleKeyboard.bind(this)\n    });\n\n    if (this.options.closeOnClick === true) {\n      var $target = this.options.contentOverlay ? this.$overlay : this.$content;\n      $target.on({'click.zf.offcanvas': this.close.bind(this)});\n    }\n  }\n\n  /**\n   * Applies event listener for elements that will reveal at certain breakpoints.\n   * @private\n   */\n  _setMQChecker() {\n    var _this = this;\n\n    $(window).on('changed.zf.mediaquery', function() {\n      if (MediaQuery.atLeast(_this.options.revealOn)) {\n        _this.reveal(true);\n      } else {\n        _this.reveal(false);\n      }\n    }).one('load.zf.offcanvas', function() {\n      if (MediaQuery.atLeast(_this.options.revealOn)) {\n        _this.reveal(true);\n      }\n    });\n  }\n\n  /**\n   * Removes the CSS transition/position classes of the off-canvas content container.\n   * Removing the classes is important when another off-canvas gets opened that uses the same content container.\n   * @param {Boolean} hasReveal - true if related off-canvas element is revealed.\n   * @private\n   */\n  _removeContentClasses(hasReveal) {\n    if (typeof hasReveal !== 'boolean') {\n      this.$content.removeClass(this.contentClasses.base.join(' '));\n    } else if (hasReveal === false) {\n      this.$content.removeClass(`has-reveal-${this.position}`);\n    }\n  }\n\n  /**\n   * Adds the CSS transition/position classes of the off-canvas content container, based on the opening off-canvas element.\n   * Beforehand any transition/position class gets removed.\n   * @param {Boolean} hasReveal - true if related off-canvas element is revealed.\n   * @private\n   */\n  _addContentClasses(hasReveal) {\n    this._removeContentClasses(hasReveal);\n    if (typeof hasReveal !== 'boolean') {\n      this.$content.addClass(`has-transition-${this.options.transition} has-position-${this.position}`);\n    } else if (hasReveal === true) {\n      this.$content.addClass(`has-reveal-${this.position}`);\n    }\n  }\n\n  /**\n   * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.\n   * @param {Boolean} isRevealed - true if element should be revealed.\n   * @function\n   */\n  reveal(isRevealed) {\n    if (isRevealed) {\n      this.close();\n      this.isRevealed = true;\n      this.$element.attr('aria-hidden', 'false');\n      this.$element.off('open.zf.trigger toggle.zf.trigger');\n      this.$element.removeClass('is-closed');\n    } else {\n      this.isRevealed = false;\n      this.$element.attr('aria-hidden', 'true');\n      this.$element.off('open.zf.trigger toggle.zf.trigger').on({\n        'open.zf.trigger': this.open.bind(this),\n        'toggle.zf.trigger': this.toggle.bind(this)\n      });\n      this.$element.addClass('is-closed');\n    }\n    this._addContentClasses(isRevealed);\n  }\n\n  /**\n   * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.\n   * @private\n   */\n  _stopScrolling(event) {\n    return false;\n  }\n\n  // Taken and adapted from http://stackoverflow.com/questions/16889447/prevent-full-page-scrolling-ios\n  // Only really works for y, not sure how to extend to x or if we need to.\n  _recordScrollable(event) {\n    let elem = this; // called from event handler context with this as elem\n\n     // If the element is scrollable (content overflows), then...\n    if (elem.scrollHeight !== elem.clientHeight) {\n      // If we're at the top, scroll down one pixel to allow scrolling up\n      if (elem.scrollTop === 0) {\n        elem.scrollTop = 1;\n      }\n      // If we're at the bottom, scroll up one pixel to allow scrolling down\n      if (elem.scrollTop === elem.scrollHeight - elem.clientHeight) {\n        elem.scrollTop = elem.scrollHeight - elem.clientHeight - 1;\n      }\n    }\n    elem.allowUp = elem.scrollTop > 0;\n    elem.allowDown = elem.scrollTop < (elem.scrollHeight - elem.clientHeight);\n    elem.lastY = event.originalEvent.pageY;\n  }\n\n  _stopScrollPropagation(event) {\n    let elem = this; // called from event handler context with this as elem\n    let up = event.pageY < elem.lastY;\n    let down = !up;\n    elem.lastY = event.pageY;\n\n    if((up && elem.allowUp) || (down && elem.allowDown)) {\n      event.stopPropagation();\n    } else {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Opens the off-canvas menu.\n   * @function\n   * @param {Object} event - Event object passed from listener.\n   * @param {jQuery} trigger - element that triggered the off-canvas to open.\n   * @fires OffCanvas#opened\n   */\n  open(event, trigger) {\n    if (this.$element.hasClass('is-open') || this.isRevealed) { return; }\n    var _this = this;\n\n    if (trigger) {\n      this.$lastTrigger = trigger;\n    }\n\n    if (this.options.forceTo === 'top') {\n      window.scrollTo(0, 0);\n    } else if (this.options.forceTo === 'bottom') {\n      window.scrollTo(0,document.body.scrollHeight);\n    }\n\n    if (this.options.transitionTime && this.options.transition !== 'overlap') {\n      this.$element.siblings('[data-off-canvas-content]').css('transition-duration', this.options.transitionTime);\n    } else {\n      this.$element.siblings('[data-off-canvas-content]').css('transition-duration', '');\n    }\n\n    /**\n     * Fires when the off-canvas menu opens.\n     * @event OffCanvas#opened\n     */\n    this.$element.addClass('is-open').removeClass('is-closed');\n\n    this.$triggers.attr('aria-expanded', 'true');\n    this.$element.attr('aria-hidden', 'false')\n        .trigger('opened.zf.offcanvas');\n\n    this.$content.addClass('is-open-' + this.position);\n\n    // If `contentScroll` is set to false, add class and disable scrolling on touch devices.\n    if (this.options.contentScroll === false) {\n      $('body').addClass('is-off-canvas-open').on('touchmove', this._stopScrolling);\n      this.$element.on('touchstart', this._recordScrollable);\n      this.$element.on('touchmove', this._stopScrollPropagation);\n    }\n\n    if (this.options.contentOverlay === true) {\n      this.$overlay.addClass('is-visible');\n    }\n\n    if (this.options.closeOnClick === true && this.options.contentOverlay === true) {\n      this.$overlay.addClass('is-closable');\n    }\n\n    if (this.options.autoFocus === true) {\n      this.$element.one(transitionend(this.$element), function() {\n        if (!_this.$element.hasClass('is-open')) {\n          return; // exit if prematurely closed\n        }\n        var canvasFocus = _this.$element.find('[data-autofocus]');\n        if (canvasFocus.length) {\n            canvasFocus.eq(0).focus();\n        } else {\n            _this.$element.find('a, button').eq(0).focus();\n        }\n      });\n    }\n\n    if (this.options.trapFocus === true) {\n      this.$content.attr('tabindex', '-1');\n      Keyboard.trapFocus(this.$element);\n    }\n\n    this._addContentClasses();\n  }\n\n  /**\n   * Closes the off-canvas menu.\n   * @function\n   * @param {Function} cb - optional cb to fire after closure.\n   * @fires OffCanvas#closed\n   */\n  close(cb) {\n    if (!this.$element.hasClass('is-open') || this.isRevealed) { return; }\n\n    var _this = this;\n\n    this.$element.removeClass('is-open');\n\n    this.$element.attr('aria-hidden', 'true')\n      /**\n       * Fires when the off-canvas menu opens.\n       * @event OffCanvas#closed\n       */\n        .trigger('closed.zf.offcanvas');\n\n    this.$content.removeClass('is-open-left is-open-top is-open-right is-open-bottom');\n\n    // If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.\n    if (this.options.contentScroll === false) {\n      $('body').removeClass('is-off-canvas-open').off('touchmove', this._stopScrolling);\n      this.$element.off('touchstart', this._recordScrollable);\n      this.$element.off('touchmove', this._stopScrollPropagation);\n    }\n\n    if (this.options.contentOverlay === true) {\n      this.$overlay.removeClass('is-visible');\n    }\n\n    if (this.options.closeOnClick === true && this.options.contentOverlay === true) {\n      this.$overlay.removeClass('is-closable');\n    }\n\n    this.$triggers.attr('aria-expanded', 'false');\n\n    if (this.options.trapFocus === true) {\n      this.$content.removeAttr('tabindex');\n      Keyboard.releaseFocus(this.$element);\n    }\n\n    // Listen to transitionEnd and add class when done.\n    this.$element.one(transitionend(this.$element), function(e) {\n      _this.$element.addClass('is-closed');\n      _this._removeContentClasses();\n    });\n  }\n\n  /**\n   * Toggles the off-canvas menu open or closed.\n   * @function\n   * @param {Object} event - Event object passed from listener.\n   * @param {jQuery} trigger - element that triggered the off-canvas to open.\n   */\n  toggle(event, trigger) {\n    if (this.$element.hasClass('is-open')) {\n      this.close(event, trigger);\n    }\n    else {\n      this.open(event, trigger);\n    }\n  }\n\n  /**\n   * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.\n   * @function\n   * @private\n   */\n  _handleKeyboard(e) {\n    Keyboard.handleKey(e, 'OffCanvas', {\n      close: () => {\n        this.close();\n        this.$lastTrigger.focus();\n        return true;\n      },\n      handled: () => {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    });\n  }\n\n  /**\n   * Destroys the offcanvas plugin.\n   * @function\n   */\n  _destroy() {\n    this.close();\n    this.$element.off('.zf.trigger .zf.offcanvas');\n    this.$overlay.off('.zf.offcanvas');\n  }\n}\n\nOffCanvas.defaults = {\n  /**\n   * Allow the user to click outside of the menu to close it.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  closeOnClick: true,\n\n  /**\n   * Adds an overlay on top of `[data-off-canvas-content]`.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  contentOverlay: true,\n\n  /**\n   * Target an off-canvas content container by ID that may be placed anywhere. If null the closest content container will be taken.\n   * @option\n   * @type {?string}\n   * @default null\n   */\n  contentId: null,\n\n  /**\n   * Define the off-canvas element is nested in an off-canvas content. This is required when using the contentId option for a nested element.\n   * @option\n   * @type {boolean}\n   * @default null\n   */\n  nested: null,\n\n  /**\n   * Enable/disable scrolling of the main content when an off canvas panel is open.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  contentScroll: true,\n\n  /**\n   * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.\n   * @option\n   * @type {number}\n   * @default null\n   */\n  transitionTime: null,\n\n  /**\n   * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.\n   * @option\n   * @type {string}\n   * @default push\n   */\n  transition: 'push',\n\n  /**\n   * Force the page to scroll to top or bottom on open.\n   * @option\n   * @type {?string}\n   * @default null\n   */\n  forceTo: null,\n\n  /**\n   * Allow the offcanvas to remain open for certain breakpoints.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  isRevealed: false,\n\n  /**\n   * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.\n   * @option\n   * @type {?string}\n   * @default null\n   */\n  revealOn: null,\n\n  /**\n   * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  autoFocus: true,\n\n  /**\n   * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.\n   * @option\n   * @type {string}\n   * @default reveal-for-\n   * @todo improve the regex testing for this.\n   */\n  revealClass: 'reveal-for-',\n\n  /**\n   * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  trapFocus: false\n}\n\nexport {OffCanvas};\n","'use strict';\n\nimport $ from 'jquery';\nimport { Keyboard } from './foundation.util.keyboard';\nimport { Motion } from './foundation.util.motion';\nimport { Timer } from './foundation.util.timer';\nimport { onImagesLoaded } from './foundation.util.imageLoader';\nimport { GetYoDigits } from './foundation.util.core';\nimport { Plugin } from './foundation.plugin';\nimport { Touch } from './foundation.util.touch'\n\n\n/**\n * Orbit module.\n * @module foundation.orbit\n * @requires foundation.util.keyboard\n * @requires foundation.util.motion\n * @requires foundation.util.timer\n * @requires foundation.util.imageLoader\n * @requires foundation.util.touch\n */\n\nclass Orbit extends Plugin {\n  /**\n  * Creates a new instance of an orbit carousel.\n  * @class\n  * @name Orbit\n  * @param {jQuery} element - jQuery object to make into an Orbit Carousel.\n  * @param {Object} options - Overrides to the default plugin settings.\n  */\n  _setup(element, options){\n    this.$element = element;\n    this.options = $.extend({}, Orbit.defaults, this.$element.data(), options);\n    this.className = 'Orbit'; // ie9 back compat\n\n    Touch.init($); // Touch init is idempotent, we just need to make sure it's initialied.\n\n    this._init();\n\n    Keyboard.register('Orbit', {\n      'ltr': {\n        'ARROW_RIGHT': 'next',\n        'ARROW_LEFT': 'previous'\n      },\n      'rtl': {\n        'ARROW_LEFT': 'next',\n        'ARROW_RIGHT': 'previous'\n      }\n    });\n  }\n\n  /**\n  * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.\n  * @function\n  * @private\n  */\n  _init() {\n    // @TODO: consider discussion on PR #9278 about DOM pollution by changeSlide\n    this._reset();\n\n    this.$wrapper = this.$element.find(`.${this.options.containerClass}`);\n    this.$slides = this.$element.find(`.${this.options.slideClass}`);\n\n    var $images = this.$element.find('img'),\n        initActive = this.$slides.filter('.is-active'),\n        id = this.$element[0].id || GetYoDigits(6, 'orbit');\n\n    this.$element.attr({\n      'data-resize': id,\n      'id': id\n    });\n\n    if (!initActive.length) {\n      this.$slides.eq(0).addClass('is-active');\n    }\n\n    if (!this.options.useMUI) {\n      this.$slides.addClass('no-motionui');\n    }\n\n    if ($images.length) {\n      onImagesLoaded($images, this._prepareForOrbit.bind(this));\n    } else {\n      this._prepareForOrbit();//hehe\n    }\n\n    if (this.options.bullets) {\n      this._loadBullets();\n    }\n\n    this._events();\n\n    if (this.options.autoPlay && this.$slides.length > 1) {\n      this.geoSync();\n    }\n\n    if (this.options.accessible) { // allow wrapper to be focusable to enable arrow navigation\n      this.$wrapper.attr('tabindex', 0);\n    }\n  }\n\n  /**\n  * Creates a jQuery collection of bullets, if they are being used.\n  * @function\n  * @private\n  */\n  _loadBullets() {\n    this.$bullets = this.$element.find(`.${this.options.boxOfBullets}`).find('button');\n  }\n\n  /**\n  * Sets a `timer` object on the orbit, and starts the counter for the next slide.\n  * @function\n  */\n  geoSync() {\n    var _this = this;\n    this.timer = new Timer(\n      this.$element,\n      {\n        duration: this.options.timerDelay,\n        infinite: false\n      },\n      function() {\n        _this.changeSlide(true);\n      });\n    this.timer.start();\n  }\n\n  /**\n  * Sets wrapper and slide heights for the orbit.\n  * @function\n  * @private\n  */\n  _prepareForOrbit() {\n    var _this = this;\n    this._setWrapperHeight();\n  }\n\n  /**\n  * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.\n  * @function\n  * @private\n  * @param {Function} cb - a callback function to fire when complete.\n  */\n  _setWrapperHeight(cb) {//rewrite this to `for` loop\n    var max = 0, temp, counter = 0, _this = this;\n\n    this.$slides.each(function() {\n      temp = this.getBoundingClientRect().height;\n      $(this).attr('data-slide', counter);\n\n      if (!/mui/g.test($(this)[0].className) && _this.$slides.filter('.is-active')[0] !== _this.$slides.eq(counter)[0]) {//if not the active slide, set css position and display property\n        $(this).css({'position': 'relative', 'display': 'none'});\n      }\n      max = temp > max ? temp : max;\n      counter++;\n    });\n\n    if (counter === this.$slides.length) {\n      this.$wrapper.css({'height': max}); //only change the wrapper height property once.\n      if(cb) {cb(max);} //fire callback with max height dimension.\n    }\n  }\n\n  /**\n  * Sets the max-height of each slide.\n  * @function\n  * @private\n  */\n  _setSlideHeight(height) {\n    this.$slides.each(function() {\n      $(this).css('max-height', height);\n    });\n  }\n\n  /**\n  * Adds event listeners to basically everything within the element.\n  * @function\n  * @private\n  */\n  _events() {\n    var _this = this;\n\n    //***************************************\n    //**Now using custom event - thanks to:**\n    //**      Yohai Ararat of Toronto      **\n    //***************************************\n    //\n    this.$element.off('.resizeme.zf.trigger').on({\n      'resizeme.zf.trigger': this._prepareForOrbit.bind(this)\n    })\n    if (this.$slides.length > 1) {\n\n      if (this.options.swipe) {\n        this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit')\n        .on('swipeleft.zf.orbit', function(e){\n          e.preventDefault();\n          _this.changeSlide(true);\n        }).on('swiperight.zf.orbit', function(e){\n          e.preventDefault();\n          _this.changeSlide(false);\n        });\n      }\n      //***************************************\n\n      if (this.options.autoPlay) {\n        this.$slides.on('click.zf.orbit', function() {\n          _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);\n          _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();\n        });\n\n        if (this.options.pauseOnHover) {\n          this.$element.on('mouseenter.zf.orbit', function() {\n            _this.timer.pause();\n          }).on('mouseleave.zf.orbit', function() {\n            if (!_this.$element.data('clickedOn')) {\n              _this.timer.start();\n            }\n          });\n        }\n      }\n\n      if (this.options.navButtons) {\n        var $controls = this.$element.find(`.${this.options.nextClass}, .${this.options.prevClass}`);\n        $controls.attr('tabindex', 0)\n        //also need to handle enter/return and spacebar key presses\n        .on('click.zf.orbit touchend.zf.orbit', function(e){\n\t  e.preventDefault();\n          _this.changeSlide($(this).hasClass(_this.options.nextClass));\n        });\n      }\n\n      if (this.options.bullets) {\n        this.$bullets.on('click.zf.orbit touchend.zf.orbit', function() {\n          if (/is-active/g.test(this.className)) { return false; }//if this is active, kick out of function.\n          var idx = $(this).data('slide'),\n          ltr = idx > _this.$slides.filter('.is-active').data('slide'),\n          $slide = _this.$slides.eq(idx);\n\n          _this.changeSlide(ltr, $slide, idx);\n        });\n      }\n\n      if (this.options.accessible) {\n        this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function(e) {\n          // handle keyboard event with keyboard util\n          Keyboard.handleKey(e, 'Orbit', {\n            next: function() {\n              _this.changeSlide(true);\n            },\n            previous: function() {\n              _this.changeSlide(false);\n            },\n            handled: function() { // if bullet is focused, make sure focus moves\n              if ($(e.target).is(_this.$bullets)) {\n                _this.$bullets.filter('.is-active').focus();\n              }\n            }\n          });\n        });\n      }\n    }\n  }\n\n  /**\n   * Resets Orbit so it can be reinitialized\n   */\n  _reset() {\n    // Don't do anything if there are no slides (first run)\n    if (typeof this.$slides == 'undefined') {\n      return;\n    }\n\n    if (this.$slides.length > 1) {\n      // Remove old events\n      this.$element.off('.zf.orbit').find('*').off('.zf.orbit')\n\n      // Restart timer if autoPlay is enabled\n      if (this.options.autoPlay) {\n        this.timer.restart();\n      }\n\n      // Reset all sliddes\n      this.$slides.each(function(el) {\n        $(el).removeClass('is-active is-active is-in')\n          .removeAttr('aria-live')\n          .hide();\n      });\n\n      // Show the first slide\n      this.$slides.first().addClass('is-active').show();\n\n      // Triggers when the slide has finished animating\n      this.$element.trigger('slidechange.zf.orbit', [this.$slides.first()]);\n\n      // Select first bullet if bullets are present\n      if (this.options.bullets) {\n        this._updateBullets(0);\n      }\n    }\n  }\n\n  /**\n  * Changes the current slide to a new one.\n  * @function\n  * @param {Boolean} isLTR - flag if the slide should move left to right.\n  * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.\n  * @param {Number} idx - the index of the new slide in its collection, if one chosen.\n  * @fires Orbit#slidechange\n  */\n  changeSlide(isLTR, chosenSlide, idx) {\n    if (!this.$slides) {return; } // Don't freak out if we're in the middle of cleanup\n    var $curSlide = this.$slides.filter('.is-active').eq(0);\n\n    if (/mui/g.test($curSlide[0].className)) { return false; } //if the slide is currently animating, kick out of the function\n\n    var $firstSlide = this.$slides.first(),\n    $lastSlide = this.$slides.last(),\n    dirIn = isLTR ? 'Right' : 'Left',\n    dirOut = isLTR ? 'Left' : 'Right',\n    _this = this,\n    $newSlide;\n\n    if (!chosenSlide) { //most of the time, this will be auto played or clicked from the navButtons.\n      $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!\n      (this.options.infiniteWrap ? $curSlide.next(`.${this.options.slideClass}`).length ? $curSlide.next(`.${this.options.slideClass}`) : $firstSlide : $curSlide.next(`.${this.options.slideClass}`))//pick next slide if moving left to right\n      :\n      (this.options.infiniteWrap ? $curSlide.prev(`.${this.options.slideClass}`).length ? $curSlide.prev(`.${this.options.slideClass}`) : $lastSlide : $curSlide.prev(`.${this.options.slideClass}`));//pick prev slide if moving right to left\n    } else {\n      $newSlide = chosenSlide;\n    }\n\n    if ($newSlide.length) {\n      /**\n      * Triggers before the next slide starts animating in and only if a next slide has been found.\n      * @event Orbit#beforeslidechange\n      */\n      this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);\n\n      if (this.options.bullets) {\n        idx = idx || this.$slides.index($newSlide); //grab index to update bullets\n        this._updateBullets(idx);\n      }\n\n      if (this.options.useMUI && !this.$element.is(':hidden')) {\n        Motion.animateIn(\n          $newSlide.addClass('is-active').css({'position': 'absolute', 'top': 0}),\n          this.options[`animInFrom${dirIn}`],\n          function(){\n            $newSlide.css({'position': 'relative', 'display': 'block'})\n            .attr('aria-live', 'polite');\n        });\n\n        Motion.animateOut(\n          $curSlide.removeClass('is-active'),\n          this.options[`animOutTo${dirOut}`],\n          function(){\n            $curSlide.removeAttr('aria-live');\n            if(_this.options.autoPlay && !_this.timer.isPaused){\n              _this.timer.restart();\n            }\n            //do stuff?\n          });\n      } else {\n        $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();\n        $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();\n        if (this.options.autoPlay && !this.timer.isPaused) {\n          this.timer.restart();\n        }\n      }\n    /**\n    * Triggers when the slide has finished animating in.\n    * @event Orbit#slidechange\n    */\n      this.$element.trigger('slidechange.zf.orbit', [$newSlide]);\n    }\n  }\n\n  /**\n  * Updates the active state of the bullets, if displayed.\n  * @function\n  * @private\n  * @param {Number} idx - the index of the current slide.\n  */\n  _updateBullets(idx) {\n    var $oldBullet = this.$element.find(`.${this.options.boxOfBullets}`)\n    .find('.is-active').removeClass('is-active').blur(),\n    span = $oldBullet.find('span:last').detach(),\n    $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);\n  }\n\n  /**\n  * Destroys the carousel and hides the element.\n  * @function\n  */\n  _destroy() {\n    this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();\n  }\n}\n\nOrbit.defaults = {\n  /**\n  * Tells the JS to look for and loadBullets.\n  * @option\n   * @type {boolean}\n  * @default true\n  */\n  bullets: true,\n  /**\n  * Tells the JS to apply event listeners to nav buttons\n  * @option\n   * @type {boolean}\n  * @default true\n  */\n  navButtons: true,\n  /**\n  * motion-ui animation class to apply\n  * @option\n   * @type {string}\n  * @default 'slide-in-right'\n  */\n  animInFromRight: 'slide-in-right',\n  /**\n  * motion-ui animation class to apply\n  * @option\n   * @type {string}\n  * @default 'slide-out-right'\n  */\n  animOutToRight: 'slide-out-right',\n  /**\n  * motion-ui animation class to apply\n  * @option\n   * @type {string}\n  * @default 'slide-in-left'\n  *\n  */\n  animInFromLeft: 'slide-in-left',\n  /**\n  * motion-ui animation class to apply\n  * @option\n   * @type {string}\n  * @default 'slide-out-left'\n  */\n  animOutToLeft: 'slide-out-left',\n  /**\n  * Allows Orbit to automatically animate on page load.\n  * @option\n   * @type {boolean}\n  * @default true\n  */\n  autoPlay: true,\n  /**\n  * Amount of time, in ms, between slide transitions\n  * @option\n   * @type {number}\n  * @default 5000\n  */\n  timerDelay: 5000,\n  /**\n  * Allows Orbit to infinitely loop through the slides\n  * @option\n   * @type {boolean}\n  * @default true\n  */\n  infiniteWrap: true,\n  /**\n  * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library\n  * @option\n   * @type {boolean}\n  * @default true\n  */\n  swipe: true,\n  /**\n  * Allows the timing function to pause animation on hover.\n  * @option\n   * @type {boolean}\n  * @default true\n  */\n  pauseOnHover: true,\n  /**\n  * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys\n  * @option\n   * @type {boolean}\n  * @default true\n  */\n  accessible: true,\n  /**\n  * Class applied to the container of Orbit\n  * @option\n   * @type {string}\n  * @default 'orbit-container'\n  */\n  containerClass: 'orbit-container',\n  /**\n  * Class applied to individual slides.\n  * @option\n   * @type {string}\n  * @default 'orbit-slide'\n  */\n  slideClass: 'orbit-slide',\n  /**\n  * Class applied to the bullet container. You're welcome.\n  * @option\n   * @type {string}\n  * @default 'orbit-bullets'\n  */\n  boxOfBullets: 'orbit-bullets',\n  /**\n  * Class applied to the `next` navigation button.\n  * @option\n   * @type {string}\n  * @default 'orbit-next'\n  */\n  nextClass: 'orbit-next',\n  /**\n  * Class applied to the `previous` navigation button.\n  * @option\n   * @type {string}\n  * @default 'orbit-previous'\n  */\n  prevClass: 'orbit-previous',\n  /**\n  * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.\n  * @option\n   * @type {boolean}\n  * @default true\n  */\n  useMUI: true\n};\n\nexport {Orbit};\n","'use strict';\n\nimport $ from 'jquery';\nimport { GetYoDigits } from './foundation.util.core';\n\n// Abstract class for providing lifecycle hooks. Expect plugins to define AT LEAST\n// {function} _setup (replaces previous constructor),\n// {function} _destroy (replaces previous destroy)\nclass Plugin {\n\n  constructor(element, options) {\n    this._setup(element, options);\n    var pluginName = getPluginName(this);\n    this.uuid = GetYoDigits(6, pluginName);\n\n    if(!this.$element.attr(`data-${pluginName}`)){ this.$element.attr(`data-${pluginName}`, this.uuid); }\n    if(!this.$element.data('zfPlugin')){ this.$element.data('zfPlugin', this); }\n    /**\n     * Fires when the plugin has initialized.\n     * @event Plugin#init\n     */\n    this.$element.trigger(`init.zf.${pluginName}`);\n  }\n\n  destroy() {\n    this._destroy();\n    var pluginName = getPluginName(this);\n    this.$element.removeAttr(`data-${pluginName}`).removeData('zfPlugin')\n        /**\n         * Fires when the plugin has been destroyed.\n         * @event Plugin#destroyed\n         */\n        .trigger(`destroyed.zf.${pluginName}`);\n    for(var prop in this){\n      this[prop] = null;//clean up script to prep for garbage collection.\n    }\n  }\n}\n\n// Convert PascalCase to kebab-case\n// Thank you: http://stackoverflow.com/a/8955580\nfunction hyphenate(str) {\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\nfunction getPluginName(obj) {\n  if(typeof(obj.constructor.name) !== 'undefined') {\n    return hyphenate(obj.constructor.name);\n  } else {\n    return hyphenate(obj.className);\n  }\n}\n\nexport {Plugin};\n","'use strict';\n\nimport { Box } from './foundation.util.box';\nimport { Plugin } from './foundation.plugin';\nimport { rtl as Rtl } from './foundation.util.core';\n\nconst POSITIONS = ['left', 'right', 'top', 'bottom'];\nconst VERTICAL_ALIGNMENTS = ['top', 'bottom', 'center'];\nconst HORIZONTAL_ALIGNMENTS = ['left', 'right', 'center'];\n\nconst ALIGNMENTS = {\n  'left': VERTICAL_ALIGNMENTS,\n  'right': VERTICAL_ALIGNMENTS,\n  'top': HORIZONTAL_ALIGNMENTS,\n  'bottom': HORIZONTAL_ALIGNMENTS\n}\n\nfunction nextItem(item, array) {\n  var currentIdx = array.indexOf(item);\n  if(currentIdx === array.length - 1) {\n    return array[0];\n  } else {\n    return array[currentIdx + 1];\n  }\n}\n\n\nclass Positionable extends Plugin {\n  /**\n   * Abstract class encapsulating the tether-like explicit positioning logic\n   * including repositioning based on overlap.\n   * Expects classes to define defaults for vOffset, hOffset, position,\n   * alignment, allowOverlap, and allowBottomOverlap. They can do this by\n   * extending the defaults, or (for now recommended due to the way docs are\n   * generated) by explicitly declaring them.\n   *\n   **/\n\n  _init() {\n    this.triedPositions = {};\n    this.position  = this.options.position === 'auto' ? this._getDefaultPosition() : this.options.position;\n    this.alignment = this.options.alignment === 'auto' ? this._getDefaultAlignment() : this.options.alignment;\n    this.originalPosition = this.position;\n    this.originalAlignment = this.alignment;\n  }\n\n  _getDefaultPosition () {\n    return 'bottom';\n  }\n\n  _getDefaultAlignment() {\n    switch(this.position) {\n      case 'bottom':\n      case 'top':\n        return Rtl() ? 'right' : 'left';\n      case 'left':\n      case 'right':\n        return 'bottom';\n    }\n  }\n\n  /**\n   * Adjusts the positionable possible positions by iterating through alignments\n   * and positions.\n   * @function\n   * @private\n   */\n  _reposition() {\n    if(this._alignmentsExhausted(this.position)) {\n      this.position = nextItem(this.position, POSITIONS);\n      this.alignment = ALIGNMENTS[this.position][0];\n    } else {\n      this._realign();\n    }\n  }\n\n  /**\n   * Adjusts the dropdown pane possible positions by iterating through alignments\n   * on the current position.\n   * @function\n   * @private\n   */\n  _realign() {\n    this._addTriedPosition(this.position, this.alignment)\n    this.alignment = nextItem(this.alignment, ALIGNMENTS[this.position])\n  }\n\n  _addTriedPosition(position, alignment) {\n    this.triedPositions[position] = this.triedPositions[position] || []\n    this.triedPositions[position].push(alignment);\n  }\n\n  _positionsExhausted() {\n    var isExhausted = true;\n    for(var i = 0; i < POSITIONS.length; i++) {\n      isExhausted = isExhausted && this._alignmentsExhausted(POSITIONS[i]);\n    }\n    return isExhausted;\n  }\n\n  _alignmentsExhausted(position) {\n    return this.triedPositions[position] && this.triedPositions[position].length == ALIGNMENTS[position].length;\n  }\n\n\n  // When we're trying to center, we don't want to apply offset that's going to\n  // take us just off center, so wrap around to return 0 for the appropriate\n  // offset in those alignments.  TODO: Figure out if we want to make this\n  // configurable behavior... it feels more intuitive, especially for tooltips, but\n  // it's possible someone might actually want to start from center and then nudge\n  // slightly off.\n  _getVOffset() {\n    return this.options.vOffset;\n  }\n\n  _getHOffset() {\n    return this.options.hOffset;\n  }\n\n\n  _setPosition($anchor, $element, $parent) {\n    if($anchor.attr('aria-expanded') === 'false'){ return false; }\n    var $eleDims = Box.GetDimensions($element),\n        $anchorDims = Box.GetDimensions($anchor);\n\n\n    if (!this.options.allowOverlap) {\n      // restore original position & alignment before checking overlap\n      this.position = this.originalPosition;\n      this.alignment = this.originalAlignment;\n    }\n\n    $element.offset(Box.GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));\n\n    if(!this.options.allowOverlap) {\n      var overlaps = {};\n      var minOverlap = 100000000;\n      // default coordinates to how we start, in case we can't figure out better\n      var minCoordinates = {position: this.position, alignment: this.alignment};\n      while(!this._positionsExhausted()) {\n        let overlap = Box.OverlapArea($element, $parent, false, false, this.options.allowBottomOverlap);\n        if(overlap === 0) {\n          return;\n        }\n\n        if(overlap < minOverlap) {\n          minOverlap = overlap;\n          minCoordinates = {position: this.position, alignment: this.alignment};\n        }\n\n        this._reposition();\n\n        $element.offset(Box.GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));\n      }\n      // If we get through the entire loop, there was no non-overlapping\n      // position available. Pick the version with least overlap.\n      this.position = minCoordinates.position;\n      this.alignment = minCoordinates.alignment;\n      $element.offset(Box.GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));\n    }\n  }\n\n}\n\nPositionable.defaults = {\n  /**\n   * Position of positionable relative to anchor. Can be left, right, bottom, top, or auto.\n   * @option\n   * @type {string}\n   * @default 'auto'\n   */\n  position: 'auto',\n  /**\n   * Alignment of positionable relative to anchor. Can be left, right, bottom, top, center, or auto.\n   * @option\n   * @type {string}\n   * @default 'auto'\n   */\n  alignment: 'auto',\n  /**\n   * Allow overlap of container/window. If false, dropdown positionable first\n   * try to position as defined by data-position and data-alignment, but\n   * reposition if it would cause an overflow.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  allowOverlap: false,\n  /**\n   * Allow overlap of only the bottom of the container. This is the most common\n   * behavior for dropdowns, allowing the dropdown to extend the bottom of the\n   * screen but not otherwise influence or break out of the container.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  allowBottomOverlap: true,\n  /**\n   * Number of pixels the positionable should be separated vertically from anchor\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  vOffset: 0,\n  /**\n   * Number of pixels the positionable should be separated horizontally from anchor\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  hOffset: 0,\n}\n\nexport {Positionable};\n","'use strict';\n\nimport $ from 'jquery';\nimport { MediaQuery } from './foundation.util.mediaQuery';\nimport { GetYoDigits } from './foundation.util.core';\nimport { Plugin }from './foundation.plugin';\n\nimport { Accordion } from './foundation.accordion';\nimport { Tabs } from './foundation.tabs';\n\n// The plugin matches the plugin classes with these plugin instances.\nvar MenuPlugins = {\n  tabs: {\n    cssClass: 'tabs',\n    plugin: Tabs\n  },\n  accordion: {\n    cssClass: 'accordion',\n    plugin: Accordion\n  }\n};\n\n\n/**\n * ResponsiveAccordionTabs module.\n * @module foundation.responsiveAccordionTabs\n * @requires foundation.util.motion\n * @requires foundation.accordion\n * @requires foundation.tabs\n */\n\nclass ResponsiveAccordionTabs extends Plugin{\n  /**\n   * Creates a new instance of a responsive accordion tabs.\n   * @class\n   * @name ResponsiveAccordionTabs\n   * @fires ResponsiveAccordionTabs#init\n   * @param {jQuery} element - jQuery object to make into Responsive Accordion Tabs.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = $(element);\n    this.options  = $.extend({}, this.$element.data(), options);\n    this.rules = this.$element.data('responsive-accordion-tabs');\n    this.currentMq = null;\n    this.currentPlugin = null;\n    this.className = 'ResponsiveAccordionTabs'; // ie9 back compat\n    if (!this.$element.attr('id')) {\n      this.$element.attr('id',GetYoDigits(6, 'responsiveaccordiontabs'));\n    };\n\n    this._init();\n    this._events();\n  }\n\n  /**\n   * Initializes the Menu by parsing the classes from the 'data-responsive-accordion-tabs' attribute on the element.\n   * @function\n   * @private\n   */\n  _init() {\n    MediaQuery._init();\n\n    // The first time an Interchange plugin is initialized, this.rules is converted from a string of \"classes\" to an object of rules\n    if (typeof this.rules === 'string') {\n      let rulesTree = {};\n\n      // Parse rules from \"classes\" pulled from data attribute\n      let rules = this.rules.split(' ');\n\n      // Iterate through every rule found\n      for (let i = 0; i < rules.length; i++) {\n        let rule = rules[i].split('-');\n        let ruleSize = rule.length > 1 ? rule[0] : 'small';\n        let rulePlugin = rule.length > 1 ? rule[1] : rule[0];\n\n        if (MenuPlugins[rulePlugin] !== null) {\n          rulesTree[ruleSize] = MenuPlugins[rulePlugin];\n        }\n      }\n\n      this.rules = rulesTree;\n    }\n\n    this._getAllOptions();\n\n    if (!$.isEmptyObject(this.rules)) {\n      this._checkMediaQueries();\n    }\n  }\n\n  _getAllOptions() {\n    //get all defaults and options\n    var _this = this;\n    _this.allOptions = {};\n    for (var key in MenuPlugins) {\n      if (MenuPlugins.hasOwnProperty(key)) {\n        var obj = MenuPlugins[key];\n        try {\n          var dummyPlugin = $('<ul></ul>');\n          var tmpPlugin = new obj.plugin(dummyPlugin,_this.options);\n          for (var keyKey in tmpPlugin.options) {\n            if (tmpPlugin.options.hasOwnProperty(keyKey) && keyKey !== 'zfPlugin') {\n              var objObj = tmpPlugin.options[keyKey];\n              _this.allOptions[keyKey] = objObj;\n            }\n          }\n          tmpPlugin.destroy();\n        }\n        catch(e) {\n        }\n      }\n    }\n  }\n\n  /**\n   * Initializes events for the Menu.\n   * @function\n   * @private\n   */\n  _events() {\n    var _this = this;\n\n    $(window).on('changed.zf.mediaquery', function() {\n      _this._checkMediaQueries();\n    });\n  }\n\n  /**\n   * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.\n   * @function\n   * @private\n   */\n  _checkMediaQueries() {\n    var matchedMq, _this = this;\n    // Iterate through each rule and find the last matching rule\n    $.each(this.rules, function(key) {\n      if (MediaQuery.atLeast(key)) {\n        matchedMq = key;\n      }\n    });\n\n    // No match? No dice\n    if (!matchedMq) return;\n\n    // Plugin already initialized? We good\n    if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;\n\n    // Remove existing plugin-specific CSS classes\n    $.each(MenuPlugins, function(key, value) {\n      _this.$element.removeClass(value.cssClass);\n    });\n\n    // Add the CSS class for the new plugin\n    this.$element.addClass(this.rules[matchedMq].cssClass);\n\n    // Create an instance of the new plugin\n    if (this.currentPlugin) {\n      //don't know why but on nested elements data zfPlugin get's lost\n      if (!this.currentPlugin.$element.data('zfPlugin') && this.storezfData) this.currentPlugin.$element.data('zfPlugin',this.storezfData);\n      this.currentPlugin.destroy();\n    }\n    this._handleMarkup(this.rules[matchedMq].cssClass);\n    this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});\n    this.storezfData = this.currentPlugin.$element.data('zfPlugin');\n\n  }\n\n  _handleMarkup(toSet){\n    var _this = this, fromString = 'accordion';\n    var $panels = $('[data-tabs-content='+this.$element.attr('id')+']');\n    if ($panels.length) fromString = 'tabs';\n    if (fromString === toSet) {\n      return;\n    };\n\n    var tabsTitle = _this.allOptions.linkClass?_this.allOptions.linkClass:'tabs-title';\n    var tabsPanel = _this.allOptions.panelClass?_this.allOptions.panelClass:'tabs-panel';\n\n    this.$element.removeAttr('role');\n    var $liHeads = this.$element.children('.'+tabsTitle+',[data-accordion-item]').removeClass(tabsTitle).removeClass('accordion-item').removeAttr('data-accordion-item');\n    var $liHeadsA = $liHeads.children('a').removeClass('accordion-title');\n\n    if (fromString === 'tabs') {\n      $panels = $panels.children('.'+tabsPanel).removeClass(tabsPanel).removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby');\n      $panels.children('a').removeAttr('role').removeAttr('aria-controls').removeAttr('aria-selected');\n    }else{\n      $panels = $liHeads.children('[data-tab-content]').removeClass('accordion-content');\n    };\n\n    $panels.css({display:'',visibility:''});\n    $liHeads.css({display:'',visibility:''});\n    if (toSet === 'accordion') {\n      $panels.each(function(key,value){\n        $(value).appendTo($liHeads.get(key)).addClass('accordion-content').attr('data-tab-content','').removeClass('is-active').css({height:''});\n        $('[data-tabs-content='+_this.$element.attr('id')+']').after('<div id=\"tabs-placeholder-'+_this.$element.attr('id')+'\"></div>').detach();\n        $liHeads.addClass('accordion-item').attr('data-accordion-item','');\n        $liHeadsA.addClass('accordion-title');\n      });\n    }else if (toSet === 'tabs'){\n      var $tabsContent = $('[data-tabs-content='+_this.$element.attr('id')+']');\n      var $placeholder = $('#tabs-placeholder-'+_this.$element.attr('id'));\n      if ($placeholder.length) {\n        $tabsContent = $('<div class=\"tabs-content\"></div>').insertAfter($placeholder).attr('data-tabs-content',_this.$element.attr('id'));\n        $placeholder.remove();\n      }else{\n        $tabsContent = $('<div class=\"tabs-content\"></div>').insertAfter(_this.$element).attr('data-tabs-content',_this.$element.attr('id'));\n      };\n      $panels.each(function(key,value){\n        var tempValue = $(value).appendTo($tabsContent).addClass(tabsPanel);\n        var hash = $liHeadsA.get(key).hash.slice(1);\n        var id = $(value).attr('id') || GetYoDigits(6, 'accordion');\n        if (hash !== id) {\n          if (hash !== '') {\n            $(value).attr('id',hash);\n          }else{\n            hash = id;\n            $(value).attr('id',hash);\n            $($liHeadsA.get(key)).attr('href',$($liHeadsA.get(key)).attr('href').replace('#','')+'#'+hash);\n          };\n        };\n        var isActive = $($liHeads.get(key)).hasClass('is-active');\n        if (isActive) {\n          tempValue.addClass('is-active');\n        };\n      });\n      $liHeads.addClass(tabsTitle);\n    };\n  }\n\n  /**\n   * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.\n   * @function\n   */\n  _destroy() {\n    if (this.currentPlugin) this.currentPlugin.destroy();\n    $(window).off('.zf.ResponsiveAccordionTabs');\n  }\n}\n\nResponsiveAccordionTabs.defaults = {};\n\nexport {ResponsiveAccordionTabs};\n","'use strict';\n\nimport $ from 'jquery';\n\nimport { MediaQuery } from './foundation.util.mediaQuery';\nimport { GetYoDigits } from './foundation.util.core';\nimport { Plugin } from './foundation.plugin';\n\nimport { DropdownMenu } from './foundation.dropdownMenu';\nimport { Drilldown } from './foundation.drilldown';\nimport { AccordionMenu } from './foundation.accordionMenu';\n\nlet MenuPlugins = {\n  dropdown: {\n    cssClass: 'dropdown',\n    plugin: DropdownMenu\n  },\n drilldown: {\n    cssClass: 'drilldown',\n    plugin: Drilldown\n  },\n  accordion: {\n    cssClass: 'accordion-menu',\n    plugin: AccordionMenu\n  }\n};\n\n  // import \"foundation.util.triggers.js\";\n\n\n/**\n * ResponsiveMenu module.\n * @module foundation.responsiveMenu\n * @requires foundation.util.triggers\n * @requires foundation.util.mediaQuery\n */\n\nclass ResponsiveMenu extends Plugin {\n  /**\n   * Creates a new instance of a responsive menu.\n   * @class\n   * @name ResponsiveMenu\n   * @fires ResponsiveMenu#init\n   * @param {jQuery} element - jQuery object to make into a dropdown menu.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = $(element);\n    this.rules = this.$element.data('responsive-menu');\n    this.currentMq = null;\n    this.currentPlugin = null;\n    this.className = 'ResponsiveMenu'; // ie9 back compat\n\n    this._init();\n    this._events();\n  }\n\n  /**\n   * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.\n   * @function\n   * @private\n   */\n  _init() {\n\n    MediaQuery._init();\n    // The first time an Interchange plugin is initialized, this.rules is converted from a string of \"classes\" to an object of rules\n    if (typeof this.rules === 'string') {\n      let rulesTree = {};\n\n      // Parse rules from \"classes\" pulled from data attribute\n      let rules = this.rules.split(' ');\n\n      // Iterate through every rule found\n      for (let i = 0; i < rules.length; i++) {\n        let rule = rules[i].split('-');\n        let ruleSize = rule.length > 1 ? rule[0] : 'small';\n        let rulePlugin = rule.length > 1 ? rule[1] : rule[0];\n\n        if (MenuPlugins[rulePlugin] !== null) {\n          rulesTree[ruleSize] = MenuPlugins[rulePlugin];\n        }\n      }\n\n      this.rules = rulesTree;\n    }\n\n    if (!$.isEmptyObject(this.rules)) {\n      this._checkMediaQueries();\n    }\n    // Add data-mutate since children may need it.\n    this.$element.attr('data-mutate', (this.$element.attr('data-mutate') || GetYoDigits(6, 'responsive-menu')));\n  }\n\n  /**\n   * Initializes events for the Menu.\n   * @function\n   * @private\n   */\n  _events() {\n    var _this = this;\n\n    $(window).on('changed.zf.mediaquery', function() {\n      _this._checkMediaQueries();\n    });\n    // $(window).on('resize.zf.ResponsiveMenu', function() {\n    //   _this._checkMediaQueries();\n    // });\n  }\n\n  /**\n   * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.\n   * @function\n   * @private\n   */\n  _checkMediaQueries() {\n    var matchedMq, _this = this;\n    // Iterate through each rule and find the last matching rule\n    $.each(this.rules, function(key) {\n      if (MediaQuery.atLeast(key)) {\n        matchedMq = key;\n      }\n    });\n\n    // No match? No dice\n    if (!matchedMq) return;\n\n    // Plugin already initialized? We good\n    if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;\n\n    // Remove existing plugin-specific CSS classes\n    $.each(MenuPlugins, function(key, value) {\n      _this.$element.removeClass(value.cssClass);\n    });\n\n    // Add the CSS class for the new plugin\n    this.$element.addClass(this.rules[matchedMq].cssClass);\n\n    // Create an instance of the new plugin\n    if (this.currentPlugin) this.currentPlugin.destroy();\n    this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});\n  }\n\n  /**\n   * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.\n   * @function\n   */\n  _destroy() {\n    this.currentPlugin.destroy();\n    $(window).off('.zf.ResponsiveMenu');\n  }\n}\n\nResponsiveMenu.defaults = {};\n\nexport {ResponsiveMenu};\n","'use strict';\n\nimport $ from 'jquery';\n\nimport { MediaQuery } from './foundation.util.mediaQuery';\nimport { Motion } from './foundation.util.motion';\nimport { Plugin } from './foundation.plugin';\n\n/**\n * ResponsiveToggle module.\n * @module foundation.responsiveToggle\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.motion\n */\n\nclass ResponsiveToggle extends Plugin {\n  /**\n   * Creates a new instance of Tab Bar.\n   * @class\n   * @name ResponsiveToggle\n   * @fires ResponsiveToggle#init\n   * @param {jQuery} element - jQuery object to attach tab bar functionality to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = $(element);\n    this.options = $.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);\n    this.className = 'ResponsiveToggle'; // ie9 back compat\n\n    this._init();\n    this._events();\n  }\n\n  /**\n   * Initializes the tab bar by finding the target element, toggling element, and running update().\n   * @function\n   * @private\n   */\n  _init() {\n    MediaQuery._init();\n    var targetID = this.$element.data('responsive-toggle');\n    if (!targetID) {\n      console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');\n    }\n\n    this.$targetMenu = $(`#${targetID}`);\n    this.$toggler = this.$element.find('[data-toggle]').filter(function() {\n      var target = $(this).data('toggle');\n      return (target === targetID || target === \"\");\n    });\n    this.options = $.extend({}, this.options, this.$targetMenu.data());\n\n    // If they were set, parse the animation classes\n    if(this.options.animate) {\n      let input = this.options.animate.split(' ');\n\n      this.animationIn = input[0];\n      this.animationOut = input[1] || null;\n    }\n\n    this._update();\n  }\n\n  /**\n   * Adds necessary event handlers for the tab bar to work.\n   * @function\n   * @private\n   */\n  _events() {\n    var _this = this;\n\n    this._updateMqHandler = this._update.bind(this);\n\n    $(window).on('changed.zf.mediaquery', this._updateMqHandler);\n\n    this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));\n  }\n\n  /**\n   * Checks the current media query to determine if the tab bar should be visible or hidden.\n   * @function\n   * @private\n   */\n  _update() {\n    // Mobile\n    if (!MediaQuery.atLeast(this.options.hideFor)) {\n      this.$element.show();\n      this.$targetMenu.hide();\n    }\n\n    // Desktop\n    else {\n      this.$element.hide();\n      this.$targetMenu.show();\n    }\n  }\n\n  /**\n   * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.\n   * @function\n   * @fires ResponsiveToggle#toggled\n   */\n  toggleMenu() {\n    if (!MediaQuery.atLeast(this.options.hideFor)) {\n      /**\n       * Fires when the element attached to the tab bar toggles.\n       * @event ResponsiveToggle#toggled\n       */\n      if(this.options.animate) {\n        if (this.$targetMenu.is(':hidden')) {\n          Motion.animateIn(this.$targetMenu, this.animationIn, () => {\n            this.$element.trigger('toggled.zf.responsiveToggle');\n            this.$targetMenu.find('[data-mutate]').triggerHandler('mutateme.zf.trigger');\n          });\n        }\n        else {\n          Motion.animateOut(this.$targetMenu, this.animationOut, () => {\n            this.$element.trigger('toggled.zf.responsiveToggle');\n          });\n        }\n      }\n      else {\n        this.$targetMenu.toggle(0);\n        this.$targetMenu.find('[data-mutate]').trigger('mutateme.zf.trigger');\n        this.$element.trigger('toggled.zf.responsiveToggle');\n      }\n    }\n  };\n\n  _destroy() {\n    this.$element.off('.zf.responsiveToggle');\n    this.$toggler.off('.zf.responsiveToggle');\n\n    $(window).off('changed.zf.mediaquery', this._updateMqHandler);\n  }\n}\n\nResponsiveToggle.defaults = {\n  /**\n   * The breakpoint after which the menu is always shown, and the tab bar is hidden.\n   * @option\n   * @type {string}\n   * @default 'medium'\n   */\n  hideFor: 'medium',\n\n  /**\n   * To decide if the toggle should be animated or not.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  animate: false\n};\n\nexport { ResponsiveToggle };\n","'use strict';\n\nimport $ from 'jquery';\nimport { Keyboard } from './foundation.util.keyboard';\nimport { MediaQuery } from './foundation.util.mediaQuery';\nimport { Motion } from './foundation.util.motion';\nimport { Plugin } from './foundation.plugin';\nimport { Triggers } from './foundation.util.triggers';\n\n/**\n * Reveal module.\n * @module foundation.reveal\n * @requires foundation.util.keyboard\n * @requires foundation.util.triggers\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.motion if using animations\n */\n\nclass Reveal extends Plugin {\n  /**\n   * Creates a new instance of Reveal.\n   * @class\n   * @name Reveal\n   * @param {jQuery} element - jQuery object to use for the modal.\n   * @param {Object} options - optional parameters.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Reveal.defaults, this.$element.data(), options);\n    this.className = 'Reveal'; // ie9 back compat\n    this._init();\n\n    // Triggers init is idempotent, just need to make sure it is initialized\n    Triggers.init($);\n\n    Keyboard.register('Reveal', {\n      'ESCAPE': 'close',\n    });\n  }\n\n  /**\n   * Initializes the modal by adding the overlay and close buttons, (if selected).\n   * @private\n   */\n  _init() {\n    MediaQuery._init();\n    this.id = this.$element.attr('id');\n    this.isActive = false;\n    this.cached = {mq: MediaQuery.current};\n\n    this.$anchor = $(`[data-open=\"${this.id}\"]`).length ? $(`[data-open=\"${this.id}\"]`) : $(`[data-toggle=\"${this.id}\"]`);\n    this.$anchor.attr({\n      'aria-controls': this.id,\n      'aria-haspopup': true,\n      'tabindex': 0\n    });\n\n    if (this.options.fullScreen || this.$element.hasClass('full')) {\n      this.options.fullScreen = true;\n      this.options.overlay = false;\n    }\n    if (this.options.overlay && !this.$overlay) {\n      this.$overlay = this._makeOverlay(this.id);\n    }\n\n    this.$element.attr({\n        'role': 'dialog',\n        'aria-hidden': true,\n        'data-yeti-box': this.id,\n        'data-resize': this.id\n    });\n\n    if(this.$overlay) {\n      this.$element.detach().appendTo(this.$overlay);\n    } else {\n      this.$element.detach().appendTo($(this.options.appendTo));\n      this.$element.addClass('without-overlay');\n    }\n    this._events();\n    if (this.options.deepLink && window.location.hash === ( `#${this.id}`)) {\n      $(window).one('load.zf.reveal', this.open.bind(this));\n    }\n  }\n\n  /**\n   * Creates an overlay div to display behind the modal.\n   * @private\n   */\n  _makeOverlay() {\n    var additionalOverlayClasses = '';\n\n    if (this.options.additionalOverlayClasses) {\n      additionalOverlayClasses = ' ' + this.options.additionalOverlayClasses;\n    }\n\n    return $('<div></div>')\n      .addClass('reveal-overlay' + additionalOverlayClasses)\n      .appendTo(this.options.appendTo);\n  }\n\n  /**\n   * Updates position of modal\n   * TODO:  Figure out if we actually need to cache these values or if it doesn't matter\n   * @private\n   */\n  _updatePosition() {\n    var width = this.$element.outerWidth();\n    var outerWidth = $(window).width();\n    var height = this.$element.outerHeight();\n    var outerHeight = $(window).height();\n    var left, top = null;\n    if (this.options.hOffset === 'auto') {\n      left = parseInt((outerWidth - width) / 2, 10);\n    } else {\n      left = parseInt(this.options.hOffset, 10);\n    }\n    if (this.options.vOffset === 'auto') {\n      if (height > outerHeight) {\n        top = parseInt(Math.min(100, outerHeight / 10), 10);\n      } else {\n        top = parseInt((outerHeight - height) / 4, 10);\n      }\n    } else if (this.options.vOffset !== null) {\n      top = parseInt(this.options.vOffset, 10);\n    }\n\n    if (top !== null) {\n      this.$element.css({top: top + 'px'});\n    }\n\n    // only worry about left if we don't have an overlay or we have a horizontal offset,\n    // otherwise we're perfectly in the middle\n    if (!this.$overlay || (this.options.hOffset !== 'auto')) {\n      this.$element.css({left: left + 'px'});\n      this.$element.css({margin: '0px'});\n    }\n\n  }\n\n  /**\n   * Adds event handlers for the modal.\n   * @private\n   */\n  _events() {\n    var _this = this;\n\n    this.$element.on({\n      'open.zf.trigger': this.open.bind(this),\n      'close.zf.trigger': (event, $element) => {\n        if ((event.target === _this.$element[0]) ||\n            ($(event.target).parents('[data-closable]')[0] === $element)) { // only close reveal when it's explicitly called\n          return this.close.apply(this);\n        }\n      },\n      'toggle.zf.trigger': this.toggle.bind(this),\n      'resizeme.zf.trigger': function() {\n        _this._updatePosition();\n      }\n    });\n\n    if (this.options.closeOnClick && this.options.overlay) {\n      this.$overlay.off('.zf.reveal').on('click.zf.reveal', function(e) {\n        if (e.target === _this.$element[0] ||\n          $.contains(_this.$element[0], e.target) ||\n            !$.contains(document, e.target)) {\n              return;\n        }\n        _this.close();\n      });\n    }\n    if (this.options.deepLink) {\n      $(window).on(`popstate.zf.reveal:${this.id}`, this._handleState.bind(this));\n    }\n  }\n\n  /**\n   * Handles modal methods on back/forward button clicks or any other event that triggers popstate.\n   * @private\n   */\n  _handleState(e) {\n    if(window.location.hash === ( '#' + this.id) && !this.isActive){ this.open(); }\n    else{ this.close(); }\n  }\n\n  /**\n  * Disables the scroll when Reveal is shown to prevent the background from shifting\n  */\n  _disableScroll(){\n    if ($(document).height() > $(window).height()) {\n      var scrollTop = $(window).scrollTop();\n      $(\"html\")\n        .css(\"top\", -scrollTop);\n    }\n  }\n\n  /**\n  * Reenables the scroll when Reveal closes\n  */\n  _enableScroll(){\n    if ($(document).height() > $(window).height()) {\n      var scrollTop = parseInt($(\"html\").css(\"top\"));\n      $(\"html\")\n        .css(\"top\", \"\");\n      $(window).scrollTop(-scrollTop);\n    }\n  }\n\n\n  /**\n   * Opens the modal controlled by `this.$anchor`, and closes all others by default.\n   * @function\n   * @fires Reveal#closeme\n   * @fires Reveal#open\n   */\n  open() {\n    // either update or replace browser history\n    if (this.options.deepLink) {\n      var hash = `#${this.id}`;\n\n      if (window.history.pushState) {\n        if (this.options.updateHistory) {\n          window.history.pushState({}, '', hash);\n        } else {\n          window.history.replaceState({}, '', hash);\n        }\n      } else {\n        window.location.hash = hash;\n      }\n    }\n\n    this.isActive = true;\n\n    // Make elements invisible, but remove display: none so we can get size and positioning\n    this.$element\n        .css({ 'visibility': 'hidden' })\n        .show()\n        .scrollTop(0);\n    if (this.options.overlay) {\n      this.$overlay.css({'visibility': 'hidden'}).show();\n    }\n\n    this._updatePosition();\n\n    this.$element\n      .hide()\n      .css({ 'visibility': '' });\n\n    if(this.$overlay) {\n      this.$overlay.css({'visibility': ''}).hide();\n      if(this.$element.hasClass('fast')) {\n        this.$overlay.addClass('fast');\n      } else if (this.$element.hasClass('slow')) {\n        this.$overlay.addClass('slow');\n      }\n    }\n\n\n    if (!this.options.multipleOpened) {\n      /**\n       * Fires immediately before the modal opens.\n       * Closes any other modals that are currently open\n       * @event Reveal#closeme\n       */\n      this.$element.trigger('closeme.zf.reveal', this.id);\n    }\n\n    this._disableScroll();\n\n    var _this = this;\n\n    function addRevealOpenClasses() {\n\n      $('html').addClass('is-reveal-open');\n    }\n\n    // Motion UI method of reveal\n    if (this.options.animationIn) {\n      function afterAnimation(){\n        _this.$element\n          .attr({\n            'aria-hidden': false,\n            'tabindex': -1\n          })\n          .focus();\n        addRevealOpenClasses();\n        Keyboard.trapFocus(_this.$element);\n      }\n      if (this.options.overlay) {\n        Motion.animateIn(this.$overlay, 'fade-in');\n      }\n      Motion.animateIn(this.$element, this.options.animationIn, () => {\n        if(this.$element) { // protect against object having been removed\n          this.focusableElements = Keyboard.findFocusable(this.$element);\n          afterAnimation();\n        }\n      });\n    }\n    // jQuery method of reveal\n    else {\n      if (this.options.overlay) {\n        this.$overlay.show(0);\n      }\n      this.$element.show(this.options.showDelay);\n    }\n\n    // handle accessibility\n    this.$element\n      .attr({\n        'aria-hidden': false,\n        'tabindex': -1\n      })\n      .focus();\n    Keyboard.trapFocus(this.$element);\n\n    addRevealOpenClasses();\n\n    this._extraHandlers();\n\n    /**\n     * Fires when the modal has successfully opened.\n     * @event Reveal#open\n     */\n    this.$element.trigger('open.zf.reveal');\n  }\n\n  /**\n   * Adds extra event handlers for the body and window if necessary.\n   * @private\n   */\n  _extraHandlers() {\n    var _this = this;\n    if(!this.$element) { return; } // If we're in the middle of cleanup, don't freak out\n    this.focusableElements = Keyboard.findFocusable(this.$element);\n\n    if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {\n      $('body').on('click.zf.reveal', function(e) {\n        if (e.target === _this.$element[0] ||\n          $.contains(_this.$element[0], e.target) ||\n            !$.contains(document, e.target)) { return; }\n        _this.close();\n      });\n    }\n\n    if (this.options.closeOnEsc) {\n      $(window).on('keydown.zf.reveal', function(e) {\n        Keyboard.handleKey(e, 'Reveal', {\n          close: function() {\n            if (_this.options.closeOnEsc) {\n              _this.close();\n            }\n          }\n        });\n      });\n    }\n  }\n\n  /**\n   * Closes the modal.\n   * @function\n   * @fires Reveal#closed\n   */\n  close() {\n    if (!this.isActive || !this.$element.is(':visible')) {\n      return false;\n    }\n    var _this = this;\n\n    // Motion UI method of hiding\n    if (this.options.animationOut) {\n      if (this.options.overlay) {\n        Motion.animateOut(this.$overlay, 'fade-out');\n      }\n\n      Motion.animateOut(this.$element, this.options.animationOut, finishUp);\n    }\n    // jQuery method of hiding\n    else {\n      this.$element.hide(this.options.hideDelay);\n\n      if (this.options.overlay) {\n        this.$overlay.hide(0, finishUp);\n      }\n      else {\n        finishUp();\n      }\n    }\n\n    // Conditionals to remove extra event listeners added on open\n    if (this.options.closeOnEsc) {\n      $(window).off('keydown.zf.reveal');\n    }\n\n    if (!this.options.overlay && this.options.closeOnClick) {\n      $('body').off('click.zf.reveal');\n    }\n\n    this.$element.off('keydown.zf.reveal');\n\n    function finishUp() {\n\n      if ($('.reveal:visible').length  === 0) {\n        $('html').removeClass('is-reveal-open');\n      }\n\n      Keyboard.releaseFocus(_this.$element);\n\n      _this.$element.attr('aria-hidden', true);\n\n      _this._enableScroll();\n\n      /**\n      * Fires when the modal is done closing.\n      * @event Reveal#closed\n      */\n      _this.$element.trigger('closed.zf.reveal');\n    }\n\n    /**\n    * Resets the modal content\n    * This prevents a running video to keep going in the background\n    */\n    if (this.options.resetOnClose) {\n      this.$element.html(this.$element.html());\n    }\n\n    this.isActive = false;\n     if (_this.options.deepLink) {\n       if (window.history.replaceState) {\n         window.history.replaceState('', document.title, window.location.href.replace(`#${this.id}`, ''));\n       } else {\n         window.location.hash = '';\n       }\n     }\n\n    this.$anchor.focus();\n  }\n\n  /**\n   * Toggles the open/closed state of a modal.\n   * @function\n   */\n  toggle() {\n    if (this.isActive) {\n      this.close();\n    } else {\n      this.open();\n    }\n  };\n\n  /**\n   * Destroys an instance of a modal.\n   * @function\n   */\n  _destroy() {\n    if (this.options.overlay) {\n      this.$element.appendTo($(this.options.appendTo)); // move $element outside of $overlay to prevent error unregisterPlugin()\n      this.$overlay.hide().off().remove();\n    }\n    this.$element.hide().off();\n    this.$anchor.off('.zf');\n    $(window).off(`.zf.reveal:${this.id}`);\n  };\n}\n\nReveal.defaults = {\n  /**\n   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  animationIn: '',\n  /**\n   * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  animationOut: '',\n  /**\n   * Time, in ms, to delay the opening of a modal after a click if no animation used.\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  showDelay: 0,\n  /**\n   * Time, in ms, to delay the closing of a modal after a click if no animation used.\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  hideDelay: 0,\n  /**\n   * Allows a click on the body/overlay to close the modal.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  closeOnClick: true,\n  /**\n   * Allows the modal to close if the user presses the `ESCAPE` key.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  closeOnEsc: true,\n  /**\n   * If true, allows multiple modals to be displayed at once.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  multipleOpened: false,\n  /**\n   * Distance, in pixels, the modal should push down from the top of the screen.\n   * @option\n   * @type {number|string}\n   * @default auto\n   */\n  vOffset: 'auto',\n  /**\n   * Distance, in pixels, the modal should push in from the side of the screen.\n   * @option\n   * @type {number|string}\n   * @default auto\n   */\n  hOffset: 'auto',\n  /**\n   * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  fullScreen: false,\n  /**\n   * Percentage of screen height the modal should push up from the bottom of the view.\n   * @option\n   * @type {number}\n   * @default 10\n   */\n  btmOffsetPct: 10,\n  /**\n   * Allows the modal to generate an overlay div, which will cover the view when modal opens.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  overlay: true,\n  /**\n   * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  resetOnClose: false,\n  /**\n   * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  deepLink: false,\n  /**\n   * Update the browser history with the open modal\n   * @option\n   * @default false\n   */\n  updateHistory: false,\n    /**\n   * Allows the modal to append to custom div.\n   * @option\n   * @type {string}\n   * @default \"body\"\n   */\n  appendTo: \"body\",\n  /**\n   * Allows adding additional class names to the reveal overlay.\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  additionalOverlayClasses: ''\n};\n\nexport {Reveal};\n","'use strict';\n\nimport $ from 'jquery';\nimport { Keyboard } from './foundation.util.keyboard';\nimport { Move } from './foundation.util.motion';\nimport { GetYoDigits, rtl as Rtl } from './foundation.util.core';\n\nimport { Plugin } from './foundation.plugin';\n\nimport { Touch } from './foundation.util.touch';\n\nimport { Triggers } from './foundation.util.triggers';\n/**\n * Slider module.\n * @module foundation.slider\n * @requires foundation.util.motion\n * @requires foundation.util.triggers\n * @requires foundation.util.keyboard\n * @requires foundation.util.touch\n */\n\nclass Slider extends Plugin {\n  /**\n   * Creates a new instance of a slider control.\n   * @class\n   * @name Slider\n   * @param {jQuery} element - jQuery object to make into a slider control.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Slider.defaults, this.$element.data(), options);\n    this.className = 'Slider'; // ie9 back compat\n\n  // Touch and Triggers inits are idempotent, we just need to make sure it's initialied.\n    Touch.init($);\n    Triggers.init($);\n\n    this._init();\n\n    Keyboard.register('Slider', {\n      'ltr': {\n        'ARROW_RIGHT': 'increase',\n        'ARROW_UP': 'increase',\n        'ARROW_DOWN': 'decrease',\n        'ARROW_LEFT': 'decrease',\n        'SHIFT_ARROW_RIGHT': 'increase_fast',\n        'SHIFT_ARROW_UP': 'increase_fast',\n        'SHIFT_ARROW_DOWN': 'decrease_fast',\n        'SHIFT_ARROW_LEFT': 'decrease_fast',\n        'HOME': 'min',\n        'END': 'max'\n      },\n      'rtl': {\n        'ARROW_LEFT': 'increase',\n        'ARROW_RIGHT': 'decrease',\n        'SHIFT_ARROW_LEFT': 'increase_fast',\n        'SHIFT_ARROW_RIGHT': 'decrease_fast'\n      }\n    });\n  }\n\n  /**\n   * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).\n   * @function\n   * @private\n   */\n  _init() {\n    this.inputs = this.$element.find('input');\n    this.handles = this.$element.find('[data-slider-handle]');\n\n    this.$handle = this.handles.eq(0);\n    this.$input = this.inputs.length ? this.inputs.eq(0) : $(`#${this.$handle.attr('aria-controls')}`);\n    this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);\n\n    var isDbl = false,\n        _this = this;\n    if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {\n      this.options.disabled = true;\n      this.$element.addClass(this.options.disabledClass);\n    }\n    if (!this.inputs.length) {\n      this.inputs = $().add(this.$input);\n      this.options.binding = true;\n    }\n\n    this._setInitAttr(0);\n\n    if (this.handles[1]) {\n      this.options.doubleSided = true;\n      this.$handle2 = this.handles.eq(1);\n      this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : $(`#${this.$handle2.attr('aria-controls')}`);\n\n      if (!this.inputs[1]) {\n        this.inputs = this.inputs.add(this.$input2);\n      }\n      isDbl = true;\n\n      // this.$handle.triggerHandler('click.zf.slider');\n      this._setInitAttr(1);\n    }\n\n    // Set handle positions\n    this.setHandles();\n\n    this._events();\n  }\n\n  setHandles() {\n    if(this.handles[1]) {\n      this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true, () => {\n        this._setHandlePos(this.$handle2, this.inputs.eq(1).val(), true);\n      });\n    } else {\n      this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true);\n    }\n  }\n\n  _reflow() {\n    this.setHandles();\n  }\n  /**\n  * @function\n  * @private\n  * @param {Number} value - floating point (the value) to be transformed using to a relative position on the slider (the inverse of _value)\n  */\n  _pctOfBar(value) {\n    var pctOfBar = percent(value - this.options.start, this.options.end - this.options.start)\n\n    switch(this.options.positionValueFunction) {\n    case \"pow\":\n      pctOfBar = this._logTransform(pctOfBar);\n      break;\n    case \"log\":\n      pctOfBar = this._powTransform(pctOfBar);\n      break;\n    }\n\n    return pctOfBar.toFixed(2)\n  }\n\n  /**\n  * @function\n  * @private\n  * @param {Number} pctOfBar - floating point, the relative position of the slider (typically between 0-1) to be transformed to a value\n  */\n  _value(pctOfBar) {\n    switch(this.options.positionValueFunction) {\n    case \"pow\":\n      pctOfBar = this._powTransform(pctOfBar);\n      break;\n    case \"log\":\n      pctOfBar = this._logTransform(pctOfBar);\n      break;\n    }\n    var value = (this.options.end - this.options.start) * pctOfBar + parseFloat(this.options.start);\n\n    return value\n  }\n\n  /**\n  * @function\n  * @private\n  * @param {Number} value - floating point (typically between 0-1) to be transformed using the log function\n  */\n  _logTransform(value) {\n    return baseLog(this.options.nonLinearBase, ((value*(this.options.nonLinearBase-1))+1))\n  }\n\n  /**\n  * @function\n  * @private\n  * @param {Number} value - floating point (typically between 0-1) to be transformed using the power function\n  */\n  _powTransform(value) {\n    return (Math.pow(this.options.nonLinearBase, value) - 1) / (this.options.nonLinearBase - 1)\n  }\n\n  /**\n   * Sets the position of the selected handle and fill bar.\n   * @function\n   * @private\n   * @param {jQuery} $hndl - the selected handle to move.\n   * @param {Number} location - floating point between the start and end values of the slider bar.\n   * @param {Function} cb - callback function to fire on completion.\n   * @fires Slider#moved\n   * @fires Slider#changed\n   */\n  _setHandlePos($hndl, location, noInvert, cb) {\n    // don't move if the slider has been disabled since its initialization\n    if (this.$element.hasClass(this.options.disabledClass)) {\n      return;\n    }\n    //might need to alter that slightly for bars that will have odd number selections.\n    location = parseFloat(location);//on input change events, convert string to number...grumble.\n\n    // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max\n    if (location < this.options.start) { location = this.options.start; }\n    else if (location > this.options.end) { location = this.options.end; }\n\n    var isDbl = this.options.doubleSided;\n\n    //this is for single-handled vertical sliders, it adjusts the value to account for the slider being \"upside-down\"\n    //for click and drag events, it's weird due to the scale(-1, 1) css property\n    if (this.options.vertical && !noInvert) {\n      location = this.options.end - location;\n    }\n\n    if (isDbl) { //this block is to prevent 2 handles from crossing eachother. Could/should be improved.\n      if (this.handles.index($hndl) === 0) {\n        var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));\n        location = location >= h2Val ? h2Val - this.options.step : location;\n      } else {\n        var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));\n        location = location <= h1Val ? h1Val + this.options.step : location;\n      }\n    }\n\n    var _this = this,\n        vert = this.options.vertical,\n        hOrW = vert ? 'height' : 'width',\n        lOrT = vert ? 'top' : 'left',\n        handleDim = $hndl[0].getBoundingClientRect()[hOrW],\n        elemDim = this.$element[0].getBoundingClientRect()[hOrW],\n        //percentage of bar min/max value based on click or drag point\n        pctOfBar = this._pctOfBar(location),\n        //number of actual pixels to shift the handle, based on the percentage obtained above\n        pxToMove = (elemDim - handleDim) * pctOfBar,\n        //percentage of bar to shift the handle\n        movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);\n        //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value\n        location = parseFloat(location.toFixed(this.options.decimal));\n        // declare empty object for css adjustments, only used with 2 handled-sliders\n    var css = {};\n\n    this._setValues($hndl, location);\n\n    // TODO update to calculate based on values set to respective inputs??\n    if (isDbl) {\n      var isLeftHndl = this.handles.index($hndl) === 0,\n          //empty variable, will be used for min-height/width for fill bar\n          dim,\n          //percentage w/h of the handle compared to the slider bar\n          handlePct =  ~~(percent(handleDim, elemDim) * 100);\n      //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar\n      if (isLeftHndl) {\n        //left or top percentage value to apply to the fill bar.\n        css[lOrT] = `${movement}%`;\n        //calculate the new min-height/width for the fill bar.\n        dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;\n        //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider\n        //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.\n        if (cb && typeof cb === 'function') { cb(); }//this is only needed for the initialization of 2 handled sliders\n      } else {\n        //just caching the value of the left/bottom handle's left/top property\n        var handlePos = parseFloat(this.$handle[0].style[lOrT]);\n        //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0\n        //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself\n        dim = movement - (isNaN(handlePos) ? (this.options.initialStart - this.options.start)/((this.options.end-this.options.start)/100) : handlePos) + handlePct;\n      }\n      // assign the min-height/width to our css object\n      css[`min-${hOrW}`] = `${dim}%`;\n    }\n\n    this.$element.one('finished.zf.animate', function() {\n                    /**\n                     * Fires when the handle is done moving.\n                     * @event Slider#moved\n                     */\n                    _this.$element.trigger('moved.zf.slider', [$hndl]);\n                });\n\n    //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.\n    var moveTime = this.$element.data('dragging') ? 1000/60 : this.options.moveTime;\n\n    Move(moveTime, $hndl, function() {\n      // adjusting the left/top property of the handle, based on the percentage calculated above\n      // if movement isNaN, that is because the slider is hidden and we cannot determine handle width,\n      // fall back to next best guess.\n      if (isNaN(movement)) {\n        $hndl.css(lOrT, `${pctOfBar * 100}%`);\n      }\n      else {\n        $hndl.css(lOrT, `${movement}%`);\n      }\n\n      if (!_this.options.doubleSided) {\n        //if single-handled, a simple method to expand the fill bar\n        _this.$fill.css(hOrW, `${pctOfBar * 100}%`);\n      } else {\n        //otherwise, use the css object we created above\n        _this.$fill.css(css);\n      }\n    });\n\n\n    /**\n     * Fires when the value has not been change for a given time.\n     * @event Slider#changed\n     */\n    clearTimeout(_this.timeout);\n    _this.timeout = setTimeout(function(){\n      _this.$element.trigger('changed.zf.slider', [$hndl]);\n    }, _this.options.changedDelay);\n  }\n\n  /**\n   * Sets the initial attribute for the slider element.\n   * @function\n   * @private\n   * @param {Number} idx - index of the current handle/input to use.\n   */\n  _setInitAttr(idx) {\n    var initVal = (idx === 0 ? this.options.initialStart : this.options.initialEnd)\n    var id = this.inputs.eq(idx).attr('id') || GetYoDigits(6, 'slider');\n    this.inputs.eq(idx).attr({\n      'id': id,\n      'max': this.options.end,\n      'min': this.options.start,\n      'step': this.options.step\n    });\n    this.inputs.eq(idx).val(initVal);\n    this.handles.eq(idx).attr({\n      'role': 'slider',\n      'aria-controls': id,\n      'aria-valuemax': this.options.end,\n      'aria-valuemin': this.options.start,\n      'aria-valuenow': initVal,\n      'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',\n      'tabindex': 0\n    });\n  }\n\n  /**\n   * Sets the input and `aria-valuenow` values for the slider element.\n   * @function\n   * @private\n   * @param {jQuery} $handle - the currently selected handle.\n   * @param {Number} val - floating point of the new value.\n   */\n  _setValues($handle, val) {\n    var idx = this.options.doubleSided ? this.handles.index($handle) : 0;\n    this.inputs.eq(idx).val(val);\n    $handle.attr('aria-valuenow', val);\n  }\n\n  /**\n   * Handles events on the slider element.\n   * Calculates the new location of the current handle.\n   * If there are two handles and the bar was clicked, it determines which handle to move.\n   * @function\n   * @private\n   * @param {Object} e - the `event` object passed from the listener.\n   * @param {jQuery} $handle - the current handle to calculate for, if selected.\n   * @param {Number} val - floating point number for the new value of the slider.\n   * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.\n   */\n  _handleEvent(e, $handle, val) {\n    var value, hasVal;\n    if (!val) {//click or drag events\n      e.preventDefault();\n      var _this = this,\n          vertical = this.options.vertical,\n          param = vertical ? 'height' : 'width',\n          direction = vertical ? 'top' : 'left',\n          eventOffset = vertical ? e.pageY : e.pageX,\n          halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,\n          barDim = this.$element[0].getBoundingClientRect()[param],\n          windowScroll = vertical ? $(window).scrollTop() : $(window).scrollLeft();\n\n\n      var elemOffset = this.$element.offset()[direction];\n\n      // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...\n      // best way to guess this is simulated is if clientY == pageY\n      if (e.clientY === e.pageY) { eventOffset = eventOffset + windowScroll; }\n      var eventFromBar = eventOffset - elemOffset;\n      var barXY;\n      if (eventFromBar < 0) {\n        barXY = 0;\n      } else if (eventFromBar > barDim) {\n        barXY = barDim;\n      } else {\n        barXY = eventFromBar;\n      }\n      var offsetPct = percent(barXY, barDim);\n\n      value = this._value(offsetPct);\n\n      // turn everything around for RTL, yay math!\n      if (Rtl() && !this.options.vertical) {value = this.options.end - value;}\n\n      value = _this._adjustValue(null, value);\n      //boolean flag for the setHandlePos fn, specifically for vertical sliders\n      hasVal = false;\n\n      if (!$handle) {//figure out which handle it is, pass it to the next function.\n        var firstHndlPos = absPosition(this.$handle, direction, barXY, param),\n            secndHndlPos = absPosition(this.$handle2, direction, barXY, param);\n            $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;\n      }\n\n    } else {//change event on input\n      value = this._adjustValue(null, val);\n      hasVal = true;\n    }\n\n    this._setHandlePos($handle, value, hasVal);\n  }\n\n  /**\n   * Adjustes value for handle in regard to step value. returns adjusted value\n   * @function\n   * @private\n   * @param {jQuery} $handle - the selected handle.\n   * @param {Number} value - value to adjust. used if $handle is falsy\n   */\n  _adjustValue($handle, value) {\n    var val,\n      step = this.options.step,\n      div = parseFloat(step/2),\n      left, prev_val, next_val;\n    if (!!$handle) {\n      val = parseFloat($handle.attr('aria-valuenow'));\n    }\n    else {\n      val = value;\n    }\n    left = val % step;\n    prev_val = val - left;\n    next_val = prev_val + step;\n    if (left === 0) {\n      return val;\n    }\n    val = val >= prev_val + div ? next_val : prev_val;\n    return val;\n  }\n\n  /**\n   * Adds event listeners to the slider elements.\n   * @function\n   * @private\n   */\n  _events() {\n    this._eventsForHandle(this.$handle);\n    if(this.handles[1]) {\n      this._eventsForHandle(this.$handle2);\n    }\n  }\n\n\n  /**\n   * Adds event listeners a particular handle\n   * @function\n   * @private\n   * @param {jQuery} $handle - the current handle to apply listeners to.\n   */\n  _eventsForHandle($handle) {\n    var _this = this,\n        curHandle,\n        timer;\n\n      this.inputs.off('change.zf.slider').on('change.zf.slider', function(e) {\n        var idx = _this.inputs.index($(this));\n        _this._handleEvent(e, _this.handles.eq(idx), $(this).val());\n      });\n\n      if (this.options.clickSelect) {\n        this.$element.off('click.zf.slider').on('click.zf.slider', function(e) {\n          if (_this.$element.data('dragging')) { return false; }\n\n          if (!$(e.target).is('[data-slider-handle]')) {\n            if (_this.options.doubleSided) {\n              _this._handleEvent(e);\n            } else {\n              _this._handleEvent(e, _this.$handle);\n            }\n          }\n        });\n      }\n\n    if (this.options.draggable) {\n      this.handles.addTouch();\n\n      var $body = $('body');\n      $handle\n        .off('mousedown.zf.slider')\n        .on('mousedown.zf.slider', function(e) {\n          $handle.addClass('is-dragging');\n          _this.$fill.addClass('is-dragging');//\n          _this.$element.data('dragging', true);\n\n          curHandle = $(e.currentTarget);\n\n          $body.on('mousemove.zf.slider', function(e) {\n            e.preventDefault();\n            _this._handleEvent(e, curHandle);\n\n          }).on('mouseup.zf.slider', function(e) {\n            _this._handleEvent(e, curHandle);\n\n            $handle.removeClass('is-dragging');\n            _this.$fill.removeClass('is-dragging');\n            _this.$element.data('dragging', false);\n\n            $body.off('mousemove.zf.slider mouseup.zf.slider');\n          });\n      })\n      // prevent events triggered by touch\n      .on('selectstart.zf.slider touchmove.zf.slider', function(e) {\n        e.preventDefault();\n      });\n    }\n\n    $handle.off('keydown.zf.slider').on('keydown.zf.slider', function(e) {\n      var _$handle = $(this),\n          idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,\n          oldValue = parseFloat(_this.inputs.eq(idx).val()),\n          newValue;\n\n      // handle keyboard event with keyboard util\n      Keyboard.handleKey(e, 'Slider', {\n        decrease: function() {\n          newValue = oldValue - _this.options.step;\n        },\n        increase: function() {\n          newValue = oldValue + _this.options.step;\n        },\n        decrease_fast: function() {\n          newValue = oldValue - _this.options.step * 10;\n        },\n        increase_fast: function() {\n          newValue = oldValue + _this.options.step * 10;\n        },\n        min: function() {\n          newValue = _this.options.start;\n        },\n        max: function() {\n          newValue = _this.options.end;\n        },\n        handled: function() { // only set handle pos when event was handled specially\n          e.preventDefault();\n          _this._setHandlePos(_$handle, newValue, true);\n        }\n      });\n      /*if (newValue) { // if pressed key has special function, update value\n        e.preventDefault();\n        _this._setHandlePos(_$handle, newValue);\n      }*/\n    });\n  }\n\n  /**\n   * Destroys the slider plugin.\n   */\n  _destroy() {\n    this.handles.off('.zf.slider');\n    this.inputs.off('.zf.slider');\n    this.$element.off('.zf.slider');\n\n    clearTimeout(this.timeout);\n  }\n}\n\nSlider.defaults = {\n  /**\n   * Minimum value for the slider scale.\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  start: 0,\n  /**\n   * Maximum value for the slider scale.\n   * @option\n   * @type {number}\n   * @default 100\n   */\n  end: 100,\n  /**\n   * Minimum value change per change event.\n   * @option\n   * @type {number}\n   * @default 1\n   */\n  step: 1,\n  /**\n   * Value at which the handle/input *(left handle/first input)* should be set to on initialization.\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  initialStart: 0,\n  /**\n   * Value at which the right handle/second input should be set to on initialization.\n   * @option\n   * @type {number}\n   * @default 100\n   */\n  initialEnd: 100,\n  /**\n   * Allows the input to be located outside the container and visible. Set to by the JS\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  binding: false,\n  /**\n   * Allows the user to click/tap on the slider bar to select a value.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  clickSelect: true,\n  /**\n   * Set to true and use the `vertical` class to change alignment to vertical.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  vertical: false,\n  /**\n   * Allows the user to drag the slider handle(s) to select a value.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  draggable: true,\n  /**\n   * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  disabled: false,\n  /**\n   * Allows the use of two handles. Double checked by the JS. Changes some logic handling.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  doubleSided: false,\n  /**\n   * Potential future feature.\n   */\n  // steps: 100,\n  /**\n   * Number of decimal places the plugin should go to for floating point precision.\n   * @option\n   * @type {number}\n   * @default 2\n   */\n  decimal: 2,\n  /**\n   * Time delay for dragged elements.\n   */\n  // dragDelay: 0,\n  /**\n   * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.\n   * @option\n   * @type {number}\n   * @default 200\n   */\n  moveTime: 200,//update this if changing the transition time in the sass\n  /**\n   * Class applied to disabled sliders.\n   * @option\n   * @type {string}\n   * @default 'disabled'\n   */\n  disabledClass: 'disabled',\n  /**\n   * Will invert the default layout for a vertical<span data-tooltip title=\"who would do this???\"> </span>slider.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  invertVertical: false,\n  /**\n   * Milliseconds before the `changed.zf-slider` event is triggered after value change.\n   * @option\n   * @type {number}\n   * @default 500\n   */\n  changedDelay: 500,\n  /**\n  * Basevalue for non-linear sliders\n  * @option\n  * @type {number}\n  * @default 5\n  */\n  nonLinearBase: 5,\n  /**\n  * Basevalue for non-linear sliders, possible values are: `'linear'`, `'pow'` & `'log'`. Pow and Log use the nonLinearBase setting.\n  * @option\n  * @type {string}\n  * @default 'linear'\n  */\n  positionValueFunction: 'linear',\n};\n\nfunction percent(frac, num) {\n  return (frac / num);\n}\nfunction absPosition($handle, dir, clickPos, param) {\n  return Math.abs(($handle.position()[dir] + ($handle[param]() / 2)) - clickPos);\n}\nfunction baseLog(base, value) {\n  return Math.log(value)/Math.log(base)\n}\n\nexport {Slider};\n","'use strict';\n\nimport $ from 'jquery';\nimport { GetYoDigits } from './foundation.util.core';\nimport { Plugin } from './foundation.plugin';\n\n/**\n * SmoothScroll module.\n * @module foundation.smooth-scroll\n */\nclass SmoothScroll extends Plugin {\n  /**\n   * Creates a new instance of SmoothScroll.\n   * @class\n   * @name SmoothScroll\n   * @fires SmoothScroll#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n    _setup(element, options) {\n        this.$element = element;\n        this.options = $.extend({}, SmoothScroll.defaults, this.$element.data(), options);\n        this.className = 'SmoothScroll'; // ie9 back compat\n\n        this._init();\n    }\n\n    /**\n     * Initialize the SmoothScroll plugin\n     * @private\n     */\n    _init() {\n        var id = this.$element[0].id || GetYoDigits(6, 'smooth-scroll');\n        var _this = this;\n        this.$element.attr({\n            'id': id\n        });\n\n        this._events();\n    }\n\n    /**\n     * Initializes events for SmoothScroll.\n     * @private\n     */\n    _events() {\n        var _this = this;\n\n        // click handler function.\n        var handleLinkClick = function(e) {\n            // exit function if the event source isn't coming from an anchor with href attribute starts with '#'\n            if(!$(this).is('a[href^=\"#\"]'))  {\n                return false;\n            }\n\n            var arrival = this.getAttribute('href');\n\n            _this._inTransition = true;\n\n            SmoothScroll.scrollToLoc(arrival, _this.options, function() {\n                _this._inTransition = false;\n            });\n\n            e.preventDefault();\n        };\n\n        this.$element.on('click.zf.smoothScroll', handleLinkClick)\n        this.$element.on('click.zf.smoothScroll', 'a[href^=\"#\"]', handleLinkClick);\n    }\n\n    /**\n     * Function to scroll to a given location on the page.\n     * @param {String} loc - A properly formatted jQuery id selector. Example: '#foo'\n     * @param {Object} options - The options to use.\n     * @param {Function} callback - The callback function.\n     * @static\n     * @function\n     */\n    static scrollToLoc(loc, options = SmoothScroll.defaults, callback) {\n        // Do nothing if target does not exist to prevent errors\n        if (!$(loc).length) {\n            return false;\n        }\n\n        var scrollPos = Math.round($(loc).offset().top - options.threshold / 2 - options.offset);\n\n        $('html, body').stop(true).animate(\n            { scrollTop: scrollPos },\n            options.animationDuration,\n            options.animationEasing,\n            function() {\n                if(callback && typeof callback == \"function\"){\n                    callback();\n                }\n            }\n        );\n    }\n}\n\n/**\n * Default settings for plugin.\n */\nSmoothScroll.defaults = {\n  /**\n   * Amount of time, in ms, the animated scrolling should take between locations.\n   * @option\n   * @type {number}\n   * @default 500\n   */\n  animationDuration: 500,\n  /**\n   * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.\n   * @option\n   * @type {string}\n   * @default 'linear'\n   * @see {@link https://api.jquery.com/animate|Jquery animate}\n   */\n  animationEasing: 'linear',\n  /**\n   * Number of pixels to use as a marker for location changes.\n   * @option\n   * @type {number}\n   * @default 50\n   */\n  threshold: 50,\n  /**\n   * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  offset: 0\n}\n\nexport {SmoothScroll}\n","'use strict';\n\nimport $ from 'jquery';\nimport { GetYoDigits } from './foundation.util.core';\nimport { MediaQuery } from './foundation.util.mediaQuery';\nimport { Plugin } from './foundation.plugin';\nimport { Triggers } from './foundation.util.triggers';\n\n/**\n * Sticky module.\n * @module foundation.sticky\n * @requires foundation.util.triggers\n * @requires foundation.util.mediaQuery\n */\n\nclass Sticky extends Plugin {\n  /**\n   * Creates a new instance of a sticky thing.\n   * @class\n   * @name Sticky\n   * @param {jQuery} element - jQuery object to make sticky.\n   * @param {Object} options - options object passed when creating the element programmatically.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Sticky.defaults, this.$element.data(), options);\n    this.className = 'Sticky'; // ie9 back compat\n\n    // Triggers init is idempotent, just need to make sure it is initialized\n    Triggers.init($);\n\n    this._init();\n  }\n\n  /**\n   * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes\n   * @function\n   * @private\n   */\n  _init() {\n    MediaQuery._init();\n\n    var $parent = this.$element.parent('[data-sticky-container]'),\n        id = this.$element[0].id || GetYoDigits(6, 'sticky'),\n        _this = this;\n\n    if($parent.length){\n      this.$container = $parent;\n    } else {\n      this.wasWrapped = true;\n      this.$element.wrap(this.options.container);\n      this.$container = this.$element.parent();\n    }\n    this.$container.addClass(this.options.containerClass);\n\n    this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id, 'data-mutate': id });\n    if (this.options.anchor !== '') {\n        $('#' + _this.options.anchor).attr({ 'data-mutate': id });\n    }\n\n    this.scrollCount = this.options.checkEvery;\n    this.isStuck = false;\n    $(window).one('load.zf.sticky', function(){\n      //We calculate the container height to have correct values for anchor points offset calculation.\n      _this.containerHeight = _this.$element.css(\"display\") == \"none\" ? 0 : _this.$element[0].getBoundingClientRect().height;\n      _this.$container.css('height', _this.containerHeight);\n      _this.elemHeight = _this.containerHeight;\n      if(_this.options.anchor !== ''){\n        _this.$anchor = $('#' + _this.options.anchor);\n      }else{\n        _this._parsePoints();\n      }\n\n      _this._setSizes(function(){\n        var scroll = window.pageYOffset;\n        _this._calc(false, scroll);\n        //Unstick the element will ensure that proper classes are set.\n        if (!_this.isStuck) {\n          _this._removeSticky((scroll >= _this.topPoint) ? false : true);\n        }\n      });\n      _this._events(id.split('-').reverse().join('-'));\n    });\n  }\n\n  /**\n   * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.\n   * @function\n   * @private\n   */\n  _parsePoints() {\n    var top = this.options.topAnchor == \"\" ? 1 : this.options.topAnchor,\n        btm = this.options.btmAnchor== \"\" ? document.documentElement.scrollHeight : this.options.btmAnchor,\n        pts = [top, btm],\n        breaks = {};\n    for (var i = 0, len = pts.length; i < len && pts[i]; i++) {\n      var pt;\n      if (typeof pts[i] === 'number') {\n        pt = pts[i];\n      } else {\n        var place = pts[i].split(':'),\n            anchor = $(`#${place[0]}`);\n\n        pt = anchor.offset().top;\n        if (place[1] && place[1].toLowerCase() === 'bottom') {\n          pt += anchor[0].getBoundingClientRect().height;\n        }\n      }\n      breaks[i] = pt;\n    }\n\n\n    this.points = breaks;\n    return;\n  }\n\n  /**\n   * Adds event handlers for the scrolling element.\n   * @private\n   * @param {String} id - pseudo-random id for unique scroll event listener.\n   */\n  _events(id) {\n    var _this = this,\n        scrollListener = this.scrollListener = `scroll.zf.${id}`;\n    if (this.isOn) { return; }\n    if (this.canStick) {\n      this.isOn = true;\n      $(window).off(scrollListener)\n               .on(scrollListener, function(e) {\n                 if (_this.scrollCount === 0) {\n                   _this.scrollCount = _this.options.checkEvery;\n                   _this._setSizes(function() {\n                     _this._calc(false, window.pageYOffset);\n                   });\n                 } else {\n                   _this.scrollCount--;\n                   _this._calc(false, window.pageYOffset);\n                 }\n              });\n    }\n\n    this.$element.off('resizeme.zf.trigger')\n                 .on('resizeme.zf.trigger', function(e, el) {\n                    _this._eventsHandler(id);\n    });\n\n    this.$element.on('mutateme.zf.trigger', function (e, el) {\n        _this._eventsHandler(id);\n    });\n\n    if(this.$anchor) {\n      this.$anchor.on('mutateme.zf.trigger', function (e, el) {\n          _this._eventsHandler(id);\n      });\n    }\n  }\n\n  /**\n   * Handler for events.\n   * @private\n   * @param {String} id - pseudo-random id for unique scroll event listener.\n   */\n  _eventsHandler(id) {\n       var _this = this,\n        scrollListener = this.scrollListener = `scroll.zf.${id}`;\n\n       _this._setSizes(function() {\n       _this._calc(false);\n       if (_this.canStick) {\n         if (!_this.isOn) {\n           _this._events(id);\n         }\n       } else if (_this.isOn) {\n         _this._pauseListeners(scrollListener);\n       }\n     });\n  }\n\n  /**\n   * Removes event handlers for scroll and change events on anchor.\n   * @fires Sticky#pause\n   * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`\n   */\n  _pauseListeners(scrollListener) {\n    this.isOn = false;\n    $(window).off(scrollListener);\n\n    /**\n     * Fires when the plugin is paused due to resize event shrinking the view.\n     * @event Sticky#pause\n     * @private\n     */\n     this.$element.trigger('pause.zf.sticky');\n  }\n\n  /**\n   * Called on every `scroll` event and on `_init`\n   * fires functions based on booleans and cached values\n   * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.\n   * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.\n   */\n  _calc(checkSizes, scroll) {\n    if (checkSizes) { this._setSizes(); }\n\n    if (!this.canStick) {\n      if (this.isStuck) {\n        this._removeSticky(true);\n      }\n      return false;\n    }\n\n    if (!scroll) { scroll = window.pageYOffset; }\n\n    if (scroll >= this.topPoint) {\n      if (scroll <= this.bottomPoint) {\n        if (!this.isStuck) {\n          this._setSticky();\n        }\n      } else {\n        if (this.isStuck) {\n          this._removeSticky(false);\n        }\n      }\n    } else {\n      if (this.isStuck) {\n        this._removeSticky(true);\n      }\n    }\n  }\n\n  /**\n   * Causes the $element to become stuck.\n   * Adds `position: fixed;`, and helper classes.\n   * @fires Sticky#stuckto\n   * @function\n   * @private\n   */\n  _setSticky() {\n    var _this = this,\n        stickTo = this.options.stickTo,\n        mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',\n        notStuckTo = stickTo === 'top' ? 'bottom' : 'top',\n        css = {};\n\n    css[mrgn] = `${this.options[mrgn]}em`;\n    css[stickTo] = 0;\n    css[notStuckTo] = 'auto';\n    this.isStuck = true;\n    this.$element.removeClass(`is-anchored is-at-${notStuckTo}`)\n                 .addClass(`is-stuck is-at-${stickTo}`)\n                 .css(css)\n                 /**\n                  * Fires when the $element has become `position: fixed;`\n                  * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`\n                  * @event Sticky#stuckto\n                  */\n                 .trigger(`sticky.zf.stuckto:${stickTo}`);\n    this.$element.on(\"transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd\", function() {\n      _this._setSizes();\n    });\n  }\n\n  /**\n   * Causes the $element to become unstuck.\n   * Removes `position: fixed;`, and helper classes.\n   * Adds other helper classes.\n   * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.\n   * @fires Sticky#unstuckfrom\n   * @private\n   */\n  _removeSticky(isTop) {\n    var stickTo = this.options.stickTo,\n        stickToTop = stickTo === 'top',\n        css = {},\n        anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,\n        mrgn = stickToTop ? 'marginTop' : 'marginBottom',\n        notStuckTo = stickToTop ? 'bottom' : 'top',\n        topOrBottom = isTop ? 'top' : 'bottom';\n\n    css[mrgn] = 0;\n\n    css['bottom'] = 'auto';\n    if(isTop) {\n      css['top'] = 0;\n    } else {\n      css['top'] = anchorPt;\n    }\n\n    this.isStuck = false;\n    this.$element.removeClass(`is-stuck is-at-${stickTo}`)\n                 .addClass(`is-anchored is-at-${topOrBottom}`)\n                 .css(css)\n                 /**\n                  * Fires when the $element has become anchored.\n                  * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`\n                  * @event Sticky#unstuckfrom\n                  */\n                 .trigger(`sticky.zf.unstuckfrom:${topOrBottom}`);\n  }\n\n  /**\n   * Sets the $element and $container sizes for plugin.\n   * Calls `_setBreakPoints`.\n   * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.\n   * @private\n   */\n  _setSizes(cb) {\n    this.canStick = MediaQuery.is(this.options.stickyOn);\n    if (!this.canStick) {\n      if (cb && typeof cb === 'function') { cb(); }\n    }\n    var _this = this,\n        newElemWidth = this.$container[0].getBoundingClientRect().width,\n        comp = window.getComputedStyle(this.$container[0]),\n        pdngl = parseInt(comp['padding-left'], 10),\n        pdngr = parseInt(comp['padding-right'], 10);\n\n    if (this.$anchor && this.$anchor.length) {\n      this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;\n    } else {\n      this._parsePoints();\n    }\n\n    this.$element.css({\n      'max-width': `${newElemWidth - pdngl - pdngr}px`\n    });\n\n    var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;\n    if (this.$element.css(\"display\") == \"none\") {\n      newContainerHeight = 0;\n    }\n    this.containerHeight = newContainerHeight;\n    this.$container.css({\n      height: newContainerHeight\n    });\n    this.elemHeight = newContainerHeight;\n\n    if (!this.isStuck) {\n      if (this.$element.hasClass('is-at-bottom')) {\n        var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;\n        this.$element.css('top', anchorPt);\n      }\n    }\n\n    this._setBreakPoints(newContainerHeight, function() {\n      if (cb && typeof cb === 'function') { cb(); }\n    });\n  }\n\n  /**\n   * Sets the upper and lower breakpoints for the element to become sticky/unsticky.\n   * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.\n   * @param {Function} cb - optional callback function to be called on completion.\n   * @private\n   */\n  _setBreakPoints(elemHeight, cb) {\n    if (!this.canStick) {\n      if (cb && typeof cb === 'function') { cb(); }\n      else { return false; }\n    }\n    var mTop = emCalc(this.options.marginTop),\n        mBtm = emCalc(this.options.marginBottom),\n        topPoint = this.points ? this.points[0] : this.$anchor.offset().top,\n        bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,\n        // topPoint = this.$anchor.offset().top || this.points[0],\n        // bottomPoint = topPoint + this.anchorHeight || this.points[1],\n        winHeight = window.innerHeight;\n\n    if (this.options.stickTo === 'top') {\n      topPoint -= mTop;\n      bottomPoint -= (elemHeight + mTop);\n    } else if (this.options.stickTo === 'bottom') {\n      topPoint -= (winHeight - (elemHeight + mBtm));\n      bottomPoint -= (winHeight - mBtm);\n    } else {\n      //this would be the stickTo: both option... tricky\n    }\n\n    this.topPoint = topPoint;\n    this.bottomPoint = bottomPoint;\n\n    if (cb && typeof cb === 'function') { cb(); }\n  }\n\n  /**\n   * Destroys the current sticky element.\n   * Resets the element to the top position first.\n   * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.\n   * @function\n   */\n  _destroy() {\n    this._removeSticky(true);\n\n    this.$element.removeClass(`${this.options.stickyClass} is-anchored is-at-top`)\n                 .css({\n                   height: '',\n                   top: '',\n                   bottom: '',\n                   'max-width': ''\n                 })\n                 .off('resizeme.zf.trigger')\n                 .off('mutateme.zf.trigger');\n    if (this.$anchor && this.$anchor.length) {\n      this.$anchor.off('change.zf.sticky');\n    }\n    $(window).off(this.scrollListener);\n\n    if (this.wasWrapped) {\n      this.$element.unwrap();\n    } else {\n      this.$container.removeClass(this.options.containerClass)\n                     .css({\n                       height: ''\n                     });\n    }\n  }\n}\n\nSticky.defaults = {\n  /**\n   * Customizable container template. Add your own classes for styling and sizing.\n   * @option\n   * @type {string}\n   * @default '&lt;div data-sticky-container&gt;&lt;/div&gt;'\n   */\n  container: '<div data-sticky-container></div>',\n  /**\n   * Location in the view the element sticks to. Can be `'top'` or `'bottom'`.\n   * @option\n   * @type {string}\n   * @default 'top'\n   */\n  stickTo: 'top',\n  /**\n   * If anchored to a single element, the id of that element.\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  anchor: '',\n  /**\n   * If using more than one element as anchor points, the id of the top anchor.\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  topAnchor: '',\n  /**\n   * If using more than one element as anchor points, the id of the bottom anchor.\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  btmAnchor: '',\n  /**\n   * Margin, in `em`'s to apply to the top of the element when it becomes sticky.\n   * @option\n   * @type {number}\n   * @default 1\n   */\n  marginTop: 1,\n  /**\n   * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.\n   * @option\n   * @type {number}\n   * @default 1\n   */\n  marginBottom: 1,\n  /**\n   * Breakpoint string that is the minimum screen size an element should become sticky.\n   * @option\n   * @type {string}\n   * @default 'medium'\n   */\n  stickyOn: 'medium',\n  /**\n   * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.\n   * @option\n   * @type {string}\n   * @default 'sticky'\n   */\n  stickyClass: 'sticky',\n  /**\n   * Class applied to sticky container. Foundation defaults to `sticky-container`.\n   * @option\n   * @type {string}\n   * @default 'sticky-container'\n   */\n  containerClass: 'sticky-container',\n  /**\n   * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.\n   * @option\n   * @type {number}\n   * @default -1\n   */\n  checkEvery: -1\n};\n\n/**\n * Helper function to calculate em values\n * @param Number {em} - number of em's to calculate into pixels\n */\nfunction emCalc(em) {\n  return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;\n}\n\nexport {Sticky};\n","'use strict';\n\nimport $ from 'jquery';\nimport { Keyboard } from './foundation.util.keyboard';\nimport { onImagesLoaded } from './foundation.util.imageLoader';\nimport { Plugin } from './foundation.plugin';\n/**\n * Tabs module.\n * @module foundation.tabs\n * @requires foundation.util.keyboard\n * @requires foundation.util.imageLoader if tabs contain images\n */\n\nclass Tabs extends Plugin {\n  /**\n   * Creates a new instance of tabs.\n   * @class\n   * @name Tabs\n   * @fires Tabs#init\n   * @param {jQuery} element - jQuery object to make into tabs.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Tabs.defaults, this.$element.data(), options);\n    this.className = 'Tabs'; // ie9 back compat\n\n    this._init();\n    Keyboard.register('Tabs', {\n      'ENTER': 'open',\n      'SPACE': 'open',\n      'ARROW_RIGHT': 'next',\n      'ARROW_UP': 'previous',\n      'ARROW_DOWN': 'next',\n      'ARROW_LEFT': 'previous'\n      // 'TAB': 'next',\n      // 'SHIFT_TAB': 'previous'\n    });\n  }\n\n  /**\n   * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.\n   * @private\n   */\n  _init() {\n    var _this = this;\n\n    this.$element.attr({'role': 'tablist'});\n    this.$tabTitles = this.$element.find(`.${this.options.linkClass}`);\n    this.$tabContent = $(`[data-tabs-content=\"${this.$element[0].id}\"]`);\n\n    this.$tabTitles.each(function(){\n      var $elem = $(this),\n          $link = $elem.find('a'),\n          isActive = $elem.hasClass(`${_this.options.linkActiveClass}`),\n          hash = $link.attr('data-tabs-target') || $link[0].hash.slice(1),\n          linkId = $link[0].id ? $link[0].id : `${hash}-label`,\n          $tabContent = $(`#${hash}`);\n\n      $elem.attr({'role': 'presentation'});\n\n      $link.attr({\n        'role': 'tab',\n        'aria-controls': hash,\n        'aria-selected': isActive,\n        'id': linkId,\n        'tabindex': isActive ? '0' : '-1'\n      });\n\n      $tabContent.attr({\n        'role': 'tabpanel',\n        'aria-labelledby': linkId\n      });\n\n      if(!isActive) {\n        $tabContent.attr('aria-hidden', 'true');\n      }\n\n      if(isActive && _this.options.autoFocus){\n        $(window).load(function() {\n          $('html, body').animate({ scrollTop: $elem.offset().top }, _this.options.deepLinkSmudgeDelay, () => {\n            $link.focus();\n          });\n        });\n      }\n    });\n    if(this.options.matchHeight) {\n      var $images = this.$tabContent.find('img');\n\n      if ($images.length) {\n        onImagesLoaded($images, this._setHeight.bind(this));\n      } else {\n        this._setHeight();\n      }\n    }\n\n     //current context-bound function to open tabs on page load or history popstate\n    this._checkDeepLink = () => {\n      var anchor = window.location.hash;\n      //need a hash and a relevant anchor in this tabset\n      if(anchor.length) {\n        var $link = this.$element.find('[href$=\"'+anchor+'\"]');\n        if ($link.length) {\n          this.selectTab($(anchor), true);\n\n          //roll up a little to show the titles\n          if (this.options.deepLinkSmudge) {\n            var offset = this.$element.offset();\n            $('html, body').animate({ scrollTop: offset.top }, this.options.deepLinkSmudgeDelay);\n          }\n\n          /**\n            * Fires when the zplugin has deeplinked at pageload\n            * @event Tabs#deeplink\n            */\n           this.$element.trigger('deeplink.zf.tabs', [$link, $(anchor)]);\n         }\n       }\n     }\n\n    //use browser to open a tab, if it exists in this tabset\n    if (this.options.deepLink) {\n      this._checkDeepLink();\n    }\n\n    this._events();\n  }\n\n  /**\n   * Adds event handlers for items within the tabs.\n   * @private\n   */\n  _events() {\n    this._addKeyHandler();\n    this._addClickHandler();\n    this._setHeightMqHandler = null;\n\n    if (this.options.matchHeight) {\n      this._setHeightMqHandler = this._setHeight.bind(this);\n\n      $(window).on('changed.zf.mediaquery', this._setHeightMqHandler);\n    }\n\n    if(this.options.deepLink) {\n      $(window).on('popstate', this._checkDeepLink);\n    }\n  }\n\n  /**\n   * Adds click handlers for items within the tabs.\n   * @private\n   */\n  _addClickHandler() {\n    var _this = this;\n\n    this.$element\n      .off('click.zf.tabs')\n      .on('click.zf.tabs', `.${this.options.linkClass}`, function(e){\n        e.preventDefault();\n        e.stopPropagation();\n        _this._handleTabChange($(this));\n      });\n  }\n\n  /**\n   * Adds keyboard event handlers for items within the tabs.\n   * @private\n   */\n  _addKeyHandler() {\n    var _this = this;\n\n    this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function(e){\n      if (e.which === 9) return;\n\n\n      var $element = $(this),\n        $elements = $element.parent('ul').children('li'),\n        $prevElement,\n        $nextElement;\n\n      $elements.each(function(i) {\n        if ($(this).is($element)) {\n          if (_this.options.wrapOnKeys) {\n            $prevElement = i === 0 ? $elements.last() : $elements.eq(i-1);\n            $nextElement = i === $elements.length -1 ? $elements.first() : $elements.eq(i+1);\n          } else {\n            $prevElement = $elements.eq(Math.max(0, i-1));\n            $nextElement = $elements.eq(Math.min(i+1, $elements.length-1));\n          }\n          return;\n        }\n      });\n\n      // handle keyboard event with keyboard util\n      Keyboard.handleKey(e, 'Tabs', {\n        open: function() {\n          $element.find('[role=\"tab\"]').focus();\n          _this._handleTabChange($element);\n        },\n        previous: function() {\n          $prevElement.find('[role=\"tab\"]').focus();\n          _this._handleTabChange($prevElement);\n        },\n        next: function() {\n          $nextElement.find('[role=\"tab\"]').focus();\n          _this._handleTabChange($nextElement);\n        },\n        handled: function() {\n          e.stopPropagation();\n          e.preventDefault();\n        }\n      });\n    });\n  }\n\n  /**\n   * Opens the tab `$targetContent` defined by `$target`. Collapses active tab.\n   * @param {jQuery} $target - Tab to open.\n   * @param {boolean} historyHandled - browser has already handled a history update\n   * @fires Tabs#change\n   * @function\n   */\n  _handleTabChange($target, historyHandled) {\n\n    /**\n     * Check for active class on target. Collapse if exists.\n     */\n    if ($target.hasClass(`${this.options.linkActiveClass}`)) {\n        if(this.options.activeCollapse) {\n            this._collapseTab($target);\n\n           /**\n            * Fires when the zplugin has successfully collapsed tabs.\n            * @event Tabs#collapse\n            */\n            this.$element.trigger('collapse.zf.tabs', [$target]);\n        }\n        return;\n    }\n\n    var $oldTab = this.$element.\n          find(`.${this.options.linkClass}.${this.options.linkActiveClass}`),\n          $tabLink = $target.find('[role=\"tab\"]'),\n          hash = $tabLink.attr('data-tabs-target') || $tabLink[0].hash.slice(1),\n          $targetContent = this.$tabContent.find(`#${hash}`);\n\n    //close old tab\n    this._collapseTab($oldTab);\n\n    //open new tab\n    this._openTab($target);\n\n    //either replace or update browser history\n    if (this.options.deepLink && !historyHandled) {\n      var anchor = $target.find('a').attr('href');\n\n      if (this.options.updateHistory) {\n        history.pushState({}, '', anchor);\n      } else {\n        history.replaceState({}, '', anchor);\n      }\n    }\n\n    /**\n     * Fires when the plugin has successfully changed tabs.\n     * @event Tabs#change\n     */\n    this.$element.trigger('change.zf.tabs', [$target, $targetContent]);\n\n    //fire to children a mutation event\n    $targetContent.find(\"[data-mutate]\").trigger(\"mutateme.zf.trigger\");\n  }\n\n  /**\n   * Opens the tab `$targetContent` defined by `$target`.\n   * @param {jQuery} $target - Tab to Open.\n   * @function\n   */\n  _openTab($target) {\n      var $tabLink = $target.find('[role=\"tab\"]'),\n          hash = $tabLink.attr('data-tabs-target') || $tabLink[0].hash.slice(1),\n          $targetContent = this.$tabContent.find(`#${hash}`);\n\n      $target.addClass(`${this.options.linkActiveClass}`);\n\n      $tabLink.attr({\n        'aria-selected': 'true',\n        'tabindex': '0'\n      });\n\n      $targetContent\n        .addClass(`${this.options.panelActiveClass}`).removeAttr('aria-hidden');\n  }\n\n  /**\n   * Collapses `$targetContent` defined by `$target`.\n   * @param {jQuery} $target - Tab to Open.\n   * @function\n   */\n  _collapseTab($target) {\n    var $target_anchor = $target\n      .removeClass(`${this.options.linkActiveClass}`)\n      .find('[role=\"tab\"]')\n      .attr({\n        'aria-selected': 'false',\n        'tabindex': -1\n      });\n\n    $(`#${$target_anchor.attr('aria-controls')}`)\n      .removeClass(`${this.options.panelActiveClass}`)\n      .attr({ 'aria-hidden': 'true' })\n  }\n\n  /**\n   * Public method for selecting a content pane to display.\n   * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.\n   * @param {boolean} historyHandled - browser has already handled a history update\n   * @function\n   */\n  selectTab(elem, historyHandled) {\n    var idStr;\n\n    if (typeof elem === 'object') {\n      idStr = elem[0].id;\n    } else {\n      idStr = elem;\n    }\n\n    if (idStr.indexOf('#') < 0) {\n      idStr = `#${idStr}`;\n    }\n\n    var $target = this.$tabTitles.find(`[href$=\"${idStr}\"]`).parent(`.${this.options.linkClass}`);\n\n    this._handleTabChange($target, historyHandled);\n  };\n  /**\n   * Sets the height of each panel to the height of the tallest panel.\n   * If enabled in options, gets called on media query change.\n   * If loading content via external source, can be called directly or with _reflow.\n   * If enabled with `data-match-height=\"true\"`, tabs sets to equal height\n   * @function\n   * @private\n   */\n  _setHeight() {\n    var max = 0,\n        _this = this; // Lock down the `this` value for the root tabs object\n\n    this.$tabContent\n      .find(`.${this.options.panelClass}`)\n      .css('height', '')\n      .each(function() {\n\n        var panel = $(this),\n            isActive = panel.hasClass(`${_this.options.panelActiveClass}`); // get the options from the parent instead of trying to get them from the child\n\n        if (!isActive) {\n          panel.css({'visibility': 'hidden', 'display': 'block'});\n        }\n\n        var temp = this.getBoundingClientRect().height;\n\n        if (!isActive) {\n          panel.css({\n            'visibility': '',\n            'display': ''\n          });\n        }\n\n        max = temp > max ? temp : max;\n      })\n      .css('height', `${max}px`);\n  }\n\n  /**\n   * Destroys an instance of an tabs.\n   * @fires Tabs#destroyed\n   */\n  _destroy() {\n    this.$element\n      .find(`.${this.options.linkClass}`)\n      .off('.zf.tabs').hide().end()\n      .find(`.${this.options.panelClass}`)\n      .hide();\n\n    if (this.options.matchHeight) {\n      if (this._setHeightMqHandler != null) {\n         $(window).off('changed.zf.mediaquery', this._setHeightMqHandler);\n      }\n    }\n\n    if (this.options.deepLink) {\n      $(window).off('popstate', this._checkDeepLink);\n    }\n\n  }\n}\n\nTabs.defaults = {\n  /**\n   * Allows the window to scroll to content of pane specified by hash anchor\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  deepLink: false,\n\n  /**\n   * Adjust the deep link scroll to make sure the top of the tab panel is visible\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  deepLinkSmudge: false,\n\n  /**\n   * Animation time (ms) for the deep link adjustment\n   * @option\n   * @type {number}\n   * @default 300\n   */\n  deepLinkSmudgeDelay: 300,\n\n  /**\n   * Update the browser history with the open tab\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  updateHistory: false,\n\n  /**\n   * Allows the window to scroll to content of active pane on load if set to true.\n   * Not recommended if more than one tab panel per page.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  autoFocus: false,\n\n  /**\n   * Allows keyboard input to 'wrap' around the tab links.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  wrapOnKeys: true,\n\n  /**\n   * Allows the tab content panes to match heights if set to true.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  matchHeight: false,\n\n  /**\n   * Allows active tabs to collapse when clicked.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  activeCollapse: false,\n\n  /**\n   * Class applied to `li`'s in tab link list.\n   * @option\n   * @type {string}\n   * @default 'tabs-title'\n   */\n  linkClass: 'tabs-title',\n\n  /**\n   * Class applied to the active `li` in tab link list.\n   * @option\n   * @type {string}\n   * @default 'is-active'\n   */\n  linkActiveClass: 'is-active',\n\n  /**\n   * Class applied to the content containers.\n   * @option\n   * @type {string}\n   * @default 'tabs-panel'\n   */\n  panelClass: 'tabs-panel',\n\n  /**\n   * Class applied to the active content container.\n   * @option\n   * @type {string}\n   * @default 'is-active'\n   */\n  panelActiveClass: 'is-active'\n};\n\nexport {Tabs};\n","'use strict';\n\nimport $ from 'jquery';\nimport { Motion } from './foundation.util.motion';\nimport { Plugin } from './foundation.plugin';\nimport { Triggers } from './foundation.util.triggers';\n\n/**\n * Toggler module.\n * @module foundation.toggler\n * @requires foundation.util.motion\n * @requires foundation.util.triggers\n */\n\nclass Toggler extends Plugin {\n  /**\n   * Creates a new instance of Toggler.\n   * @class\n   * @name Toggler\n   * @fires Toggler#init\n   * @param {Object} element - jQuery object to add the trigger to.\n   * @param {Object} options - Overrides to the default plugin settings.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Toggler.defaults, element.data(), options);\n    this.className = '';\n    this.className = 'Toggler'; // ie9 back compat\n\n    // Triggers init is idempotent, just need to make sure it is initialized\n    Triggers.init($);\n\n    this._init();\n    this._events();\n  }\n\n  /**\n   * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.\n   * @function\n   * @private\n   */\n  _init() {\n    var input;\n    // Parse animation classes if they were set\n    if (this.options.animate) {\n      input = this.options.animate.split(' ');\n\n      this.animationIn = input[0];\n      this.animationOut = input[1] || null;\n    }\n    // Otherwise, parse toggle class\n    else {\n      input = this.$element.data('toggler');\n      // Allow for a . at the beginning of the string\n      this.className = input[0] === '.' ? input.slice(1) : input;\n    }\n\n    // Add ARIA attributes to triggers\n    var id = this.$element[0].id;\n    $(`[data-open=\"${id}\"], [data-close=\"${id}\"], [data-toggle=\"${id}\"]`)\n      .attr('aria-controls', id);\n    // If the target is hidden, add aria-hidden\n    this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);\n  }\n\n  /**\n   * Initializes events for the toggle trigger.\n   * @function\n   * @private\n   */\n  _events() {\n    this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));\n  }\n\n  /**\n   * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was \"on\" or \"off\".\n   * @function\n   * @fires Toggler#on\n   * @fires Toggler#off\n   */\n  toggle() {\n    this[ this.options.animate ? '_toggleAnimate' : '_toggleClass']();\n  }\n\n  _toggleClass() {\n    this.$element.toggleClass(this.className);\n\n    var isOn = this.$element.hasClass(this.className);\n    if (isOn) {\n      /**\n       * Fires if the target element has the class after a toggle.\n       * @event Toggler#on\n       */\n      this.$element.trigger('on.zf.toggler');\n    }\n    else {\n      /**\n       * Fires if the target element does not have the class after a toggle.\n       * @event Toggler#off\n       */\n      this.$element.trigger('off.zf.toggler');\n    }\n\n    this._updateARIA(isOn);\n    this.$element.find('[data-mutate]').trigger('mutateme.zf.trigger');\n  }\n\n  _toggleAnimate() {\n    var _this = this;\n\n    if (this.$element.is(':hidden')) {\n      Motion.animateIn(this.$element, this.animationIn, function() {\n        _this._updateARIA(true);\n        this.trigger('on.zf.toggler');\n        this.find('[data-mutate]').trigger('mutateme.zf.trigger');\n      });\n    }\n    else {\n      Motion.animateOut(this.$element, this.animationOut, function() {\n        _this._updateARIA(false);\n        this.trigger('off.zf.toggler');\n        this.find('[data-mutate]').trigger('mutateme.zf.trigger');\n      });\n    }\n  }\n\n  _updateARIA(isOn) {\n    this.$element.attr('aria-expanded', isOn ? true : false);\n  }\n\n  /**\n   * Destroys the instance of Toggler on the element.\n   * @function\n   */\n  _destroy() {\n    this.$element.off('.zf.toggler');\n  }\n}\n\nToggler.defaults = {\n  /**\n   * Tells the plugin if the element should animated when toggled.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  animate: false\n};\n\nexport {Toggler};\n","'use strict';\n\nimport $ from 'jquery';\n\nimport { GetYoDigits } from './foundation.util.core';\nimport { MediaQuery } from './foundation.util.mediaQuery';\nimport { Triggers } from './foundation.util.triggers';\nimport { Positionable } from './foundation.positionable';\n\n/**\n * Tooltip module.\n * @module foundation.tooltip\n * @requires foundation.util.box\n * @requires foundation.util.mediaQuery\n * @requires foundation.util.triggers\n */\n\nclass Tooltip extends Positionable {\n  /**\n   * Creates a new instance of a Tooltip.\n   * @class\n   * @name Tooltip\n   * @fires Tooltip#init\n   * @param {jQuery} element - jQuery object to attach a tooltip to.\n   * @param {Object} options - object to extend the default configuration.\n   */\n  _setup(element, options) {\n    this.$element = element;\n    this.options = $.extend({}, Tooltip.defaults, this.$element.data(), options);\n    this.className = 'Tooltip'; // ie9 back compat\n\n    this.isActive = false;\n    this.isClick = false;\n\n    // Triggers init is idempotent, just need to make sure it is initialized\n    Triggers.init($);\n\n    this._init();\n  }\n\n  /**\n   * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.\n   * @private\n   */\n  _init() {\n    MediaQuery._init();\n    var elemId = this.$element.attr('aria-describedby') || GetYoDigits(6, 'tooltip');\n\n    this.options.tipText = this.options.tipText || this.$element.attr('title');\n    this.template = this.options.template ? $(this.options.template) : this._buildTemplate(elemId);\n\n    if (this.options.allowHtml) {\n      this.template.appendTo(document.body)\n        .html(this.options.tipText)\n        .hide();\n    } else {\n      this.template.appendTo(document.body)\n        .text(this.options.tipText)\n        .hide();\n    }\n\n    this.$element.attr({\n      'title': '',\n      'aria-describedby': elemId,\n      'data-yeti-box': elemId,\n      'data-toggle': elemId,\n      'data-resize': elemId\n    }).addClass(this.options.triggerClass);\n\n    super._init();\n    this._events();\n  }\n\n  _getDefaultPosition() {\n    // handle legacy classnames\n    var position = this.$element[0].className.match(/\\b(top|left|right|bottom)\\b/g);\n    return position ? position[0] : 'top';\n  }\n\n  _getDefaultAlignment() {\n    return 'center';\n  }\n\n  _getHOffset() {\n    if(this.position === 'left' || this.position === 'right') {\n      return this.options.hOffset + this.options.tooltipWidth;\n    } else {\n      return this.options.hOffset\n    }\n  }\n\n  _getVOffset() {\n    if(this.position === 'top' || this.position === 'bottom') {\n      return this.options.vOffset + this.options.tooltipHeight;\n    } else {\n      return this.options.vOffset\n    }\n  }\n\n  /**\n   * builds the tooltip element, adds attributes, and returns the template.\n   * @private\n   */\n  _buildTemplate(id) {\n    var templateClasses = (`${this.options.tooltipClass} ${this.options.positionClass} ${this.options.templateClasses}`).trim();\n    var $template =  $('<div></div>').addClass(templateClasses).attr({\n      'role': 'tooltip',\n      'aria-hidden': true,\n      'data-is-active': false,\n      'data-is-focus': false,\n      'id': id\n    });\n    return $template;\n  }\n\n  /**\n   * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.\n   * if the tooltip is larger than the screen width, default to full width - any user selected margin\n   * @private\n   */\n  _setPosition() {\n    super._setPosition(this.$element, this.template);\n  }\n\n  /**\n   * reveals the tooltip, and fires an event to close any other open tooltips on the page\n   * @fires Tooltip#closeme\n   * @fires Tooltip#show\n   * @function\n   */\n  show() {\n    if (this.options.showOn !== 'all' && !MediaQuery.is(this.options.showOn)) {\n      // console.error('The screen is too small to display this tooltip');\n      return false;\n    }\n\n    var _this = this;\n    this.template.css('visibility', 'hidden').show();\n    this._setPosition();\n    this.template.removeClass('top bottom left right').addClass(this.position)\n    this.template.removeClass('align-top align-bottom align-left align-right align-center').addClass('align-' + this.alignment);\n\n    /**\n     * Fires to close all other open tooltips on the page\n     * @event Closeme#tooltip\n     */\n    this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));\n\n\n    this.template.attr({\n      'data-is-active': true,\n      'aria-hidden': false\n    });\n    _this.isActive = true;\n    // console.log(this.template);\n    this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function() {\n      //maybe do stuff?\n    });\n    /**\n     * Fires when the tooltip is shown\n     * @event Tooltip#show\n     */\n    this.$element.trigger('show.zf.tooltip');\n  }\n\n  /**\n   * Hides the current tooltip, and resets the positioning class if it was changed due to collision\n   * @fires Tooltip#hide\n   * @function\n   */\n  hide() {\n    // console.log('hiding', this.$element.data('yeti-box'));\n    var _this = this;\n    this.template.stop().attr({\n      'aria-hidden': true,\n      'data-is-active': false\n    }).fadeOut(this.options.fadeOutDuration, function() {\n      _this.isActive = false;\n      _this.isClick = false;\n    });\n    /**\n     * fires when the tooltip is hidden\n     * @event Tooltip#hide\n     */\n    this.$element.trigger('hide.zf.tooltip');\n  }\n\n  /**\n   * adds event listeners for the tooltip and its anchor\n   * TODO combine some of the listeners like focus and mouseenter, etc.\n   * @private\n   */\n  _events() {\n    var _this = this;\n    var $template = this.template;\n    var isFocus = false;\n\n    if (!this.options.disableHover) {\n\n      this.$element\n      .on('mouseenter.zf.tooltip', function(e) {\n        if (!_this.isActive) {\n          _this.timeout = setTimeout(function() {\n            _this.show();\n          }, _this.options.hoverDelay);\n        }\n      })\n      .on('mouseleave.zf.tooltip', function(e) {\n        clearTimeout(_this.timeout);\n        if (!isFocus || (_this.isClick && !_this.options.clickOpen)) {\n          _this.hide();\n        }\n      });\n    }\n\n    if (this.options.clickOpen) {\n      this.$element.on('mousedown.zf.tooltip', function(e) {\n        e.stopImmediatePropagation();\n        if (_this.isClick) {\n          //_this.hide();\n          // _this.isClick = false;\n        } else {\n          _this.isClick = true;\n          if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {\n            _this.show();\n          }\n        }\n      });\n    } else {\n      this.$element.on('mousedown.zf.tooltip', function(e) {\n        e.stopImmediatePropagation();\n        _this.isClick = true;\n      });\n    }\n\n    if (!this.options.disableForTouch) {\n      this.$element\n      .on('tap.zf.tooltip touchend.zf.tooltip', function(e) {\n        _this.isActive ? _this.hide() : _this.show();\n      });\n    }\n\n    this.$element.on({\n      // 'toggle.zf.trigger': this.toggle.bind(this),\n      // 'close.zf.trigger': this.hide.bind(this)\n      'close.zf.trigger': this.hide.bind(this)\n    });\n\n    this.$element\n      .on('focus.zf.tooltip', function(e) {\n        isFocus = true;\n        if (_this.isClick) {\n          // If we're not showing open on clicks, we need to pretend a click-launched focus isn't\n          // a real focus, otherwise on hover and come back we get bad behavior\n          if(!_this.options.clickOpen) { isFocus = false; }\n          return false;\n        } else {\n          _this.show();\n        }\n      })\n\n      .on('focusout.zf.tooltip', function(e) {\n        isFocus = false;\n        _this.isClick = false;\n        _this.hide();\n      })\n\n      .on('resizeme.zf.trigger', function() {\n        if (_this.isActive) {\n          _this._setPosition();\n        }\n      });\n  }\n\n  /**\n   * adds a toggle method, in addition to the static show() & hide() functions\n   * @function\n   */\n  toggle() {\n    if (this.isActive) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  /**\n   * Destroys an instance of tooltip, removes template element from the view.\n   * @function\n   */\n  _destroy() {\n    this.$element.attr('title', this.template.text())\n                 .off('.zf.trigger .zf.tooltip')\n                 .removeClass('has-tip top right left')\n                 .removeAttr('aria-describedby aria-haspopup data-disable-hover data-resize data-toggle data-tooltip data-yeti-box');\n\n    this.template.remove();\n  }\n}\n\nTooltip.defaults = {\n  disableForTouch: false,\n  /**\n   * Time, in ms, before a tooltip should open on hover.\n   * @option\n   * @type {number}\n   * @default 200\n   */\n  hoverDelay: 200,\n  /**\n   * Time, in ms, a tooltip should take to fade into view.\n   * @option\n   * @type {number}\n   * @default 150\n   */\n  fadeInDuration: 150,\n  /**\n   * Time, in ms, a tooltip should take to fade out of view.\n   * @option\n   * @type {number}\n   * @default 150\n   */\n  fadeOutDuration: 150,\n  /**\n   * Disables hover events from opening the tooltip if set to true\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  disableHover: false,\n  /**\n   * Optional addtional classes to apply to the tooltip template on init.\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  templateClasses: '',\n  /**\n   * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.\n   * @option\n   * @type {string}\n   * @default 'tooltip'\n   */\n  tooltipClass: 'tooltip',\n  /**\n   * Class applied to the tooltip anchor element.\n   * @option\n   * @type {string}\n   * @default 'has-tip'\n   */\n  triggerClass: 'has-tip',\n  /**\n   * Minimum breakpoint size at which to open the tooltip.\n   * @option\n   * @type {string}\n   * @default 'small'\n   */\n  showOn: 'small',\n  /**\n   * Custom template to be used to generate markup for tooltip.\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  template: '',\n  /**\n   * Text displayed in the tooltip template on open.\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  tipText: '',\n  touchCloseText: 'Tap to close.',\n  /**\n   * Allows the tooltip to remain open if triggered with a click or touch event.\n   * @option\n   * @type {boolean}\n   * @default true\n   */\n  clickOpen: true,\n  /**\n   * DEPRECATED Additional positioning classes, set by the JS\n   * @option\n   * @type {string}\n   * @default ''\n   */\n  positionClass: '',\n  /**\n   * Position of tooltip. Can be left, right, bottom, top, or auto.\n   * @option\n   * @type {string}\n   * @default 'auto'\n   */\n  position: 'auto',\n  /**\n   * Alignment of tooltip relative to anchor. Can be left, right, bottom, top, center, or auto.\n   * @option\n   * @type {string}\n   * @default 'auto'\n   */\n  alignment: 'auto',\n  /**\n   * Allow overlap of container/window. If false, tooltip will first try to\n   * position as defined by data-position and data-alignment, but reposition if\n   * it would cause an overflow.  @option\n   * @type {boolean}\n   * @default false\n   */\n  allowOverlap: false,\n  /**\n   * Allow overlap of only the bottom of the container. This is the most common\n   * behavior for dropdowns, allowing the dropdown to extend the bottom of the\n   * screen but not otherwise influence or break out of the container.\n   * Less common for tooltips.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  allowBottomOverlap: false,\n  /**\n   * Distance, in pixels, the template should push away from the anchor on the Y axis.\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  vOffset: 0,\n  /**\n   * Distance, in pixels, the template should push away from the anchor on the X axis\n   * @option\n   * @type {number}\n   * @default 0\n   */\n  hOffset: 0,\n  /**\n   * Distance, in pixels, the template spacing auto-adjust for a vertical tooltip\n   * @option\n   * @type {number}\n   * @default 14\n   */\n  tooltipHeight: 14,\n  /**\n   * Distance, in pixels, the template spacing auto-adjust for a horizontal tooltip\n   * @option\n   * @type {number}\n   * @default 12\n   */\n  tooltipWidth: 12,\n    /**\n   * Allow HTML in tooltip. Warning: If you are loading user-generated content into tooltips,\n   * allowing HTML may open yourself up to XSS attacks.\n   * @option\n   * @type {boolean}\n   * @default false\n   */\n  allowHtml: false\n};\n\n/**\n * TODO utilize resize event trigger\n */\n\nexport {Tooltip};\n","'use strict';\n\n\nimport { rtl as Rtl } from \"./foundation.util.core\";\n\nvar Box = {\n  ImNotTouchingYou: ImNotTouchingYou,\n  OverlapArea: OverlapArea,\n  GetDimensions: GetDimensions,\n  GetOffsets: GetOffsets,\n  GetExplicitOffsets: GetExplicitOffsets\n}\n\n/**\n * Compares the dimensions of an element to a container and determines collision events with container.\n * @function\n * @param {jQuery} element - jQuery object to test for collisions.\n * @param {jQuery} parent - jQuery object to use as bounding container.\n * @param {Boolean} lrOnly - set to true to check left and right values only.\n * @param {Boolean} tbOnly - set to true to check top and bottom values only.\n * @default if no parent object passed, detects collisions with `window`.\n * @returns {Boolean} - true if collision free, false if a collision in any direction.\n */\nfunction ImNotTouchingYou(element, parent, lrOnly, tbOnly, ignoreBottom) {\n  return OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) === 0;\n};\n\nfunction OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) {\n  var eleDims = GetDimensions(element),\n  topOver, bottomOver, leftOver, rightOver;\n  if (parent) {\n    var parDims = GetDimensions(parent);\n\n    bottomOver = (parDims.height + parDims.offset.top) - (eleDims.offset.top + eleDims.height);\n    topOver    = eleDims.offset.top - parDims.offset.top;\n    leftOver   = eleDims.offset.left - parDims.offset.left;\n    rightOver  = (parDims.width + parDims.offset.left) - (eleDims.offset.left + eleDims.width);\n  }\n  else {\n    bottomOver = (eleDims.windowDims.height + eleDims.windowDims.offset.top) - (eleDims.offset.top + eleDims.height);\n    topOver    = eleDims.offset.top - eleDims.windowDims.offset.top;\n    leftOver   = eleDims.offset.left - eleDims.windowDims.offset.left;\n    rightOver  = eleDims.windowDims.width - (eleDims.offset.left + eleDims.width);\n  }\n\n  bottomOver = ignoreBottom ? 0 : Math.min(bottomOver, 0);\n  topOver    = Math.min(topOver, 0);\n  leftOver   = Math.min(leftOver, 0);\n  rightOver  = Math.min(rightOver, 0);\n\n  if (lrOnly) {\n    return leftOver + rightOver;\n  }\n  if (tbOnly) {\n    return topOver + bottomOver;\n  }\n\n  // use sum of squares b/c we care about overlap area.\n  return Math.sqrt((topOver * topOver) + (bottomOver * bottomOver) + (leftOver * leftOver) + (rightOver * rightOver));\n}\n\n/**\n * Uses native methods to return an object of dimension values.\n * @function\n * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.\n * @returns {Object} - nested object of integer pixel values\n * TODO - if element is window, return only those values.\n */\nfunction GetDimensions(elem){\n  elem = elem.length ? elem[0] : elem;\n\n  if (elem === window || elem === document) {\n    throw new Error(\"I'm sorry, Dave. I'm afraid I can't do that.\");\n  }\n\n  var rect = elem.getBoundingClientRect(),\n      parRect = elem.parentNode.getBoundingClientRect(),\n      winRect = document.body.getBoundingClientRect(),\n      winY = window.pageYOffset,\n      winX = window.pageXOffset;\n\n  return {\n    width: rect.width,\n    height: rect.height,\n    offset: {\n      top: rect.top + winY,\n      left: rect.left + winX\n    },\n    parentDims: {\n      width: parRect.width,\n      height: parRect.height,\n      offset: {\n        top: parRect.top + winY,\n        left: parRect.left + winX\n      }\n    },\n    windowDims: {\n      width: winRect.width,\n      height: winRect.height,\n      offset: {\n        top: winY,\n        left: winX\n      }\n    }\n  }\n}\n\n/**\n * Returns an object of top and left integer pixel values for dynamically rendered elements,\n * such as: Tooltip, Reveal, and Dropdown. Maintained for backwards compatibility, and where\n * you don't know alignment, but generally from\n * 6.4 forward you should use GetExplicitOffsets, as GetOffsets conflates position and alignment.\n * @function\n * @param {jQuery} element - jQuery object for the element being positioned.\n * @param {jQuery} anchor - jQuery object for the element's anchor point.\n * @param {String} position - a string relating to the desired position of the element, relative to it's anchor\n * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.\n * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.\n * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.\n * TODO alter/rewrite to work with `em` values as well/instead of pixels\n */\nfunction GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {\n  console.log(\"NOTE: GetOffsets is deprecated in favor of GetExplicitOffsets and will be removed in 6.5\");\n  switch (position) {\n    case 'top':\n      return Rtl() ?\n        GetExplicitOffsets(element, anchor, 'top', 'left', vOffset, hOffset, isOverflow) :\n        GetExplicitOffsets(element, anchor, 'top', 'right', vOffset, hOffset, isOverflow);\n    case 'bottom':\n      return Rtl() ?\n        GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow) :\n        GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);\n    case 'center top':\n      return GetExplicitOffsets(element, anchor, 'top', 'center', vOffset, hOffset, isOverflow);\n    case 'center bottom':\n      return GetExplicitOffsets(element, anchor, 'bottom', 'center', vOffset, hOffset, isOverflow);\n    case 'center left':\n      return GetExplicitOffsets(element, anchor, 'left', 'center', vOffset, hOffset, isOverflow);\n    case 'center right':\n      return GetExplicitOffsets(element, anchor, 'right', 'center', vOffset, hOffset, isOverflow);\n    case 'left bottom':\n      return GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow);\n    case 'right bottom':\n      return GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);\n    // Backwards compatibility... this along with the reveal and reveal full\n    // classes are the only ones that didn't reference anchor\n    case 'center':\n      return {\n        left: ($eleDims.windowDims.offset.left + ($eleDims.windowDims.width / 2)) - ($eleDims.width / 2) + hOffset,\n        top: ($eleDims.windowDims.offset.top + ($eleDims.windowDims.height / 2)) - ($eleDims.height / 2 + vOffset)\n      }\n    case 'reveal':\n      return {\n        left: ($eleDims.windowDims.width - $eleDims.width) / 2 + hOffset,\n        top: $eleDims.windowDims.offset.top + vOffset\n      }\n    case 'reveal full':\n      return {\n        left: $eleDims.windowDims.offset.left,\n        top: $eleDims.windowDims.offset.top\n      }\n      break;\n    default:\n      return {\n        left: (Rtl() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset: $anchorDims.offset.left + hOffset),\n        top: $anchorDims.offset.top + $anchorDims.height + vOffset\n      }\n\n  }\n\n}\n\nfunction GetExplicitOffsets(element, anchor, position, alignment, vOffset, hOffset, isOverflow) {\n  var $eleDims = GetDimensions(element),\n      $anchorDims = anchor ? GetDimensions(anchor) : null;\n\n      var topVal, leftVal;\n\n  // set position related attribute\n\n  switch (position) {\n    case 'top':\n      topVal = $anchorDims.offset.top - ($eleDims.height + vOffset);\n      break;\n    case 'bottom':\n      topVal = $anchorDims.offset.top + $anchorDims.height + vOffset;\n      break;\n    case 'left':\n      leftVal = $anchorDims.offset.left - ($eleDims.width + hOffset);\n      break;\n    case 'right':\n      leftVal = $anchorDims.offset.left + $anchorDims.width + hOffset;\n      break;\n  }\n\n\n  // set alignment related attribute\n  switch (position) {\n    case 'top':\n    case 'bottom':\n      switch (alignment) {\n        case 'left':\n          leftVal = $anchorDims.offset.left + hOffset;\n          break;\n        case 'right':\n          leftVal = $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset;\n          break;\n        case 'center':\n          leftVal = isOverflow ? hOffset : (($anchorDims.offset.left + ($anchorDims.width / 2)) - ($eleDims.width / 2)) + hOffset;\n          break;\n      }\n      break;\n    case 'right':\n    case 'left':\n      switch (alignment) {\n        case 'bottom':\n          topVal = $anchorDims.offset.top - vOffset + $anchorDims.height - $eleDims.height;\n          break;\n        case 'top':\n          topVal = $anchorDims.offset.top + vOffset\n          break;\n        case 'center':\n          topVal = ($anchorDims.offset.top + vOffset + ($anchorDims.height / 2)) - ($eleDims.height / 2)\n          break;\n      }\n      break;\n  }\n  return {top: topVal, left: leftVal};\n}\n\nexport {Box};\n","\"use strict\";\n\nimport $ from 'jquery';\n\n// Core Foundation Utilities, utilized in a number of places.\n\n  /**\n   * Returns a boolean for RTL support\n   */\nfunction rtl() {\n  return $('html').attr('dir') === 'rtl';\n}\n\n/**\n * returns a random base-36 uid with namespacing\n * @function\n * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.\n * @param {String} namespace - name of plugin to be incorporated in uid, optional.\n * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.\n * @returns {String} - unique id\n */\nfunction GetYoDigits(length, namespace){\n  length = length || 6;\n  return Math.round((Math.pow(36, length + 1) - Math.random() * Math.pow(36, length))).toString(36).slice(1) + (namespace ? `-${namespace}` : '');\n}\n\nfunction transitionend($elem){\n  var transitions = {\n    'transition': 'transitionend',\n    'WebkitTransition': 'webkitTransitionEnd',\n    'MozTransition': 'transitionend',\n    'OTransition': 'otransitionend'\n  };\n  var elem = document.createElement('div'),\n      end;\n\n  for (var t in transitions){\n    if (typeof elem.style[t] !== 'undefined'){\n      end = transitions[t];\n    }\n  }\n  if(end){\n    return end;\n  }else{\n    end = setTimeout(function(){\n      $elem.triggerHandler('transitionend', [$elem]);\n    }, 1);\n    return 'transitionend';\n  }\n}\n\nexport {rtl, GetYoDigits, transitionend};\n","'use strict';\n\nimport $ from 'jquery';\n\n/**\n * Runs a callback function when images are fully loaded.\n * @param {Object} images - Image(s) to check if loaded.\n * @param {Func} callback - Function to execute when image is fully loaded.\n */\nfunction onImagesLoaded(images, callback){\n  var self = this,\n      unloaded = images.length;\n\n  if (unloaded === 0) {\n    callback();\n  }\n\n  images.each(function(){\n    // Check if image is loaded\n    if (this.complete && this.naturalWidth !== undefined) {\n      singleImageLoaded();\n    }\n    else {\n      // If the above check failed, simulate loading on detached element.\n      var image = new Image();\n      // Still count image as loaded if it finalizes with an error.\n      var events = \"load.zf.images error.zf.images\";\n      $(image).one(events, function me(event){\n        // Unbind the event listeners. We're using 'one' but only one of the two events will have fired.\n        $(this).off(events, me);\n        singleImageLoaded();\n      });\n      image.src = $(this).attr('src');\n    }\n  });\n\n  function singleImageLoaded() {\n    unloaded--;\n    if (unloaded === 0) {\n      callback();\n    }\n  }\n}\n\nexport { onImagesLoaded };\n","/*******************************************\n *                                         *\n * This util was created by Marius Olbertz *\n * Please thank Marius on GitHub /owlbertz *\n * or the web http://www.mariusolbertz.de/ *\n *                                         *\n ******************************************/\n\n'use strict';\n\nimport $ from 'jquery';\nimport { rtl as Rtl } from './foundation.util.core';\n\nconst keyCodes = {\n  9: 'TAB',\n  13: 'ENTER',\n  27: 'ESCAPE',\n  32: 'SPACE',\n  35: 'END',\n  36: 'HOME',\n  37: 'ARROW_LEFT',\n  38: 'ARROW_UP',\n  39: 'ARROW_RIGHT',\n  40: 'ARROW_DOWN'\n}\n\nvar commands = {}\n\n// Functions pulled out to be referenceable from internals\nfunction findFocusable($element) {\n  if(!$element) {return false; }\n  return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function() {\n    if (!$(this).is(':visible') || $(this).attr('tabindex') < 0) { return false; } //only have visible elements and those that have a tabindex greater or equal 0\n    return true;\n  });\n}\n\nfunction parseKey(event) {\n  var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();\n\n  // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events\n  key = key.replace(/\\W+/, '');\n\n  if (event.shiftKey) key = `SHIFT_${key}`;\n  if (event.ctrlKey) key = `CTRL_${key}`;\n  if (event.altKey) key = `ALT_${key}`;\n\n  // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)\n  key = key.replace(/_$/, '');\n\n  return key;\n}\n\nvar Keyboard = {\n  keys: getKeyCodes(keyCodes),\n\n  /**\n   * Parses the (keyboard) event and returns a String that represents its key\n   * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n   * @param {Event} event - the event generated by the event handler\n   * @return String key - String that represents the key pressed\n   */\n  parseKey: parseKey,\n\n  /**\n   * Handles the given (keyboard) event\n   * @param {Event} event - the event generated by the event handler\n   * @param {String} component - Foundation component's name, e.g. Slider or Reveal\n   * @param {Objects} functions - collection of functions that are to be executed\n   */\n  handleKey(event, component, functions) {\n    var commandList = commands[component],\n      keyCode = this.parseKey(event),\n      cmds,\n      command,\n      fn;\n\n    if (!commandList) return console.warn('Component not defined!');\n\n    if (typeof commandList.ltr === 'undefined') { // this component does not differentiate between ltr and rtl\n        cmds = commandList; // use plain list\n    } else { // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa\n        if (Rtl()) cmds = $.extend({}, commandList.ltr, commandList.rtl);\n\n        else cmds = $.extend({}, commandList.rtl, commandList.ltr);\n    }\n    command = cmds[keyCode];\n\n    fn = functions[command];\n    if (fn && typeof fn === 'function') { // execute function  if exists\n      var returnValue = fn.apply();\n      if (functions.handled || typeof functions.handled === 'function') { // execute function when event was handled\n          functions.handled(returnValue);\n      }\n    } else {\n      if (functions.unhandled || typeof functions.unhandled === 'function') { // execute function when event was not handled\n          functions.unhandled();\n      }\n    }\n  },\n\n  /**\n   * Finds all focusable elements within the given `$element`\n   * @param {jQuery} $element - jQuery object to search within\n   * @return {jQuery} $focusable - all focusable elements within `$element`\n   */\n\n  findFocusable: findFocusable,\n\n  /**\n   * Returns the component name name\n   * @param {Object} component - Foundation component, e.g. Slider or Reveal\n   * @return String componentName\n   */\n\n  register(componentName, cmds) {\n    commands[componentName] = cmds;\n  },\n\n\n  // TODO9438: These references to Keyboard need to not require global. Will 'this' work in this context?\n  //\n  /**\n   * Traps the focus in the given element.\n   * @param  {jQuery} $element  jQuery object to trap the foucs into.\n   */\n  trapFocus($element) {\n    var $focusable = findFocusable($element),\n        $firstFocusable = $focusable.eq(0),\n        $lastFocusable = $focusable.eq(-1);\n\n    $element.on('keydown.zf.trapfocus', function(event) {\n      if (event.target === $lastFocusable[0] && parseKey(event) === 'TAB') {\n        event.preventDefault();\n        $firstFocusable.focus();\n      }\n      else if (event.target === $firstFocusable[0] && parseKey(event) === 'SHIFT_TAB') {\n        event.preventDefault();\n        $lastFocusable.focus();\n      }\n    });\n  },\n  /**\n   * Releases the trapped focus from the given element.\n   * @param  {jQuery} $element  jQuery object to release the focus for.\n   */\n  releaseFocus($element) {\n    $element.off('keydown.zf.trapfocus');\n  }\n}\n\n/*\n * Constants for easier comparing.\n * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE\n */\nfunction getKeyCodes(kcs) {\n  var k = {};\n  for (var kc in kcs) k[kcs[kc]] = kcs[kc];\n  return k;\n}\n\nexport {Keyboard};\n","'use strict';\n\nimport $ from 'jquery';\n\n// Default set of media queries\nconst defaultQueries = {\n  'default' : 'only screen',\n  landscape : 'only screen and (orientation: landscape)',\n  portrait : 'only screen and (orientation: portrait)',\n  retina : 'only screen and (-webkit-min-device-pixel-ratio: 2),' +\n    'only screen and (min--moz-device-pixel-ratio: 2),' +\n    'only screen and (-o-min-device-pixel-ratio: 2/1),' +\n    'only screen and (min-device-pixel-ratio: 2),' +\n    'only screen and (min-resolution: 192dpi),' +\n    'only screen and (min-resolution: 2dppx)'\n  };\n\n\n// matchMedia() polyfill - Test a CSS media type/query in JS.\n// Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license\nlet matchMedia = window.matchMedia || (function() {\n  'use strict';\n\n  // For browsers that support matchMedium api such as IE 9 and webkit\n  var styleMedia = (window.styleMedia || window.media);\n\n  // For those that don't support matchMedium\n  if (!styleMedia) {\n    var style   = document.createElement('style'),\n    script      = document.getElementsByTagName('script')[0],\n    info        = null;\n\n    style.type  = 'text/css';\n    style.id    = 'matchmediajs-test';\n\n    script && script.parentNode && script.parentNode.insertBefore(style, script);\n\n    // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers\n    info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;\n\n    styleMedia = {\n      matchMedium(media) {\n        var text = `@media ${media}{ #matchmediajs-test { width: 1px; } }`;\n\n        // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers\n        if (style.styleSheet) {\n          style.styleSheet.cssText = text;\n        } else {\n          style.textContent = text;\n        }\n\n        // Test if media query is true or false\n        return info.width === '1px';\n      }\n    }\n  }\n\n  return function(media) {\n    return {\n      matches: styleMedia.matchMedium(media || 'all'),\n      media: media || 'all'\n    };\n  }\n})();\n\nvar MediaQuery = {\n  queries: [],\n\n  current: '',\n\n  /**\n   * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.\n   * @function\n   * @private\n   */\n  _init() {\n    var self = this;\n    var $meta = $('meta.foundation-mq');\n    if(!$meta.length){\n      $('<meta class=\"foundation-mq\">').appendTo(document.head);\n    }\n\n    var extractedStyles = $('.foundation-mq').css('font-family');\n    var namedQueries;\n\n    namedQueries = parseStyleToObject(extractedStyles);\n\n    for (var key in namedQueries) {\n      if(namedQueries.hasOwnProperty(key)) {\n        self.queries.push({\n          name: key,\n          value: `only screen and (min-width: ${namedQueries[key]})`\n        });\n      }\n    }\n\n    this.current = this._getCurrentSize();\n\n    this._watcher();\n  },\n\n  /**\n   * Checks if the screen is at least as wide as a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to check.\n   * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.\n   */\n  atLeast(size) {\n    var query = this.get(size);\n\n    if (query) {\n      return matchMedia(query).matches;\n    }\n\n    return false;\n  },\n\n  /**\n   * Checks if the screen matches to a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.\n   * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.\n   */\n  is(size) {\n    size = size.trim().split(' ');\n    if(size.length > 1 && size[1] === 'only') {\n      if(size[0] === this._getCurrentSize()) return true;\n    } else {\n      return this.atLeast(size[0]);\n    }\n    return false;\n  },\n\n  /**\n   * Gets the media query of a breakpoint.\n   * @function\n   * @param {String} size - Name of the breakpoint to get.\n   * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.\n   */\n  get(size) {\n    for (var i in this.queries) {\n      if(this.queries.hasOwnProperty(i)) {\n        var query = this.queries[i];\n        if (size === query.name) return query.value;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).\n   * @function\n   * @private\n   * @returns {String} Name of the current breakpoint.\n   */\n  _getCurrentSize() {\n    var matched;\n\n    for (var i = 0; i < this.queries.length; i++) {\n      var query = this.queries[i];\n\n      if (matchMedia(query.value).matches) {\n        matched = query;\n      }\n    }\n\n    if (typeof matched === 'object') {\n      return matched.name;\n    } else {\n      return matched;\n    }\n  },\n\n  /**\n   * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.\n   * @function\n   * @private\n   */\n  _watcher() {\n    $(window).off('resize.zf.mediaquery').on('resize.zf.mediaquery', () => {\n      var newSize = this._getCurrentSize(), currentSize = this.current;\n\n      if (newSize !== currentSize) {\n        // Change the current media query\n        this.current = newSize;\n\n        // Broadcast the media query change on the window\n        $(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);\n      }\n    });\n  }\n};\n\n\n\n// Thank you: https://github.com/sindresorhus/query-string\nfunction parseStyleToObject(str) {\n  var styleObject = {};\n\n  if (typeof str !== 'string') {\n    return styleObject;\n  }\n\n  str = str.trim().slice(1, -1); // browsers re-quote string style values\n\n  if (!str) {\n    return styleObject;\n  }\n\n  styleObject = str.split('&').reduce(function(ret, param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = parts[0];\n    var val = parts[1];\n    key = decodeURIComponent(key);\n\n    // missing `=` should be `null`:\n    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n    val = val === undefined ? null : decodeURIComponent(val);\n\n    if (!ret.hasOwnProperty(key)) {\n      ret[key] = val;\n    } else if (Array.isArray(ret[key])) {\n      ret[key].push(val);\n    } else {\n      ret[key] = [ret[key], val];\n    }\n    return ret;\n  }, {});\n\n  return styleObject;\n}\n\nexport {MediaQuery};\n","'use strict';\n\nimport $ from 'jquery';\nimport { transitionend } from './foundation.util.core';\n\n/**\n * Motion module.\n * @module foundation.motion\n */\n\nconst initClasses   = ['mui-enter', 'mui-leave'];\nconst activeClasses = ['mui-enter-active', 'mui-leave-active'];\n\nconst Motion = {\n  animateIn: function(element, animation, cb) {\n    animate(true, element, animation, cb);\n  },\n\n  animateOut: function(element, animation, cb) {\n    animate(false, element, animation, cb);\n  }\n}\n\nfunction Move(duration, elem, fn){\n  var anim, prog, start = null;\n  // console.log('called');\n\n  if (duration === 0) {\n    fn.apply(elem);\n    elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);\n    return;\n  }\n\n  function move(ts){\n    if(!start) start = ts;\n    // console.log(start, ts);\n    prog = ts - start;\n    fn.apply(elem);\n\n    if(prog < duration){ anim = window.requestAnimationFrame(move, elem); }\n    else{\n      window.cancelAnimationFrame(anim);\n      elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);\n    }\n  }\n  anim = window.requestAnimationFrame(move);\n}\n\n/**\n * Animates an element in or out using a CSS transition class.\n * @function\n * @private\n * @param {Boolean} isIn - Defines if the animation is in or out.\n * @param {Object} element - jQuery or HTML object to animate.\n * @param {String} animation - CSS class to use.\n * @param {Function} cb - Callback to run when animation is finished.\n */\nfunction animate(isIn, element, animation, cb) {\n  element = $(element).eq(0);\n\n  if (!element.length) return;\n\n  var initClass = isIn ? initClasses[0] : initClasses[1];\n  var activeClass = isIn ? activeClasses[0] : activeClasses[1];\n\n  // Set up the animation\n  reset();\n\n  element\n    .addClass(animation)\n    .css('transition', 'none');\n\n  requestAnimationFrame(() => {\n    element.addClass(initClass);\n    if (isIn) element.show();\n  });\n\n  // Start the animation\n  requestAnimationFrame(() => {\n    element[0].offsetWidth;\n    element\n      .css('transition', '')\n      .addClass(activeClass);\n  });\n\n  // Clean up the animation when it finishes\n  element.one(transitionend(element), finish);\n\n  // Hides the element (for out animations), resets the element, and runs a callback\n  function finish() {\n    if (!isIn) element.hide();\n    reset();\n    if (cb) cb.apply(element);\n  }\n\n  // Resets transitions and removes motion-specific classes\n  function reset() {\n    element[0].style.transitionDuration = 0;\n    element.removeClass(`${initClass} ${activeClass} ${animation}`);\n  }\n}\n\nexport {Move, Motion};\n\n","'use strict';\n\nimport $ from 'jquery';\n\nconst Nest = {\n  Feather(menu, type = 'zf') {\n    menu.attr('role', 'menubar');\n\n    var items = menu.find('li').attr({'role': 'menuitem'}),\n        subMenuClass = `is-${type}-submenu`,\n        subItemClass = `${subMenuClass}-item`,\n        hasSubClass = `is-${type}-submenu-parent`,\n        applyAria = (type !== 'accordion'); // Accordions handle their own ARIA attriutes.\n\n    items.each(function() {\n      var $item = $(this),\n          $sub = $item.children('ul');\n\n      if ($sub.length) {\n        $item.addClass(hasSubClass);\n        $sub.addClass(`submenu ${subMenuClass}`).attr({'data-submenu': ''});\n        if(applyAria) {\n          $item.attr({\n            'aria-haspopup': true,\n            'aria-label': $item.children('a:first').text()\n          });\n          // Note:  Drilldowns behave differently in how they hide, and so need\n          // additional attributes.  We should look if this possibly over-generalized\n          // utility (Nest) is appropriate when we rework menus in 6.4\n          if(type === 'drilldown') {\n            $item.attr({'aria-expanded': false});\n          }\n        }\n        $sub\n          .addClass(`submenu ${subMenuClass}`)\n          .attr({\n            'data-submenu': '',\n            'role': 'menu'\n          });\n        if(type === 'drilldown') {\n          $sub.attr({'aria-hidden': true});\n        }\n      }\n\n      if ($item.parent('[data-submenu]').length) {\n        $item.addClass(`is-submenu-item ${subItemClass}`);\n      }\n    });\n\n    return;\n  },\n\n  Burn(menu, type) {\n    var //items = menu.find('li'),\n        subMenuClass = `is-${type}-submenu`,\n        subItemClass = `${subMenuClass}-item`,\n        hasSubClass = `is-${type}-submenu-parent`;\n\n    menu\n      .find('>li, .menu, .menu > li')\n      .removeClass(`${subMenuClass} ${subItemClass} ${hasSubClass} is-submenu-item submenu is-active`)\n      .removeAttr('data-submenu').css('display', '');\n\n  }\n}\n\nexport {Nest};\n","'use strict';\n\nimport $ from 'jquery';\n\nfunction Timer(elem, options, cb) {\n  var _this = this,\n      duration = options.duration,//options is an object for easily adding features later.\n      nameSpace = Object.keys(elem.data())[0] || 'timer',\n      remain = -1,\n      start,\n      timer;\n\n  this.isPaused = false;\n\n  this.restart = function() {\n    remain = -1;\n    clearTimeout(timer);\n    this.start();\n  }\n\n  this.start = function() {\n    this.isPaused = false;\n    // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\n    clearTimeout(timer);\n    remain = remain <= 0 ? duration : remain;\n    elem.data('paused', false);\n    start = Date.now();\n    timer = setTimeout(function(){\n      if(options.infinite){\n        _this.restart();//rerun the timer.\n      }\n      if (cb && typeof cb === 'function') { cb(); }\n    }, remain);\n    elem.trigger(`timerstart.zf.${nameSpace}`);\n  }\n\n  this.pause = function() {\n    this.isPaused = true;\n    //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.\n    clearTimeout(timer);\n    elem.data('paused', true);\n    var end = Date.now();\n    remain = remain - (end - start);\n    elem.trigger(`timerpaused.zf.${nameSpace}`);\n  }\n}\n\nexport {Timer};\n","//**************************************************\n//**Work inspired by multiple jquery swipe plugins**\n//**Done by Yohai Ararat ***************************\n//**************************************************\n\nimport $ from 'jquery';\n\nvar Touch = {};\n\nvar startPosX,\n    startPosY,\n    startTime,\n    elapsedTime,\n    isMoving = false;\n\nfunction onTouchEnd() {\n  //  alert(this);\n  this.removeEventListener('touchmove', onTouchMove);\n  this.removeEventListener('touchend', onTouchEnd);\n  isMoving = false;\n}\n\nfunction onTouchMove(e) {\n  if ($.spotSwipe.preventDefault) { e.preventDefault(); }\n  if(isMoving) {\n    var x = e.touches[0].pageX;\n    var y = e.touches[0].pageY;\n    var dx = startPosX - x;\n    var dy = startPosY - y;\n    var dir;\n    elapsedTime = new Date().getTime() - startTime;\n    if(Math.abs(dx) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {\n      dir = dx > 0 ? 'left' : 'right';\n    }\n    // else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {\n    //   dir = dy > 0 ? 'down' : 'up';\n    // }\n    if(dir) {\n      e.preventDefault();\n      onTouchEnd.call(this);\n      $(this).trigger('swipe', dir).trigger(`swipe${dir}`);\n    }\n  }\n}\n\nfunction onTouchStart(e) {\n  if (e.touches.length == 1) {\n    startPosX = e.touches[0].pageX;\n    startPosY = e.touches[0].pageY;\n    isMoving = true;\n    startTime = new Date().getTime();\n    this.addEventListener('touchmove', onTouchMove, false);\n    this.addEventListener('touchend', onTouchEnd, false);\n  }\n}\n\nfunction init() {\n  this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);\n}\n\nfunction teardown() {\n  this.removeEventListener('touchstart', onTouchStart);\n}\n\nclass SpotSwipe {\n  constructor($) {\n    this.version = '1.0.0';\n    this.enabled = 'ontouchstart' in document.documentElement;\n    this.preventDefault = false;\n    this.moveThreshold = 75;\n    this.timeThreshold = 200;\n    this.$ = $;\n    this._init();\n  }\n\n  _init() {\n    var $ = this.$;\n    $.event.special.swipe = { setup: init };\n\n    $.each(['left', 'up', 'down', 'right'], function () {\n      $.event.special[`swipe${this}`] = { setup: function(){\n        $(this).on('swipe', $.noop);\n      } };\n    });\n  }\n}\n\n/****************************************************\n * As far as I can tell, both setupSpotSwipe and    *\n * setupTouchHandler should be idempotent,          *\n * because they directly replace functions &        *\n * values, and do not add event handlers directly.  *\n ****************************************************/\n\nTouch.setupSpotSwipe = function($) {\n  $.spotSwipe = new SpotSwipe($);\n};\n\n/****************************************************\n * Method for adding pseudo drag events to elements *\n ***************************************************/\nTouch.setupTouchHandler = function($) {\n  $.fn.addTouch = function(){\n    this.each(function(i,el){\n      $(el).bind('touchstart touchmove touchend touchcancel', function(event)  {\n        //we pass the original event object because the jQuery event\n        //object is normalized to w3c specs and does not provide the TouchList\n        handleTouch(event);\n      });\n    });\n\n    var handleTouch = function(event){\n      var touches = event.changedTouches,\n          first = touches[0],\n          eventTypes = {\n            touchstart: 'mousedown',\n            touchmove: 'mousemove',\n            touchend: 'mouseup'\n          },\n          type = eventTypes[event.type],\n          simulatedEvent\n        ;\n\n      if('MouseEvent' in window && typeof window.MouseEvent === 'function') {\n        simulatedEvent = new window.MouseEvent(type, {\n          'bubbles': true,\n          'cancelable': true,\n          'screenX': first.screenX,\n          'screenY': first.screenY,\n          'clientX': first.clientX,\n          'clientY': first.clientY\n        });\n      } else {\n        simulatedEvent = document.createEvent('MouseEvent');\n        simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0/*left*/, null);\n      }\n      first.target.dispatchEvent(simulatedEvent);\n    };\n  };\n};\n\nTouch.init = function($) {\n  if(typeof($.spotSwipe) === 'undefined') {\n    Touch.setupSpotSwipe($);\n    Touch.setupTouchHandler($);\n  }\n};\n\nexport {Touch};\n","'use strict';\n\nimport $ from 'jquery';\nimport { Motion } from './foundation.util.motion';\n\nconst MutationObserver = (function () {\n  var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];\n  for (var i=0; i < prefixes.length; i++) {\n    if (`${prefixes[i]}MutationObserver` in window) {\n      return window[`${prefixes[i]}MutationObserver`];\n    }\n  }\n  return false;\n}());\n\nconst triggers = (el, type) => {\n  el.data(type).split(' ').forEach(id => {\n    $(`#${id}`)[ type === 'close' ? 'trigger' : 'triggerHandler'](`${type}.zf.trigger`, [el]);\n  });\n};\n\nvar Triggers = {\n  Listeners: {\n    Basic: {},\n    Global: {}\n  },\n  Initializers: {}\n}\n\nTriggers.Listeners.Basic  = {\n  openListener: function() {\n    triggers($(this), 'open');\n  },\n  closeListener: function() {\n    let id = $(this).data('close');\n    if (id) {\n      triggers($(this), 'close');\n    }\n    else {\n      $(this).trigger('close.zf.trigger');\n    }\n  },\n  toggleListener: function() {\n    let id = $(this).data('toggle');\n    if (id) {\n      triggers($(this), 'toggle');\n    } else {\n      $(this).trigger('toggle.zf.trigger');\n    }\n  },\n  closeableListener: function(e) {\n    e.stopPropagation();\n    let animation = $(this).data('closable');\n\n    if(animation !== ''){\n      Motion.animateOut($(this), animation, function() {\n        $(this).trigger('closed.zf');\n      });\n    }else{\n      $(this).fadeOut().trigger('closed.zf');\n    }\n  },\n  toggleFocusListener: function() {\n    let id = $(this).data('toggle-focus');\n    $(`#${id}`).triggerHandler('toggle.zf.trigger', [$(this)]);\n  }\n};\n\n// Elements with [data-open] will reveal a plugin that supports it when clicked.\nTriggers.Initializers.addOpenListener = ($elem) => {\n  $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);\n  $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);\n}\n\n// Elements with [data-close] will close a plugin that supports it when clicked.\n// If used without a value on [data-close], the event will bubble, allowing it to close a parent component.\nTriggers.Initializers.addCloseListener = ($elem) => {\n  $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);\n  $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);\n}\n\n// Elements with [data-toggle] will toggle a plugin that supports it when clicked.\nTriggers.Initializers.addToggleListener = ($elem) => {\n  $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);\n  $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);\n}\n\n// Elements with [data-closable] will respond to close.zf.trigger events.\nTriggers.Initializers.addCloseableListener = ($elem) => {\n  $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);\n  $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);\n}\n\n// Elements with [data-toggle-focus] will respond to coming in and out of focus\nTriggers.Initializers.addToggleFocusListener = ($elem) => {\n  $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);\n  $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);\n}\n\n\n\n// More Global/complex listeners and triggers\nTriggers.Listeners.Global  = {\n  resizeListener: function($nodes) {\n    if(!MutationObserver){//fallback for IE 9\n      $nodes.each(function(){\n        $(this).triggerHandler('resizeme.zf.trigger');\n      });\n    }\n    //trigger all listening elements and signal a resize event\n    $nodes.attr('data-events', \"resize\");\n  },\n  scrollListener: function($nodes) {\n    if(!MutationObserver){//fallback for IE 9\n      $nodes.each(function(){\n        $(this).triggerHandler('scrollme.zf.trigger');\n      });\n    }\n    //trigger all listening elements and signal a scroll event\n    $nodes.attr('data-events', \"scroll\");\n  },\n  closeMeListener: function(e, pluginId){\n    let plugin = e.namespace.split('.')[0];\n    let plugins = $(`[data-${plugin}]`).not(`[data-yeti-box=\"${pluginId}\"]`);\n\n    plugins.each(function(){\n      let _this = $(this);\n      _this.triggerHandler('close.zf.trigger', [_this]);\n    });\n  }\n}\n\n// Global, parses whole document.\nTriggers.Initializers.addClosemeListener = function(pluginName) {\n  var yetiBoxes = $('[data-yeti-box]'),\n      plugNames = ['dropdown', 'tooltip', 'reveal'];\n\n  if(pluginName){\n    if(typeof pluginName === 'string'){\n      plugNames.push(pluginName);\n    }else if(typeof pluginName === 'object' && typeof pluginName[0] === 'string'){\n      plugNames.concat(pluginName);\n    }else{\n      console.error('Plugin names must be strings');\n    }\n  }\n  if(yetiBoxes.length){\n    let listeners = plugNames.map((name) => {\n      return `closeme.zf.${name}`;\n    }).join(' ');\n\n    $(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);\n  }\n}\n\nfunction debounceGlobalListener(debounce, trigger, listener) {\n  let timer, args = Array.prototype.slice.call(arguments, 3);\n  $(window).off(trigger).on(trigger, function(e) {\n    if (timer) { clearTimeout(timer); }\n    timer = setTimeout(function(){\n      listener.apply(null, args);\n    }, debounce || 10);//default time to emit scroll event\n  });\n}\n\nTriggers.Initializers.addResizeListener = function(debounce){\n  let $nodes = $('[data-resize]');\n  if($nodes.length){\n    debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);\n  }\n}\n\nTriggers.Initializers.addScrollListener = function(debounce){\n  let $nodes = $('[data-scroll]');\n  if($nodes.length){\n    debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);\n  }\n}\n\nTriggers.Initializers.addMutationEventsListener = function($elem) {\n  if(!MutationObserver){ return false; }\n  let $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]');\n\n  //element callback\n  var listeningElementsMutation = function (mutationRecordsList) {\n    var $target = $(mutationRecordsList[0].target);\n\n    //trigger the event handler for the element depending on type\n    switch (mutationRecordsList[0].type) {\n      case \"attributes\":\n        if ($target.attr(\"data-events\") === \"scroll\" && mutationRecordsList[0].attributeName === \"data-events\") {\n          $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);\n        }\n        if ($target.attr(\"data-events\") === \"resize\" && mutationRecordsList[0].attributeName === \"data-events\") {\n          $target.triggerHandler('resizeme.zf.trigger', [$target]);\n         }\n        if (mutationRecordsList[0].attributeName === \"style\") {\n          $target.closest(\"[data-mutate]\").attr(\"data-events\",\"mutate\");\n          $target.closest(\"[data-mutate]\").triggerHandler('mutateme.zf.trigger', [$target.closest(\"[data-mutate]\")]);\n        }\n        break;\n\n      case \"childList\":\n        $target.closest(\"[data-mutate]\").attr(\"data-events\",\"mutate\");\n        $target.closest(\"[data-mutate]\").triggerHandler('mutateme.zf.trigger', [$target.closest(\"[data-mutate]\")]);\n        break;\n\n      default:\n        return false;\n      //nothing\n    }\n  };\n\n  if ($nodes.length) {\n    //for each element that needs to listen for resizing, scrolling, or mutation add a single observer\n    for (var i = 0; i <= $nodes.length - 1; i++) {\n      var elementObserver = new MutationObserver(listeningElementsMutation);\n      elementObserver.observe($nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: [\"data-events\", \"style\"] });\n    }\n  }\n}\n\nTriggers.Initializers.addSimpleListeners = function() {\n  let $document = $(document);\n\n  Triggers.Initializers.addOpenListener($document);\n  Triggers.Initializers.addCloseListener($document);\n  Triggers.Initializers.addToggleListener($document);\n  Triggers.Initializers.addCloseableListener($document);\n  Triggers.Initializers.addToggleFocusListener($document);\n\n}\n\nTriggers.Initializers.addGlobalListeners = function() {\n  let $document = $(document);\n  Triggers.Initializers.addMutationEventsListener($document);\n  Triggers.Initializers.addResizeListener();\n  Triggers.Initializers.addScrollListener();\n  Triggers.Initializers.addClosemeListener();\n}\n\n\nTriggers.init = function($, Foundation) {\n  if (typeof($.triggersInitialized) === 'undefined') {\n    let $document = $(document);\n\n    if(document.readyState === \"complete\") {\n      Triggers.Initializers.addSimpleListeners();\n      Triggers.Initializers.addGlobalListeners();\n    } else {\n      $(window).on('load', () => {\n        Triggers.Initializers.addSimpleListeners();\n        Triggers.Initializers.addGlobalListeners();\n      });\n    }\n\n\n    $.triggersInitialized = true;\n  }\n\n  if(Foundation) {\n    Foundation.Triggers = Triggers;\n    // Legacy included to be backwards compatible for now.\n    Foundation.IHearYou = Triggers.Initializers.addGlobalListeners\n  }\n}\n\nexport {Triggers};\n","(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n}(function (jQuery) {\n    /*!\n     * jQuery Cycle2; version: 2.1.6 build: 20141007\n     * http://jquery.malsup.com/cycle2/\n     * Copyright (c) 2014 M. Alsup; Dual licensed: MIT/GPL\n     */\n    !function(a){\"use strict\";function b(a){return(a||\"\").toLowerCase()}var c=\"2.1.6\";a.fn.cycle=function(c){var d;return 0!==this.length||a.isReady?this.each(function(){var d,e,f,g,h=a(this),i=a.fn.cycle.log;if(!h.data(\"cycle.opts\")){(h.data(\"cycle-log\")===!1||c&&c.log===!1||e&&e.log===!1)&&(i=a.noop),i(\"--c2 init--\"),d=h.data();for(var j in d)d.hasOwnProperty(j)&&/^cycle[A-Z]+/.test(j)&&(g=d[j],f=j.match(/^cycle(.*)/)[1].replace(/^[A-Z]/,b),i(f+\":\",g,\"(\"+typeof g+\")\"),d[f]=g);e=a.extend({},a.fn.cycle.defaults,d,c||{}),e.timeoutId=0,e.paused=e.paused||!1,e.container=h,e._maxZ=e.maxZ,e.API=a.extend({_container:h},a.fn.cycle.API),e.API.log=i,e.API.trigger=function(a,b){return e.container.trigger(a,b),e.API},h.data(\"cycle.opts\",e),h.data(\"cycle.API\",e.API),e.API.trigger(\"cycle-bootstrap\",[e,e.API]),e.API.addInitialSlides(),e.API.preInitSlideshow(),e.slides.length&&e.API.initSlideshow()}}):(d={s:this.selector,c:this.context},a.fn.cycle.log(\"requeuing slideshow (dom not ready)\"),a(function(){a(d.s,d.c).cycle(c)}),this)},a.fn.cycle.API={opts:function(){return this._container.data(\"cycle.opts\")},addInitialSlides:function(){var b=this.opts(),c=b.slides;b.slideCount=0,b.slides=a(),c=c.jquery?c:b.container.find(c),b.random&&c.sort(function(){return Math.random()-.5}),b.API.add(c)},preInitSlideshow:function(){var b=this.opts();b.API.trigger(\"cycle-pre-initialize\",[b]);var c=a.fn.cycle.transitions[b.fx];c&&a.isFunction(c.preInit)&&c.preInit(b),b._preInitialized=!0},postInitSlideshow:function(){var b=this.opts();b.API.trigger(\"cycle-post-initialize\",[b]);var c=a.fn.cycle.transitions[b.fx];c&&a.isFunction(c.postInit)&&c.postInit(b)},initSlideshow:function(){var b,c=this.opts(),d=c.container;c.API.calcFirstSlide(),\"static\"==c.container.css(\"position\")&&c.container.css(\"position\",\"relative\"),a(c.slides[c.currSlide]).css({opacity:1,display:\"block\",visibility:\"visible\"}),c.API.stackSlides(c.slides[c.currSlide],c.slides[c.nextSlide],!c.reverse),c.pauseOnHover&&(c.pauseOnHover!==!0&&(d=a(c.pauseOnHover)),d.hover(function(){c.API.pause(!0)},function(){c.API.resume(!0)})),c.timeout&&(b=c.API.getSlideOpts(c.currSlide),c.API.queueTransition(b,b.timeout+c.delay)),c._initialized=!0,c.API.updateView(!0),c.API.trigger(\"cycle-initialized\",[c]),c.API.postInitSlideshow()},pause:function(b){var c=this.opts(),d=c.API.getSlideOpts(),e=c.hoverPaused||c.paused;b?c.hoverPaused=!0:c.paused=!0,e||(c.container.addClass(\"cycle-paused\"),c.API.trigger(\"cycle-paused\",[c]).log(\"cycle-paused\"),d.timeout&&(clearTimeout(c.timeoutId),c.timeoutId=0,c._remainingTimeout-=a.now()-c._lastQueue,(c._remainingTimeout<0||isNaN(c._remainingTimeout))&&(c._remainingTimeout=void 0)))},resume:function(a){var b=this.opts(),c=!b.hoverPaused&&!b.paused;a?b.hoverPaused=!1:b.paused=!1,c||(b.container.removeClass(\"cycle-paused\"),0===b.slides.filter(\":animated\").length&&b.API.queueTransition(b.API.getSlideOpts(),b._remainingTimeout),b.API.trigger(\"cycle-resumed\",[b,b._remainingTimeout]).log(\"cycle-resumed\"))},add:function(b,c){var d,e=this.opts(),f=e.slideCount,g=!1;\"string\"==a.type(b)&&(b=a.trim(b)),a(b).each(function(){var b,d=a(this);c?e.container.prepend(d):e.container.append(d),e.slideCount++,b=e.API.buildSlideOpts(d),e.slides=c?a(d).add(e.slides):e.slides.add(d),e.API.initSlide(b,d,--e._maxZ),d.data(\"cycle.opts\",b),e.API.trigger(\"cycle-slide-added\",[e,b,d])}),e.API.updateView(!0),g=e._preInitialized&&2>f&&e.slideCount>=1,g&&(e._initialized?e.timeout&&(d=e.slides.length,e.nextSlide=e.reverse?d-1:1,e.timeoutId||e.API.queueTransition(e)):e.API.initSlideshow())},calcFirstSlide:function(){var a,b=this.opts();a=parseInt(b.startingSlide||0,10),(a>=b.slides.length||0>a)&&(a=0),b.currSlide=a,b.reverse?(b.nextSlide=a-1,b.nextSlide<0&&(b.nextSlide=b.slides.length-1)):(b.nextSlide=a+1,b.nextSlide==b.slides.length&&(b.nextSlide=0))},calcNextSlide:function(){var a,b=this.opts();b.reverse?(a=b.nextSlide-1<0,b.nextSlide=a?b.slideCount-1:b.nextSlide-1,b.currSlide=a?0:b.nextSlide+1):(a=b.nextSlide+1==b.slides.length,b.nextSlide=a?0:b.nextSlide+1,b.currSlide=a?b.slides.length-1:b.nextSlide-1)},calcTx:function(b,c){var d,e=b;return e._tempFx?d=a.fn.cycle.transitions[e._tempFx]:c&&e.manualFx&&(d=a.fn.cycle.transitions[e.manualFx]),d||(d=a.fn.cycle.transitions[e.fx]),e._tempFx=null,this.opts()._tempFx=null,d||(d=a.fn.cycle.transitions.fade,e.API.log('Transition \"'+e.fx+'\" not found.  Using fade.')),d},prepareTx:function(a,b){var c,d,e,f,g,h=this.opts();return h.slideCount<2?void(h.timeoutId=0):(!a||h.busy&&!h.manualTrump||(h.API.stopTransition(),h.busy=!1,clearTimeout(h.timeoutId),h.timeoutId=0),void(h.busy||(0!==h.timeoutId||a)&&(d=h.slides[h.currSlide],e=h.slides[h.nextSlide],f=h.API.getSlideOpts(h.nextSlide),g=h.API.calcTx(f,a),h._tx=g,a&&void 0!==f.manualSpeed&&(f.speed=f.manualSpeed),h.nextSlide!=h.currSlide&&(a||!h.paused&&!h.hoverPaused&&h.timeout)?(h.API.trigger(\"cycle-before\",[f,d,e,b]),g.before&&g.before(f,d,e,b),c=function(){h.busy=!1,h.container.data(\"cycle.opts\")&&(g.after&&g.after(f,d,e,b),h.API.trigger(\"cycle-after\",[f,d,e,b]),h.API.queueTransition(f),h.API.updateView(!0))},h.busy=!0,g.transition?g.transition(f,d,e,b,c):h.API.doTransition(f,d,e,b,c),h.API.calcNextSlide(),h.API.updateView()):h.API.queueTransition(f))))},doTransition:function(b,c,d,e,f){var g=b,h=a(c),i=a(d),j=function(){i.animate(g.animIn||{opacity:1},g.speed,g.easeIn||g.easing,f)};i.css(g.cssBefore||{}),h.animate(g.animOut||{},g.speed,g.easeOut||g.easing,function(){h.css(g.cssAfter||{}),g.sync||j()}),g.sync&&j()},queueTransition:function(b,c){var d=this.opts(),e=void 0!==c?c:b.timeout;return 0===d.nextSlide&&0===--d.loop?(d.API.log(\"terminating; loop=0\"),d.timeout=0,e?setTimeout(function(){d.API.trigger(\"cycle-finished\",[d])},e):d.API.trigger(\"cycle-finished\",[d]),void(d.nextSlide=d.currSlide)):void 0!==d.continueAuto&&(d.continueAuto===!1||a.isFunction(d.continueAuto)&&d.continueAuto()===!1)?(d.API.log(\"terminating automatic transitions\"),d.timeout=0,void(d.timeoutId&&clearTimeout(d.timeoutId))):void(e&&(d._lastQueue=a.now(),void 0===c&&(d._remainingTimeout=b.timeout),d.paused||d.hoverPaused||(d.timeoutId=setTimeout(function(){d.API.prepareTx(!1,!d.reverse)},e))))},stopTransition:function(){var a=this.opts();a.slides.filter(\":animated\").length&&(a.slides.stop(!1,!0),a.API.trigger(\"cycle-transition-stopped\",[a])),a._tx&&a._tx.stopTransition&&a._tx.stopTransition(a)},advanceSlide:function(a){var b=this.opts();return clearTimeout(b.timeoutId),b.timeoutId=0,b.nextSlide=b.currSlide+a,b.nextSlide<0?b.nextSlide=b.slides.length-1:b.nextSlide>=b.slides.length&&(b.nextSlide=0),b.API.prepareTx(!0,a>=0),!1},buildSlideOpts:function(c){var d,e,f=this.opts(),g=c.data()||{};for(var h in g)g.hasOwnProperty(h)&&/^cycle[A-Z]+/.test(h)&&(d=g[h],e=h.match(/^cycle(.*)/)[1].replace(/^[A-Z]/,b),f.API.log(\"[\"+(f.slideCount-1)+\"]\",e+\":\",d,\"(\"+typeof d+\")\"),g[e]=d);g=a.extend({},a.fn.cycle.defaults,f,g),g.slideNum=f.slideCount;try{delete g.API,delete g.slideCount,delete g.currSlide,delete g.nextSlide,delete g.slides}catch(i){}return g},getSlideOpts:function(b){var c=this.opts();void 0===b&&(b=c.currSlide);var d=c.slides[b],e=a(d).data(\"cycle.opts\");return a.extend({},c,e)},initSlide:function(b,c,d){var e=this.opts();c.css(b.slideCss||{}),d>0&&c.css(\"zIndex\",d),isNaN(b.speed)&&(b.speed=a.fx.speeds[b.speed]||a.fx.speeds._default),b.sync||(b.speed=b.speed/2),c.addClass(e.slideClass)},updateView:function(a,b){var c=this.opts();if(c._initialized){var d=c.API.getSlideOpts(),e=c.slides[c.currSlide];!a&&b!==!0&&(c.API.trigger(\"cycle-update-view-before\",[c,d,e]),c.updateView<0)||(c.slideActiveClass&&c.slides.removeClass(c.slideActiveClass).eq(c.currSlide).addClass(c.slideActiveClass),a&&c.hideNonActive&&c.slides.filter(\":not(.\"+c.slideActiveClass+\")\").css(\"visibility\",\"hidden\"),0===c.updateView&&setTimeout(function(){c.API.trigger(\"cycle-update-view\",[c,d,e,a])},d.speed/(c.sync?2:1)),0!==c.updateView&&c.API.trigger(\"cycle-update-view\",[c,d,e,a]),a&&c.API.trigger(\"cycle-update-view-after\",[c,d,e]))}},getComponent:function(b){var c=this.opts(),d=c[b];return\"string\"==typeof d?/^\\s*[\\>|\\+|~]/.test(d)?c.container.find(d):a(d):d.jquery?d:a(d)},stackSlides:function(b,c,d){var e=this.opts();b||(b=e.slides[e.currSlide],c=e.slides[e.nextSlide],d=!e.reverse),a(b).css(\"zIndex\",e.maxZ);var f,g=e.maxZ-2,h=e.slideCount;if(d){for(f=e.currSlide+1;h>f;f++)a(e.slides[f]).css(\"zIndex\",g--);for(f=0;f<e.currSlide;f++)a(e.slides[f]).css(\"zIndex\",g--)}else{for(f=e.currSlide-1;f>=0;f--)a(e.slides[f]).css(\"zIndex\",g--);for(f=h-1;f>e.currSlide;f--)a(e.slides[f]).css(\"zIndex\",g--)}a(c).css(\"zIndex\",e.maxZ-1)},getSlideIndex:function(a){return this.opts().slides.index(a)}},a.fn.cycle.log=function(){window.console&&console.log&&console.log(\"[cycle2] \"+Array.prototype.join.call(arguments,\" \"))},a.fn.cycle.version=function(){return\"Cycle2: \"+c},a.fn.cycle.transitions={custom:{},none:{before:function(a,b,c,d){a.API.stackSlides(c,b,d),a.cssBefore={opacity:1,visibility:\"visible\",display:\"block\"}}},fade:{before:function(b,c,d,e){var f=b.API.getSlideOpts(b.nextSlide).slideCss||{};b.API.stackSlides(c,d,e),b.cssBefore=a.extend(f,{opacity:0,visibility:\"visible\",display:\"block\"}),b.animIn={opacity:1},b.animOut={opacity:0}}},fadeout:{before:function(b,c,d,e){var f=b.API.getSlideOpts(b.nextSlide).slideCss||{};b.API.stackSlides(c,d,e),b.cssBefore=a.extend(f,{opacity:1,visibility:\"visible\",display:\"block\"}),b.animOut={opacity:0}}},scrollHorz:{before:function(a,b,c,d){a.API.stackSlides(b,c,d);var e=a.container.css(\"overflow\",\"hidden\").width();a.cssBefore={left:d?e:-e,top:0,opacity:1,visibility:\"visible\",display:\"block\"},a.cssAfter={zIndex:a._maxZ-2,left:0},a.animIn={left:0},a.animOut={left:d?-e:e}}}},a.fn.cycle.defaults={allowWrap:!0,autoSelector:\".cycle-slideshow[data-cycle-auto-init!=false]\",delay:0,easing:null,fx:\"fade\",hideNonActive:!0,loop:0,manualFx:void 0,manualSpeed:void 0,manualTrump:!0,maxZ:100,pauseOnHover:!1,reverse:!1,slideActiveClass:\"cycle-slide-active\",slideClass:\"cycle-slide\",slideCss:{position:\"absolute\",top:0,left:0},slides:\"> img\",speed:500,startingSlide:0,sync:!0,timeout:4e3,updateView:0},a(document).ready(function(){a(a.fn.cycle.defaults.autoSelector).cycle()})}(jQuery),/*! Cycle2 autoheight plugin; Copyright (c) M.Alsup, 2012; version: 20130913 */\n        function(a){\"use strict\";function b(b,d){var e,f,g,h=d.autoHeight;if(\"container\"==h)f=a(d.slides[d.currSlide]).outerHeight(),d.container.height(f);else if(d._autoHeightRatio)d.container.height(d.container.width()/d._autoHeightRatio);else if(\"calc\"===h||\"number\"==a.type(h)&&h>=0){if(g=\"calc\"===h?c(b,d):h>=d.slides.length?0:h,g==d._sentinelIndex)return;d._sentinelIndex=g,d._sentinel&&d._sentinel.remove(),e=a(d.slides[g].cloneNode(!0)),e.removeAttr(\"id name rel\").find(\"[id],[name],[rel]\").removeAttr(\"id name rel\"),e.css({position:\"static\",visibility:\"hidden\",display:\"block\"}).prependTo(d.container).addClass(\"cycle-sentinel cycle-slide\").removeClass(\"cycle-slide-active\"),e.find(\"*\").css(\"visibility\",\"hidden\"),d._sentinel=e}}function c(b,c){var d=0,e=-1;return c.slides.each(function(b){var c=a(this).height();c>e&&(e=c,d=b)}),d}function d(b,c,d,e){var f=a(e).outerHeight();c.container.animate({height:f},c.autoHeightSpeed,c.autoHeightEasing)}function e(c,f){f._autoHeightOnResize&&(a(window).off(\"resize orientationchange\",f._autoHeightOnResize),f._autoHeightOnResize=null),f.container.off(\"cycle-slide-added cycle-slide-removed\",b),f.container.off(\"cycle-destroyed\",e),f.container.off(\"cycle-before\",d),f._sentinel&&(f._sentinel.remove(),f._sentinel=null)}a.extend(a.fn.cycle.defaults,{autoHeight:0,autoHeightSpeed:250,autoHeightEasing:null}),a(document).on(\"cycle-initialized\",function(c,f){function g(){b(c,f)}var h,i=f.autoHeight,j=a.type(i),k=null;(\"string\"===j||\"number\"===j)&&(f.container.on(\"cycle-slide-added cycle-slide-removed\",b),f.container.on(\"cycle-destroyed\",e),\"container\"==i?f.container.on(\"cycle-before\",d):\"string\"===j&&/\\d+\\:\\d+/.test(i)&&(h=i.match(/(\\d+)\\:(\\d+)/),h=h[1]/h[2],f._autoHeightRatio=h),\"number\"!==j&&(f._autoHeightOnResize=function(){clearTimeout(k),k=setTimeout(g,50)},a(window).on(\"resize orientationchange\",f._autoHeightOnResize)),setTimeout(g,30))})}(jQuery),/*! caption plugin for Cycle2;  version: 20130306 */\n        function(a){\"use strict\";a.extend(a.fn.cycle.defaults,{caption:\"> .cycle-caption\",captionTemplate:\"{{slideNum}} / {{slideCount}}\",overlay:\"> .cycle-overlay\",overlayTemplate:\"<div>{{title}}</div><div>{{desc}}</div>\",captionModule:\"caption\"}),a(document).on(\"cycle-update-view\",function(b,c,d,e){if(\"caption\"===c.captionModule){a.each([\"caption\",\"overlay\"],function(){var a=this,b=d[a+\"Template\"],f=c.API.getComponent(a);f.length&&b?(f.html(c.API.tmpl(b,d,c,e)),f.show()):f.hide()})}}),a(document).on(\"cycle-destroyed\",function(b,c){var d;a.each([\"caption\",\"overlay\"],function(){var a=this,b=c[a+\"Template\"];c[a]&&b&&(d=c.API.getComponent(\"caption\"),d.empty())})})}(jQuery),/*! command plugin for Cycle2;  version: 20140415 */\n        function(a){\"use strict\";var b=a.fn.cycle;a.fn.cycle=function(c){var d,e,f,g=a.makeArray(arguments);return\"number\"==a.type(c)?this.cycle(\"goto\",c):\"string\"==a.type(c)?this.each(function(){var h;return d=c,f=a(this).data(\"cycle.opts\"),void 0===f?void b.log('slideshow must be initialized before sending commands; \"'+d+'\" ignored'):(d=\"goto\"==d?\"jump\":d,e=f.API[d],a.isFunction(e)?(h=a.makeArray(g),h.shift(),e.apply(f.API,h)):void b.log(\"unknown command: \",d))}):b.apply(this,arguments)},a.extend(a.fn.cycle,b),a.extend(b.API,{next:function(){var a=this.opts();if(!a.busy||a.manualTrump){var b=a.reverse?-1:1;a.allowWrap===!1&&a.currSlide+b>=a.slideCount||(a.API.advanceSlide(b),a.API.trigger(\"cycle-next\",[a]).log(\"cycle-next\"))}},prev:function(){var a=this.opts();if(!a.busy||a.manualTrump){var b=a.reverse?1:-1;a.allowWrap===!1&&a.currSlide+b<0||(a.API.advanceSlide(b),a.API.trigger(\"cycle-prev\",[a]).log(\"cycle-prev\"))}},destroy:function(){this.stop();var b=this.opts(),c=a.isFunction(a._data)?a._data:a.noop;clearTimeout(b.timeoutId),b.timeoutId=0,b.API.stop(),b.API.trigger(\"cycle-destroyed\",[b]).log(\"cycle-destroyed\"),b.container.removeData(),c(b.container[0],\"parsedAttrs\",!1),b.retainStylesOnDestroy||(b.container.removeAttr(\"style\"),b.slides.removeAttr(\"style\"),b.slides.removeClass(b.slideActiveClass)),b.slides.each(function(){var d=a(this);d.removeData(),d.removeClass(b.slideClass),c(this,\"parsedAttrs\",!1)})},jump:function(a,b){var c,d=this.opts();if(!d.busy||d.manualTrump){var e=parseInt(a,10);if(isNaN(e)||0>e||e>=d.slides.length)return void d.API.log(\"goto: invalid slide index: \"+e);if(e==d.currSlide)return void d.API.log(\"goto: skipping, already on slide\",e);d.nextSlide=e,clearTimeout(d.timeoutId),d.timeoutId=0,d.API.log(\"goto: \",e,\" (zero-index)\"),c=d.currSlide<d.nextSlide,d._tempFx=b,d.API.prepareTx(!0,c)}},stop:function(){var b=this.opts(),c=b.container;clearTimeout(b.timeoutId),b.timeoutId=0,b.API.stopTransition(),b.pauseOnHover&&(b.pauseOnHover!==!0&&(c=a(b.pauseOnHover)),c.off(\"mouseenter mouseleave\")),b.API.trigger(\"cycle-stopped\",[b]).log(\"cycle-stopped\")},reinit:function(){var a=this.opts();a.API.destroy(),a.container.cycle()},remove:function(b){for(var c,d,e=this.opts(),f=[],g=1,h=0;h<e.slides.length;h++)c=e.slides[h],h==b?d=c:(f.push(c),a(c).data(\"cycle.opts\").slideNum=g,g++);d&&(e.slides=a(f),e.slideCount--,a(d).remove(),b==e.currSlide?e.API.advanceSlide(1):b<e.currSlide?e.currSlide--:e.currSlide++,e.API.trigger(\"cycle-slide-removed\",[e,b,d]).log(\"cycle-slide-removed\"),e.API.updateView())}}),a(document).on(\"click.cycle\",\"[data-cycle-cmd]\",function(b){b.preventDefault();var c=a(this),d=c.data(\"cycle-cmd\"),e=c.data(\"cycle-context\")||\".cycle-slideshow\";a(e).cycle(d,c.data(\"cycle-arg\"))})}(jQuery),/*! hash plugin for Cycle2;  version: 20130905 */\n        function(a){\"use strict\";function b(b,c){var d;return b._hashFence?void(b._hashFence=!1):(d=window.location.hash.substring(1),void b.slides.each(function(e){if(a(this).data(\"cycle-hash\")==d){if(c===!0)b.startingSlide=e;else{var f=b.currSlide<e;b.nextSlide=e,b.API.prepareTx(!0,f)}return!1}}))}a(document).on(\"cycle-pre-initialize\",function(c,d){b(d,!0),d._onHashChange=function(){b(d,!1)},a(window).on(\"hashchange\",d._onHashChange)}),a(document).on(\"cycle-update-view\",function(a,b,c){c.hash&&\"#\"+c.hash!=window.location.hash&&(b._hashFence=!0,window.location.hash=c.hash)}),a(document).on(\"cycle-destroyed\",function(b,c){c._onHashChange&&a(window).off(\"hashchange\",c._onHashChange)})}(jQuery),/*! loader plugin for Cycle2;  version: 20131121 */\n        function(a){\"use strict\";a.extend(a.fn.cycle.defaults,{loader:!1}),a(document).on(\"cycle-bootstrap\",function(b,c){function d(b,d){function f(b){var f;\"wait\"==c.loader?(h.push(b),0===j&&(h.sort(g),e.apply(c.API,[h,d]),c.container.removeClass(\"cycle-loading\"))):(f=a(c.slides[c.currSlide]),e.apply(c.API,[b,d]),f.show(),c.container.removeClass(\"cycle-loading\"))}function g(a,b){return a.data(\"index\")-b.data(\"index\")}var h=[];if(\"string\"==a.type(b))b=a.trim(b);else if(\"array\"===a.type(b))for(var i=0;i<b.length;i++)b[i]=a(b[i])[0];b=a(b);var j=b.length;j&&(b.css(\"visibility\",\"hidden\").appendTo(\"body\").each(function(b){function g(){0===--i&&(--j,f(k))}var i=0,k=a(this),l=k.is(\"img\")?k:k.find(\"img\");return k.data(\"index\",b),l=l.filter(\":not(.cycle-loader-ignore)\").filter(':not([src=\"\"])'),l.length?(i=l.length,void l.each(function(){this.complete?g():a(this).load(function(){g()}).on(\"error\",function(){0===--i&&(c.API.log(\"slide skipped; img not loaded:\",this.src),0===--j&&\"wait\"==c.loader&&e.apply(c.API,[h,d]))})})):(--j,void h.push(k))}),j&&c.container.addClass(\"cycle-loading\"))}var e;c.loader&&(e=c.API.add,c.API.add=d)})}(jQuery),/*! pager plugin for Cycle2;  version: 20140415 */\n        function(a){\"use strict\";function b(b,c,d){var e,f=b.API.getComponent(\"pager\");f.each(function(){var f=a(this);if(c.pagerTemplate){var g=b.API.tmpl(c.pagerTemplate,c,b,d[0]);e=a(g).appendTo(f)}else e=f.children().eq(b.slideCount-1);e.on(b.pagerEvent,function(a){b.pagerEventBubble||a.preventDefault(),b.API.page(f,a.currentTarget)})})}function c(a,b){var c=this.opts();if(!c.busy||c.manualTrump){var d=a.children().index(b),e=d,f=c.currSlide<e;c.currSlide!=e&&(c.nextSlide=e,c._tempFx=c.pagerFx,c.API.prepareTx(!0,f),c.API.trigger(\"cycle-pager-activated\",[c,a,b]))}}a.extend(a.fn.cycle.defaults,{pager:\"> .cycle-pager\",pagerActiveClass:\"cycle-pager-active\",pagerEvent:\"click.cycle\",pagerEventBubble:void 0,pagerTemplate:\"<span>&bull;</span>\"}),a(document).on(\"cycle-bootstrap\",function(a,c,d){d.buildPagerLink=b}),a(document).on(\"cycle-slide-added\",function(a,b,d,e){b.pager&&(b.API.buildPagerLink(b,d,e),b.API.page=c)}),a(document).on(\"cycle-slide-removed\",function(b,c,d){if(c.pager){var e=c.API.getComponent(\"pager\");e.each(function(){var b=a(this);a(b.children()[d]).remove()})}}),a(document).on(\"cycle-update-view\",function(b,c){var d;c.pager&&(d=c.API.getComponent(\"pager\"),d.each(function(){a(this).children().removeClass(c.pagerActiveClass).eq(c.currSlide).addClass(c.pagerActiveClass)}))}),a(document).on(\"cycle-destroyed\",function(a,b){var c=b.API.getComponent(\"pager\");c&&(c.children().off(b.pagerEvent),b.pagerTemplate&&c.empty())})}(jQuery),/*! prevnext plugin for Cycle2;  version: 20140408 */\n        function(a){\"use strict\";a.extend(a.fn.cycle.defaults,{next:\"> .cycle-next\",nextEvent:\"click.cycle\",disabledClass:\"disabled\",prev:\"> .cycle-prev\",prevEvent:\"click.cycle\",swipe:!1}),a(document).on(\"cycle-initialized\",function(a,b){if(b.API.getComponent(\"next\").on(b.nextEvent,function(a){a.preventDefault(),b.API.next()}),b.API.getComponent(\"prev\").on(b.prevEvent,function(a){a.preventDefault(),b.API.prev()}),b.swipe){var c=b.swipeVert?\"swipeUp.cycle\":\"swipeLeft.cycle swipeleft.cycle\",d=b.swipeVert?\"swipeDown.cycle\":\"swipeRight.cycle swiperight.cycle\";b.container.on(c,function(){b._tempFx=b.swipeFx,b.API.next()}),b.container.on(d,function(){b._tempFx=b.swipeFx,b.API.prev()})}}),a(document).on(\"cycle-update-view\",function(a,b){if(!b.allowWrap){var c=b.disabledClass,d=b.API.getComponent(\"next\"),e=b.API.getComponent(\"prev\"),f=b._prevBoundry||0,g=void 0!==b._nextBoundry?b._nextBoundry:b.slideCount-1;b.currSlide==g?d.addClass(c).prop(\"disabled\",!0):d.removeClass(c).prop(\"disabled\",!1),b.currSlide===f?e.addClass(c).prop(\"disabled\",!0):e.removeClass(c).prop(\"disabled\",!1)}}),a(document).on(\"cycle-destroyed\",function(a,b){b.API.getComponent(\"prev\").off(b.nextEvent),b.API.getComponent(\"next\").off(b.prevEvent),b.container.off(\"swipeleft.cycle swiperight.cycle swipeLeft.cycle swipeRight.cycle swipeUp.cycle swipeDown.cycle\")})}(jQuery),/*! progressive loader plugin for Cycle2;  version: 20130315 */\n        function(a){\"use strict\";a.extend(a.fn.cycle.defaults,{progressive:!1}),a(document).on(\"cycle-pre-initialize\",function(b,c){if(c.progressive){var d,e,f=c.API,g=f.next,h=f.prev,i=f.prepareTx,j=a.type(c.progressive);if(\"array\"==j)d=c.progressive;else if(a.isFunction(c.progressive))d=c.progressive(c);else if(\"string\"==j){if(e=a(c.progressive),d=a.trim(e.html()),!d)return;if(/^(\\[)/.test(d))try{d=a.parseJSON(d)}catch(k){return void f.log(\"error parsing progressive slides\",k)}else d=d.split(new RegExp(e.data(\"cycle-split\")||\"\\n\")),d[d.length-1]||d.pop()}i&&(f.prepareTx=function(a,b){var e,f;return a||0===d.length?void i.apply(c.API,[a,b]):void(b&&c.currSlide==c.slideCount-1?(f=d[0],d=d.slice(1),c.container.one(\"cycle-slide-added\",function(a,b){setTimeout(function(){b.API.advanceSlide(1)},50)}),c.API.add(f)):b||0!==c.currSlide?i.apply(c.API,[a,b]):(e=d.length-1,f=d[e],d=d.slice(0,e),c.container.one(\"cycle-slide-added\",function(a,b){setTimeout(function(){b.currSlide=1,b.API.advanceSlide(-1)},50)}),c.API.add(f,!0)))}),g&&(f.next=function(){var a=this.opts();if(d.length&&a.currSlide==a.slideCount-1){var b=d[0];d=d.slice(1),a.container.one(\"cycle-slide-added\",function(a,b){g.apply(b.API),b.container.removeClass(\"cycle-loading\")}),a.container.addClass(\"cycle-loading\"),a.API.add(b)}else g.apply(a.API)}),h&&(f.prev=function(){var a=this.opts();if(d.length&&0===a.currSlide){var b=d.length-1,c=d[b];d=d.slice(0,b),a.container.one(\"cycle-slide-added\",function(a,b){b.currSlide=1,b.API.advanceSlide(-1),b.container.removeClass(\"cycle-loading\")}),a.container.addClass(\"cycle-loading\"),a.API.add(c,!0)}else h.apply(a.API)})}})}(jQuery),/*! tmpl plugin for Cycle2;  version: 20121227 */\n        function(a){\"use strict\";a.extend(a.fn.cycle.defaults,{tmplRegex:\"{{((.)?.*?)}}\"}),a.extend(a.fn.cycle.API,{tmpl:function(b,c){var d=new RegExp(c.tmplRegex||a.fn.cycle.defaults.tmplRegex,\"g\"),e=a.makeArray(arguments);return e.shift(),b.replace(d,function(b,c){var d,f,g,h,i=c.split(\".\");for(d=0;d<e.length;d++)if(g=e[d]){if(i.length>1)for(h=g,f=0;f<i.length;f++)g=h,h=h[i[f]]||c;else h=g[c];if(a.isFunction(h))return h.apply(g,e);if(void 0!==h&&null!==h&&h!=c)return h}return c})}})}(jQuery);\n}));","/*!\n * jQuery JavaScript Library v3.2.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2017-03-20T18:59Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif ( typeof module === \"object\" && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar document = window.document;\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\n\n\n\tfunction DOMEval( code, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar script = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.2.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t},\n\n\t// Support: Android <=4.0 only\n\t// Make sure we trim BOM and NBSP\n\trtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n\t// Matches dashed string for camelizing\n\trmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g,\n\n\t// Used by jQuery.camelCase as callback to replace()\n\tfcamelCase = function( all, letter ) {\n\t\treturn letter.toUpperCase();\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !jQuery.isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\n\t\t\t\t\tif ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\tclone = src && Array.isArray( src ) ? src : [];\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src && jQuery.isPlainObject( src ) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisFunction: function( obj ) {\n\t\treturn jQuery.type( obj ) === \"function\";\n\t},\n\n\tisWindow: function( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t},\n\n\tisNumeric: function( obj ) {\n\n\t\t// As of jQuery 3.0, isNumeric is limited to\n\t\t// strings and numbers (primitives or objects)\n\t\t// that can be coerced to finite numbers (gh-2662)\n\t\tvar type = jQuery.type( obj );\n\t\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t\t// subtraction forces infinities to NaN\n\t\t\t!isNaN( obj - parseFloat( obj ) );\n\t},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\n\t\t/* eslint-disable no-unused-vars */\n\t\t// See https://github.com/eslint/eslint/issues/6125\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\ttype: function( obj ) {\n\t\tif ( obj == null ) {\n\t\t\treturn obj + \"\";\n\t\t}\n\n\t\t// Support: Android <=2.3 only (functionish RegExp)\n\t\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\t\ttypeof obj;\n\t},\n\n\t// Evaluates a script in a global context\n\tglobalEval: function( code ) {\n\t\tDOMEval( code );\n\t},\n\n\t// Convert dashed to camelCase; used by the css and data modules\n\t// Support: IE <=9 - 11, Edge 12 - 13\n\t// Microsoft forgot to hump their vendor prefix (#9572)\n\tcamelCase: function( string ) {\n\t\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// Support: Android <=4.0 only\n\ttrim: function( text ) {\n\t\treturn text == null ?\n\t\t\t\"\" :\n\t\t\t( text + \"\" ).replace( rtrim, \"\" );\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn concat.apply( [], ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// Bind a function to a context, optionally partially applying any\n\t// arguments.\n\tproxy: function( fn, context ) {\n\t\tvar tmp, args, proxy;\n\n\t\tif ( typeof context === \"string\" ) {\n\t\t\ttmp = fn[ context ];\n\t\t\tcontext = fn;\n\t\t\tfn = tmp;\n\t\t}\n\n\t\t// Quick check to determine if target is callable, in the spec\n\t\t// this throws a TypeError, but we will just return undefined.\n\t\tif ( !jQuery.isFunction( fn ) ) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Simulated bind\n\t\targs = slice.call( arguments, 2 );\n\t\tproxy = function() {\n\t\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t\t};\n\n\t\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\t\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\t\treturn proxy;\n\t},\n\n\tnow: Date.now,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = jQuery.type( obj );\n\n\tif ( type === \"function\" || jQuery.isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.3\n * https://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-08-08\n */\n(function( window ) {\n\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ({}).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpush_native = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[i] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n\tidentifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\t\t// \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace +\n\t\t\"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\" ),\n\n\trattributeQuotes = new RegExp( \"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace +\n\t\t\t\"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace +\n\t\t\t\"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" +\n\t\t\twhitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\" ),\n\tfunescape = function( _, escaped, escapedWhitespace ) {\n\t\tvar high = \"0x\" + escaped - 0x10000;\n\t\t// NaN means non-codepoint\n\t\t// Support: Firefox<24\n\t\t// Workaround erroneous numeric interpretation of +\"0x\"\n\t\treturn high !== high || escapedWhitespace ?\n\t\t\tescaped :\n\t\t\thigh < 0 ?\n\t\t\t\t// BMP codepoint\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\t// Supplemental Plane codepoint (surrogate pair)\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tdisabledAncestor = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t(arr = slice.call( preferredDoc.childNodes )),\n\t\tpreferredDoc.childNodes\n\t);\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpush_native.apply( target, slice.call(els) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( (target[j++] = els[i++]) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\n\t\tif ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n\t\t\tsetDocument( context );\n\t\t}\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( (m = match[1]) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( (elem = context.getElementById( m )) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && (elem = newContext.getElementById( m )) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[2] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( (m = match[3]) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!compilerCache[ selector + \" \" ] &&\n\t\t\t\t(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n\t\t\t\tif ( nodeType !== 1 ) {\n\t\t\t\t\tnewContext = context;\n\t\t\t\t\tnewSelector = selector;\n\n\t\t\t\t// qSA looks outside Element context, which is not what we want\n\t\t\t\t// Thanks to Andrew Dupont for this workaround technique\n\t\t\t\t// Support: IE <=8\n\t\t\t\t// Exclude object elements\n\t\t\t\t} else if ( context.nodeName.toLowerCase() !== \"object\" ) {\n\n\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\tif ( (nid = context.getAttribute( \"id\" )) ) {\n\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontext.setAttribute( \"id\", (nid = expando) );\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[i] = \"#\" + nid + \" \" + toSelector( groups[i] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\t\t\t\t}\n\n\t\t\t\tif ( newSelector ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn (cache[ key + \" \" ] = value);\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement(\"fieldset\");\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch (e) {\n\t\treturn false;\n\t} finally {\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split(\"|\"),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[i] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( (cur = cur.nextSibling) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn (name === \"input\" || name === \"button\") && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\t\tdisabledAncestor( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction(function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction(function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ (j = matchIndexes[i]) ] ) {\n\t\t\t\t\tseed[j] = !(matches[j] = seed[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\t// documentElement is verified for cases where it doesn't yet exist\n\t// (such as loading iframes in IE - #4833)\n\tvar documentElement = elem && (elem.ownerDocument || elem).documentElement;\n\treturn documentElement ? documentElement.nodeName !== \"HTML\" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\tif ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9-11, Edge\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\tif ( preferredDoc !== document &&\n\t\t(subWindow = document.defaultView) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert(function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute(\"className\");\n\t});\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert(function( el ) {\n\t\tel.appendChild( document.createComment(\"\") );\n\t\treturn !el.getElementsByTagName(\"*\").length;\n\t});\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert(function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t});\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[\"ID\"] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute(\"id\") === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[\"ID\"] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode(\"id\");\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[\"ID\"] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( (elem = elems[i++]) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode(\"id\");\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[\"TAG\"] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( (elem = results[i++]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[\"CLASS\"] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert(function( el ) {\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll(\"[msallowcapture^='']\").length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll(\"[selected]\").length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push(\"~=\");\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll(\":checked\").length ) {\n\t\t\t\trbuggyQSA.push(\":checked\");\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push(\".#.+[+~]\");\n\t\t\t}\n\t\t});\n\n\t\tassert(function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement(\"input\");\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll(\"[name=d]\").length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll(\":enabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll(\":disabled\").length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll(\"*,:x\");\n\t\t\trbuggyQSA.push(\",.*:\");\n\t\t});\n\t}\n\n\tif ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector) )) ) {\n\n\t\tassert(function( el ) {\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t});\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join(\"|\") );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join(\"|\") );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t));\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( (b = b.parentNode) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\tcompare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\tif ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\t\t\treturn a === document ? -1 :\n\t\t\t\tb === document ? 1 :\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( (cur = cur.parentNode) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[i] === bp[i] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[i], bp[i] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\tap[i] === preferredDoc ? -1 :\n\t\t\tbp[i] === preferredDoc ? 1 :\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\t// Make sure that attribute selectors are quoted\n\texpr = expr.replace( rattributeQuotes, \"='$1']\" );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!compilerCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\t\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t\t// fragment in IE 9\n\t\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch (e) {}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\t// Set document vars if needed\n\tif ( ( context.ownerDocument || context ) !== document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\t// Set document vars if needed\n\tif ( ( elem.ownerDocument || elem ) !== document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t(val = elem.getAttributeNode(name)) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn (sel + \"\").replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( (elem = results[i++]) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( (node = elem[i++]) ) {\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[1] = match[1].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[3] = ( match[3] || match[4] || match[5] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[2] === \"~=\" ) {\n\t\t\t\tmatch[3] = \" \" + match[3] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[1] = match[1].toLowerCase();\n\n\t\t\tif ( match[1].slice( 0, 3 ) === \"nth\" ) {\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[3] ) {\n\t\t\t\t\tSizzle.error( match[0] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === \"even\" || match[3] === \"odd\" ) );\n\t\t\t\tmatch[5] = +( ( match[7] + match[8] ) || match[3] === \"odd\" );\n\n\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[3] ) {\n\t\t\t\tSizzle.error( match[0] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[6] && match[2];\n\n\t\t\tif ( matchExpr[\"CHILD\"].test( match[0] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[3] ) {\n\t\t\t\tmatch[2] = match[4] || match[5] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t(excess = tokenize( unquoted, true )) &&\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t(excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[0] = match[0].slice( 0, excess );\n\t\t\t\tmatch[2] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() { return true; } :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t(pattern = new RegExp( \"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\" )) &&\n\t\t\t\tclassCache( className, function( elem ) {\n\t\t\t\t\treturn pattern.test( typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\" );\n\t\t\t\t});\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( (node = node[ dir ]) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( (node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t(diff = nodeIndex = 0) || start.pop()) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] || (node[ expando ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t(outerCache[ node.uniqueID ] = {});\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction(function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[i] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[i] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction(function( selector ) {\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction(function( seed, matches, context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = unmatched[i]) ) {\n\t\t\t\t\t\t\tseed[i] = !(matches[i] = elem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}) :\n\t\t\t\tfunction( elem, context, xml ) {\n\t\t\t\t\tinput[0] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[0] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t}),\n\n\t\t\"has\": markFunction(function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t}),\n\n\t\t\"contains\": markFunction(function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t}),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test(lang || \"\") ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( (elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t}),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn (nodeName === \"input\" && !!elem.checked) || (nodeName === \"option\" && !!elem.selected);\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[\"empty\"]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo(function() {\n\t\t\treturn [ 0 ];\n\t\t}),\n\n\t\t\"last\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t}),\n\n\t\t\"eq\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t}),\n\n\t\t\"even\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"odd\": createPositionalPseudo(function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"lt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t}),\n\n\t\t\"gt\": createPositionalPseudo(function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t})\n\t}\n};\n\nExpr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || (match = rcomma.exec( soFar )) ) {\n\t\t\tif ( match ) {\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[0].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( (tokens = []) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( (match = rcombinators.exec( soFar )) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push({\n\t\t\t\tvalue: matched,\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[0].replace( rtrim, \" \" )\n\t\t\t});\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n\t\t\t\t(match = preFilters[ type ]( match ))) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push({\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t});\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[i].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( (elem = elem[ dir ]) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || (elem[ expando ] = {});\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( (oldCache = uniqueCache[ key ]) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn (newCache[ 2 ] = oldCache[ 2 ]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[i]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[i], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (elem = unmatched[i]) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction(function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts( selector || \"*\", context.nodeType ? [ context ] : context, [] ),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( (elem = temp[i]) ) {\n\t\t\t\t\tmatcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( (elem = matcherOut[i]) ) {\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( (matcherIn[i] = elem) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, (matcherOut = []), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( (elem = matcherOut[i]) &&\n\t\t\t\t\t\t(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n\t\t\t\t\t\tseed[temp] = !(results[temp] = elem);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t});\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[0].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[\" \"],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t(checkContext = context).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n\t\t\tmatchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[j].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\t\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\t\ttokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" })\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[\"TAG\"]( \"*\", outermost ),\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\t\t\t\toutermostContext = context === document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\tif ( !context && elem.ownerDocument !== document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( (matcher = elementMatchers[j++]) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( (elem = !matcher && elem) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( (matcher = setMatchers[j++]) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !(unmatched[i] || setMatched[i]) ) {\n\t\t\t\t\t\t\t\tsetMatched[i] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[i] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( (selector = compiled.selector || selector) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[0] = match[0].slice( 0 );\n\t\tif ( tokens.length > 2 && (token = tokens[0]).type === \"ID\" &&\n\t\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {\n\n\t\t\tcontext = ( Expr.find[\"ID\"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[\"needsContext\"].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[i];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ (type = token.type) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( (find = Expr.find[ type ]) ) {\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( (seed = find(\n\t\t\t\t\ttoken.matches[0].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n\t\t\t\t)) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split(\"\").sort( sortOrder ).join(\"\") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( el ) {\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement(\"fieldset\") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute(\"href\") === \"#\" ;\n}) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert(function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n}) ) {\n\taddHandle( \"value\", function( elem, name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( el ) {\n\treturn el.getAttribute(\"disabled\") == null;\n}) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t\t(val = elem.getAttributeNode( name )) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\tnull;\n\t\t}\n\t});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( jQuery.isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Simple selector that can be filtered directly, removing non-Elements\n\tif ( risSimple.test( qualifier ) ) {\n\t\treturn jQuery.filter( qualifier, elements, not );\n\t}\n\n\t// Complex selector, compare the two sets, removing non-Elements\n\tqualifier = jQuery.filter( qualifier, elements );\n\treturn jQuery.grep( elements, function( elem ) {\n\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;\n\t} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( jQuery.isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( jQuery.isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n        if ( nodeName( elem, \"iframe\" ) ) {\n            return elem.contentDocument;\n        }\n\n        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n        // Treat the template element as a regular one in browsers that\n        // don't support it.\n        if ( nodeName( elem, \"template\" ) ) {\n            elem = elem.content || elem;\n        }\n\n        return jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( jQuery.isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && jQuery.type( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && jQuery.isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && jQuery.isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( jQuery.isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tjQuery.isFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tjQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( jQuery.type( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !jQuery.isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ jQuery.camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ jQuery.camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( jQuery.camelCase );\n\t\t\t} else {\n\t\t\t\tkey = jQuery.camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = jQuery.camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tjQuery.contains( elem.ownerDocument, elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\nvar swap = function( elem, options, callback, args ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.apply( elem, args || [] );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted,\n\t\tscale = 1,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = ( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\tdo {\n\n\t\t\t// If previous iteration zeroed out, double until we get *something*.\n\t\t\t// Use string for doubling so we don't accidentally see scale as unchanged below\n\t\t\tscale = scale || \".5\";\n\n\t\t\t// Adjust and apply\n\t\t\tinitialInUnit = initialInUnit / scale;\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Update scale, tolerating zero or NaN from tween.cur()\n\t\t// Break the loop if scale is unchanged or perfect, or if we've just had enough.\n\t\t} while (\n\t\t\tscale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n\t\t);\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// Support: IE <=9 only\n\toption: [ 1, \"<select multiple='multiple'>\", \"</select>\" ],\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\n// Support: IE <=9 only\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, contains, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( jQuery.type( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tcontains = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( contains ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\nvar documentElement = document.documentElement;\n\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 only\n// See #13393 for more info\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Don't attach events to noData or text/comment nodes (but allow plain objects)\n\t\tif ( !elemData ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = {};\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\t// Make a writable jQuery.Event from the native event object\n\t\tvar event = jQuery.event.fix( nativeEvent );\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\t\t\thandlers = ( dataPriv.get( this, \"events\" ) || {} )[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n\t\t\t\t// a subset or equal to those in the bound event (both can have no namespace).\n\t\t\t\tif ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: jQuery.isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tfocus: {\n\n\t\t\t// Fire native event if possible so blur/focus sequence is correct\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this !== safeActiveElement() && this.focus ) {\n\t\t\t\t\tthis.focus();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusin\"\n\t\t},\n\t\tblur: {\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this === safeActiveElement() && this.blur ) {\n\t\t\t\t\tthis.blur();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdelegateType: \"focusout\"\n\t\t},\n\t\tclick: {\n\n\t\t\t// For checkbox, fire native event so checked state will be right\n\t\t\ttrigger: function() {\n\t\t\t\tif ( this.type === \"checkbox\" && this.click && nodeName( this, \"input\" ) ) {\n\t\t\t\t\tthis.click();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, don't fire native .click() on links\n\t\t\t_default: function( event ) {\n\t\t\t\treturn nodeName( event.target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || jQuery.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t/* eslint-disable max-len */\n\n\t// See https://github.com/eslint/eslint/issues/3229\n\trxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n\t/* eslint-enable */\n\n\t// Support: IE <=10 - 11, Edge 12 - 13\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trscriptTypeMasked = /^true\\/(.*)/,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( \">tbody\", elem )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tvar match = rscriptTypeMasked.exec( elem.type );\n\n\tif ( match ) {\n\t\telem.type = match[ 1 ];\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.access( src );\n\t\tpdataCur = dataPriv.set( dest, pdataOld );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdelete pdataCur.handle;\n\t\t\tpdataCur.events = {};\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = concat.apply( [], args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tisFunction = jQuery.isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( isFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( isFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html.replace( rxhtmlTag, \"<$1></$2>\" );\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = jQuery.contains( elem.ownerDocument, elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdiv.style.cssText =\n\t\t\t\"box-sizing:border-box;\" +\n\t\t\t\"position:relative;display:block;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"top:1%;width:50%\";\n\t\tdiv.innerHTML = \"\";\n\t\tdocumentElement.appendChild( container );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n\t\tboxSizingReliableVal = divStyle.width === \"4px\";\n\n\t\t// Support: Android 4.0 - 4.3 only\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.marginRight = \"50%\";\n\t\tpixelMarginRightVal = divStyle.marginRight === \"4px\";\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tcontainer.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" +\n\t\t\"padding:0;margin-top:1px;position:absolute\";\n\tcontainer.appendChild( div );\n\n\tjQuery.extend( support, {\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelMarginRight: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelMarginRightVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !jQuery.contains( elem.ownerDocument, elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t},\n\n\tcssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n\t// Shortcut for names that are not vendor prefixed\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a property mapped along what jQuery.cssProps suggests or to\n// a vendor prefixed property.\nfunction finalPropName( name ) {\n\tvar ret = jQuery.cssProps[ name ];\n\tif ( !ret ) {\n\t\tret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;\n\t}\n\treturn ret;\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n\tvar i,\n\t\tval = 0;\n\n\t// If we already have the right measurement, avoid augmentation\n\tif ( extra === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\ti = 4;\n\n\t// Otherwise initialize for horizontal or vertical properties\n\t} else {\n\t\ti = name === \"width\" ? 1 : 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin, so add it if we want it\n\t\tif ( extra === \"margin\" ) {\n\t\t\tval += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\tif ( isBorderBox ) {\n\n\t\t\t// border-box includes padding, so remove it if we want content\n\t\t\tif ( extra === \"content\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// At this point, extra isn't border nor margin, so remove border\n\t\t\tif ( extra !== \"margin\" ) {\n\t\t\t\tval -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t} else {\n\n\t\t\t// At this point, extra isn't content, so add padding\n\t\t\tval += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// At this point, extra isn't content nor padding, so add border\n\t\t\tif ( extra !== \"padding\" ) {\n\t\t\t\tval += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n\t// Start with computed style\n\tvar valueIsBorderBox,\n\t\tstyles = getStyles( elem ),\n\t\tval = curCSS( elem, name, styles ),\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t// Computed unit is not pixels. Stop here and return.\n\tif ( rnumnonpx.test( val ) ) {\n\t\treturn val;\n\t}\n\n\t// Check for style in case a browser which returns unreliable values\n\t// for getComputedStyle silently falls back to the reliable elem.style\n\tvalueIsBorderBox = isBorderBox &&\n\t\t( support.boxSizingReliable() || val === elem.style[ name ] );\n\n\t// Fall back to offsetWidth/Height when value is \"auto\"\n\t// This happens for inline elements with no explicit setting (gh-3571)\n\tif ( val === \"auto\" ) {\n\t\tval = elem[ \"offset\" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];\n\t}\n\n\t// Normalize \"\", auto, and prepare for extra\n\tval = parseFloat( val ) || 0;\n\n\t// Use the active box-sizing model to add/subtract irrelevant styles\n\treturn ( val +\n\t\taugmentWidthOrHeight(\n\t\t\telem,\n\t\t\tname,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {\n\t\t\"float\": \"cssFloat\"\n\t},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\tif ( type === \"number\" ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = jQuery.camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( i, name ) {\n\tjQuery.cssHooks[ name ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, name, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, name, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = extra && getStyles( elem ),\n\t\t\t\tsubtract = extra && augmentWidthOrHeight(\n\t\t\t\t\telem,\n\t\t\t\t\tname,\n\t\t\t\t\textra,\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\t\tstyles\n\t\t\t\t);\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ name ] = value;\n\t\t\t\tvalue = jQuery.css( elem, name );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( !rmargin.test( prefix ) ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 &&\n\t\t\t\t( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 13\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = jQuery.camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( jQuery.isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tjQuery.proxy( result.stop, result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( jQuery.isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( jQuery.isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tjQuery.isFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( jQuery.isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue && type !== false ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = jQuery.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tif ( typeof value === \"string\" && value ) {\n\t\t\tclasses = value.match( rnothtmlwhite ) || [];\n\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value;\n\n\t\tif ( typeof stateVal === \"boolean\" && type === \"string\" ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( jQuery.isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( type === \"string\" ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = value.match( rnothtmlwhite ) || [];\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, isFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tisFunction = jQuery.isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( isFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || {} )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\t\t\t\t\telem[ type ]();\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( i, name ) {\n\n\t// Handle event binding\n\tjQuery.fn[ name ] = function( data, fn ) {\n\t\treturn arguments.length > 0 ?\n\t\t\tthis.on( name, null, data, fn ) :\n\t\t\tthis.trigger( name );\n\t};\n} );\n\njQuery.fn.extend( {\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\n\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && jQuery.type( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = jQuery.isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( jQuery.isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match;\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 13\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available, append data to url\n\t\t\tif ( s.data ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce++ ) + uncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( jQuery.isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\n\njQuery._evalUrl = function( url ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\t\t\"throws\": true\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( jQuery.isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar isFunction = jQuery.isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" ).prop( {\n\t\t\t\t\tcharset: s.scriptCharset,\n\t\t\t\t\tsrc: s.url\n\t\t\t\t} ).on(\n\t\t\t\t\t\"load error\",\n\t\t\t\t\tcallback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( jQuery.isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( jQuery.isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar doc, docElem, rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\trect = elem.getBoundingClientRect();\n\n\t\tdoc = elem.ownerDocument;\n\t\tdocElem = doc.documentElement;\n\t\twin = doc.defaultView;\n\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset - docElem.clientTop,\n\t\t\tleft: rect.left + win.pageXOffset - docElem.clientLeft\n\t\t};\n\t},\n\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n\t\t// because it is its only offset parent\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume getBoundingClientRect is there when computed position is fixed\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\n\t\t\t// Get *real* offsetParent\n\t\t\toffsetParent = this.offsetParent();\n\n\t\t\t// Get correct offsets\n\t\t\toffset = this.offset();\n\t\t\tif ( !nodeName( offsetParent[ 0 ], \"html\" ) ) {\n\t\t\t\tparentOffset = offsetParent.offset();\n\t\t\t}\n\n\t\t\t// Add offsetParent borders\n\t\t\tparentOffset = {\n\t\t\t\ttop: parentOffset.top + jQuery.css( offsetParent[ 0 ], \"borderTopWidth\", true ),\n\t\t\t\tleft: parentOffset.left + jQuery.css( offsetParent[ 0 ], \"borderLeftWidth\", true )\n\t\t\t};\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( jQuery.isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( jQuery.isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t}\n} );\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( typeof define === \"function\" && define.amd ) {\n\tdefine( \"jquery\", [], function() {\n\t\treturn jQuery;\n\t} );\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n","(function(window, factory) {\n\tvar lazySizes = factory(window, window.document);\n\twindow.lazySizes = lazySizes;\n\tif(typeof module == 'object' && module.exports){\n\t\tmodule.exports = lazySizes;\n\t}\n}(window, function l(window, document) {\n\t'use strict';\n\t/*jshint eqnull:true */\n\tif(!document.getElementsByClassName){return;}\n\n\tvar lazysizes, lazySizesConfig;\n\n\tvar docElem = document.documentElement;\n\n\tvar Date = window.Date;\n\n\tvar supportPicture = window.HTMLPictureElement;\n\n\tvar _addEventListener = 'addEventListener';\n\n\tvar _getAttribute = 'getAttribute';\n\n\tvar addEventListener = window[_addEventListener];\n\n\tvar setTimeout = window.setTimeout;\n\n\tvar requestAnimationFrame = window.requestAnimationFrame || setTimeout;\n\n\tvar requestIdleCallback = window.requestIdleCallback;\n\n\tvar regPicture = /^picture$/i;\n\n\tvar loadEvents = ['load', 'error', 'lazyincluded', '_lazyloaded'];\n\n\tvar regClassCache = {};\n\n\tvar forEach = Array.prototype.forEach;\n\n\tvar hasClass = function(ele, cls) {\n\t\tif(!regClassCache[cls]){\n\t\t\tregClassCache[cls] = new RegExp('(\\\\s|^)'+cls+'(\\\\s|$)');\n\t\t}\n\t\treturn regClassCache[cls].test(ele[_getAttribute]('class') || '') && regClassCache[cls];\n\t};\n\n\tvar addClass = function(ele, cls) {\n\t\tif (!hasClass(ele, cls)){\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').trim() + ' ' + cls);\n\t\t}\n\t};\n\n\tvar removeClass = function(ele, cls) {\n\t\tvar reg;\n\t\tif ((reg = hasClass(ele,cls))) {\n\t\t\tele.setAttribute('class', (ele[_getAttribute]('class') || '').replace(reg, ' '));\n\t\t}\n\t};\n\n\tvar addRemoveLoadEvents = function(dom, fn, add){\n\t\tvar action = add ? _addEventListener : 'removeEventListener';\n\t\tif(add){\n\t\t\taddRemoveLoadEvents(dom, fn);\n\t\t}\n\t\tloadEvents.forEach(function(evt){\n\t\t\tdom[action](evt, fn);\n\t\t});\n\t};\n\n\tvar triggerEvent = function(elem, name, detail, noBubbles, noCancelable){\n\t\tvar event = document.createEvent('CustomEvent');\n\n\t\tif(!detail){\n\t\t\tdetail = {};\n\t\t}\n\n\t\tdetail.instance = lazysizes;\n\n\t\tevent.initCustomEvent(name, !noBubbles, !noCancelable, detail);\n\n\t\telem.dispatchEvent(event);\n\t\treturn event;\n\t};\n\n\tvar updatePolyfill = function (el, full){\n\t\tvar polyfill;\n\t\tif( !supportPicture && ( polyfill = (window.picturefill || lazySizesConfig.pf) ) ){\n\t\t\tpolyfill({reevaluate: true, elements: [el]});\n\t\t} else if(full && full.src){\n\t\t\tel.src = full.src;\n\t\t}\n\t};\n\n\tvar getCSS = function (elem, style){\n\t\treturn (getComputedStyle(elem, null) || {})[style];\n\t};\n\n\tvar getWidth = function(elem, parent, width){\n\t\twidth = width || elem.offsetWidth;\n\n\t\twhile(width < lazySizesConfig.minSize && parent && !elem._lazysizesWidth){\n\t\t\twidth =  parent.offsetWidth;\n\t\t\tparent = parent.parentNode;\n\t\t}\n\n\t\treturn width;\n\t};\n\n\tvar rAF = (function(){\n\t\tvar running, waiting;\n\t\tvar firstFns = [];\n\t\tvar secondFns = [];\n\t\tvar fns = firstFns;\n\n\t\tvar run = function(){\n\t\t\tvar runFns = fns;\n\n\t\t\tfns = firstFns.length ? secondFns : firstFns;\n\n\t\t\trunning = true;\n\t\t\twaiting = false;\n\n\t\t\twhile(runFns.length){\n\t\t\t\trunFns.shift()();\n\t\t\t}\n\n\t\t\trunning = false;\n\t\t};\n\n\t\tvar rafBatch = function(fn, queue){\n\t\t\tif(running && !queue){\n\t\t\t\tfn.apply(this, arguments);\n\t\t\t} else {\n\t\t\t\tfns.push(fn);\n\n\t\t\t\tif(!waiting){\n\t\t\t\t\twaiting = true;\n\t\t\t\t\t(document.hidden ? setTimeout : requestAnimationFrame)(run);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\trafBatch._lsFlush = run;\n\n\t\treturn rafBatch;\n\t})();\n\n\tvar rAFIt = function(fn, simple){\n\t\treturn simple ?\n\t\t\tfunction() {\n\t\t\t\trAF(fn);\n\t\t\t} :\n\t\t\tfunction(){\n\t\t\t\tvar that = this;\n\t\t\t\tvar args = arguments;\n\t\t\t\trAF(function(){\n\t\t\t\t\tfn.apply(that, args);\n\t\t\t\t});\n\t\t\t}\n\t\t;\n\t};\n\n\tvar throttle = function(fn){\n\t\tvar running;\n\t\tvar lastTime = 0;\n\t\tvar gDelay = 125;\n\t\tvar rICTimeout = lazySizesConfig.ricTimeout;\n\t\tvar run = function(){\n\t\t\trunning = false;\n\t\t\tlastTime = Date.now();\n\t\t\tfn();\n\t\t};\n\t\tvar idleCallback = requestIdleCallback && lazySizesConfig.ricTimeout ?\n\t\t\tfunction(){\n\t\t\t\trequestIdleCallback(run, {timeout: rICTimeout});\n\n\t\t\t\tif(rICTimeout !== lazySizesConfig.ricTimeout){\n\t\t\t\t\trICTimeout = lazySizesConfig.ricTimeout;\n\t\t\t\t}\n\t\t\t} :\n\t\t\trAFIt(function(){\n\t\t\t\tsetTimeout(run);\n\t\t\t}, true)\n\t\t;\n\n\t\treturn function(isPriority){\n\t\t\tvar delay;\n\n\t\t\tif((isPriority = isPriority === true)){\n\t\t\t\trICTimeout = 33;\n\t\t\t}\n\n\t\t\tif(running){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\trunning =  true;\n\n\t\t\tdelay = gDelay - (Date.now() - lastTime);\n\n\t\t\tif(delay < 0){\n\t\t\t\tdelay = 0;\n\t\t\t}\n\n\t\t\tif(isPriority || (delay < 9 && requestIdleCallback)){\n\t\t\t\tidleCallback();\n\t\t\t} else {\n\t\t\t\tsetTimeout(idleCallback, delay);\n\t\t\t}\n\t\t};\n\t};\n\n\t//based on http://modernjavascript.blogspot.de/2013/08/building-better-debounce.html\n\tvar debounce = function(func) {\n\t\tvar timeout, timestamp;\n\t\tvar wait = 99;\n\t\tvar run = function(){\n\t\t\ttimeout = null;\n\t\t\tfunc();\n\t\t};\n\t\tvar later = function() {\n\t\t\tvar last = Date.now() - timestamp;\n\n\t\t\tif (last < wait) {\n\t\t\t\tsetTimeout(later, wait - last);\n\t\t\t} else {\n\t\t\t\t(requestIdleCallback || run)(run);\n\t\t\t}\n\t\t};\n\n\t\treturn function() {\n\t\t\ttimestamp = Date.now();\n\n\t\t\tif (!timeout) {\n\t\t\t\ttimeout = setTimeout(later, wait);\n\t\t\t}\n\t\t};\n\t};\n\n\t(function(){\n\t\tvar prop;\n\n\t\tvar lazySizesDefaults = {\n\t\t\tlazyClass: 'lazyload',\n\t\t\tloadedClass: 'lazyloaded',\n\t\t\tloadingClass: 'lazyloading',\n\t\t\tpreloadClass: 'lazypreload',\n\t\t\terrorClass: 'lazyerror',\n\t\t\t//strictClass: 'lazystrict',\n\t\t\tautosizesClass: 'lazyautosizes',\n\t\t\tsrcAttr: 'data-src',\n\t\t\tsrcsetAttr: 'data-srcset',\n\t\t\tsizesAttr: 'data-sizes',\n\t\t\t//preloadAfterLoad: false,\n\t\t\tminSize: 40,\n\t\t\tcustomMedia: {},\n\t\t\tinit: true,\n\t\t\texpFactor: 1.5,\n\t\t\thFac: 0.8,\n\t\t\tloadMode: 2,\n\t\t\tloadHidden: true,\n\t\t\tricTimeout: 300,\n\t\t};\n\n\t\tlazySizesConfig = window.lazySizesConfig || window.lazysizesConfig || {};\n\n\t\tfor(prop in lazySizesDefaults){\n\t\t\tif(!(prop in lazySizesConfig)){\n\t\t\t\tlazySizesConfig[prop] = lazySizesDefaults[prop];\n\t\t\t}\n\t\t}\n\n\t\twindow.lazySizesConfig = lazySizesConfig;\n\n\t\tsetTimeout(function(){\n\t\t\tif(lazySizesConfig.init){\n\t\t\t\tinit();\n\t\t\t}\n\t\t});\n\t})();\n\n\tvar loader = (function(){\n\t\tvar preloadElems, isCompleted, resetPreloadingTimer, loadMode, started;\n\n\t\tvar eLvW, elvH, eLtop, eLleft, eLright, eLbottom;\n\n\t\tvar defaultExpand, preloadExpand, hFac;\n\n\t\tvar regImg = /^img$/i;\n\t\tvar regIframe = /^iframe$/i;\n\n\t\tvar supportScroll = ('onscroll' in window) && !(/glebot/.test(navigator.userAgent));\n\n\t\tvar shrinkExpand = 0;\n\t\tvar currentExpand = 0;\n\n\t\tvar isLoading = 0;\n\t\tvar lowRuns = -1;\n\n\t\tvar resetPreloading = function(e){\n\t\t\tisLoading--;\n\t\t\tif(e && e.target){\n\t\t\t\taddRemoveLoadEvents(e.target, resetPreloading);\n\t\t\t}\n\n\t\t\tif(!e || isLoading < 0 || !e.target){\n\t\t\t\tisLoading = 0;\n\t\t\t}\n\t\t};\n\n\t\tvar isNestedVisible = function(elem, elemExpand){\n\t\t\tvar outerRect;\n\t\t\tvar parent = elem;\n\t\t\tvar visible = getCSS(document.body, 'visibility') == 'hidden' || getCSS(elem, 'visibility') != 'hidden';\n\n\t\t\teLtop -= elemExpand;\n\t\t\teLbottom += elemExpand;\n\t\t\teLleft -= elemExpand;\n\t\t\teLright += elemExpand;\n\n\t\t\twhile(visible && (parent = parent.offsetParent) && parent != document.body && parent != docElem){\n\t\t\t\tvisible = ((getCSS(parent, 'opacity') || 1) > 0);\n\n\t\t\t\tif(visible && getCSS(parent, 'overflow') != 'visible'){\n\t\t\t\t\touterRect = parent.getBoundingClientRect();\n\t\t\t\t\tvisible = eLright > outerRect.left &&\n\t\t\t\t\t\teLleft < outerRect.right &&\n\t\t\t\t\t\teLbottom > outerRect.top - 1 &&\n\t\t\t\t\t\teLtop < outerRect.bottom + 1\n\t\t\t\t\t;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn visible;\n\t\t};\n\n\t\tvar checkElements = function() {\n\t\t\tvar eLlen, i, rect, autoLoadElem, loadedSomething, elemExpand, elemNegativeExpand, elemExpandVal, beforeExpandVal;\n\n\t\t\tvar lazyloadElems = lazysizes.elements;\n\n\t\t\tif((loadMode = lazySizesConfig.loadMode) && isLoading < 8 && (eLlen = lazyloadElems.length)){\n\n\t\t\t\ti = 0;\n\n\t\t\t\tlowRuns++;\n\n\t\t\t\tif(preloadExpand == null){\n\t\t\t\t\tif(!('expand' in lazySizesConfig)){\n\t\t\t\t\t\tlazySizesConfig.expand = docElem.clientHeight > 500 && docElem.clientWidth > 500 ? 500 : 370;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefaultExpand = lazySizesConfig.expand;\n\t\t\t\t\tpreloadExpand = defaultExpand * lazySizesConfig.expFactor;\n\t\t\t\t}\n\n\t\t\t\tif(currentExpand < preloadExpand && isLoading < 1 && lowRuns > 2 && loadMode > 2 && !document.hidden){\n\t\t\t\t\tcurrentExpand = preloadExpand;\n\t\t\t\t\tlowRuns = 0;\n\t\t\t\t} else if(loadMode > 1 && lowRuns > 1 && isLoading < 6){\n\t\t\t\t\tcurrentExpand = defaultExpand;\n\t\t\t\t} else {\n\t\t\t\t\tcurrentExpand = shrinkExpand;\n\t\t\t\t}\n\n\t\t\t\tfor(; i < eLlen; i++){\n\n\t\t\t\t\tif(!lazyloadElems[i] || lazyloadElems[i]._lazyRace){continue;}\n\n\t\t\t\t\tif(!supportScroll){unveilElement(lazyloadElems[i]);continue;}\n\n\t\t\t\t\tif(!(elemExpandVal = lazyloadElems[i][_getAttribute]('data-expand')) || !(elemExpand = elemExpandVal * 1)){\n\t\t\t\t\t\telemExpand = currentExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(beforeExpandVal !== elemExpand){\n\t\t\t\t\t\teLvW = innerWidth + (elemExpand * hFac);\n\t\t\t\t\t\telvH = innerHeight + elemExpand;\n\t\t\t\t\t\telemNegativeExpand = elemExpand * -1;\n\t\t\t\t\t\tbeforeExpandVal = elemExpand;\n\t\t\t\t\t}\n\n\t\t\t\t\trect = lazyloadElems[i].getBoundingClientRect();\n\n\t\t\t\t\tif ((eLbottom = rect.bottom) >= elemNegativeExpand &&\n\t\t\t\t\t\t(eLtop = rect.top) <= elvH &&\n\t\t\t\t\t\t(eLright = rect.right) >= elemNegativeExpand * hFac &&\n\t\t\t\t\t\t(eLleft = rect.left) <= eLvW &&\n\t\t\t\t\t\t(eLbottom || eLright || eLleft || eLtop) &&\n\t\t\t\t\t\t(lazySizesConfig.loadHidden || getCSS(lazyloadElems[i], 'visibility') != 'hidden') &&\n\t\t\t\t\t\t((isCompleted && isLoading < 3 && !elemExpandVal && (loadMode < 3 || lowRuns < 4)) || isNestedVisible(lazyloadElems[i], elemExpand))){\n\t\t\t\t\t\tunveilElement(lazyloadElems[i]);\n\t\t\t\t\t\tloadedSomething = true;\n\t\t\t\t\t\tif(isLoading > 9){break;}\n\t\t\t\t\t} else if(!loadedSomething && isCompleted && !autoLoadElem &&\n\t\t\t\t\t\tisLoading < 4 && lowRuns < 4 && loadMode > 2 &&\n\t\t\t\t\t\t(preloadElems[0] || lazySizesConfig.preloadAfterLoad) &&\n\t\t\t\t\t\t(preloadElems[0] || (!elemExpandVal && ((eLbottom || eLright || eLleft || eLtop) || lazyloadElems[i][_getAttribute](lazySizesConfig.sizesAttr) != 'auto')))){\n\t\t\t\t\t\tautoLoadElem = preloadElems[0] || lazyloadElems[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(autoLoadElem && !loadedSomething){\n\t\t\t\t\tunveilElement(autoLoadElem);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar throttledCheckElements = throttle(checkElements);\n\n\t\tvar switchLoadingClass = function(e){\n\t\t\taddClass(e.target, lazySizesConfig.loadedClass);\n\t\t\tremoveClass(e.target, lazySizesConfig.loadingClass);\n\t\t\taddRemoveLoadEvents(e.target, rafSwitchLoadingClass);\n\t\t\ttriggerEvent(e.target, 'lazyloaded');\n\t\t};\n\t\tvar rafedSwitchLoadingClass = rAFIt(switchLoadingClass);\n\t\tvar rafSwitchLoadingClass = function(e){\n\t\t\trafedSwitchLoadingClass({target: e.target});\n\t\t};\n\n\t\tvar changeIframeSrc = function(elem, src){\n\t\t\ttry {\n\t\t\t\telem.contentWindow.location.replace(src);\n\t\t\t} catch(e){\n\t\t\t\telem.src = src;\n\t\t\t}\n\t\t};\n\n\t\tvar handleSources = function(source){\n\t\t\tvar customMedia;\n\n\t\t\tvar sourceSrcset = source[_getAttribute](lazySizesConfig.srcsetAttr);\n\n\t\t\tif( (customMedia = lazySizesConfig.customMedia[source[_getAttribute]('data-media') || source[_getAttribute]('media')]) ){\n\t\t\t\tsource.setAttribute('media', customMedia);\n\t\t\t}\n\n\t\t\tif(sourceSrcset){\n\t\t\t\tsource.setAttribute('srcset', sourceSrcset);\n\t\t\t}\n\t\t};\n\n\t\tvar lazyUnveil = rAFIt(function (elem, detail, isAuto, sizes, isImg){\n\t\t\tvar src, srcset, parent, isPicture, event, firesLoad;\n\n\t\t\tif(!(event = triggerEvent(elem, 'lazybeforeunveil', detail)).defaultPrevented){\n\n\t\t\t\tif(sizes){\n\t\t\t\t\tif(isAuto){\n\t\t\t\t\t\taddClass(elem, lazySizesConfig.autosizesClass);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.setAttribute('sizes', sizes);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsrcset = elem[_getAttribute](lazySizesConfig.srcsetAttr);\n\t\t\t\tsrc = elem[_getAttribute](lazySizesConfig.srcAttr);\n\n\t\t\t\tif(isImg) {\n\t\t\t\t\tparent = elem.parentNode;\n\t\t\t\t\tisPicture = parent && regPicture.test(parent.nodeName || '');\n\t\t\t\t}\n\n\t\t\t\tfiresLoad = detail.firesLoad || (('src' in elem) && (srcset || src || isPicture));\n\n\t\t\t\tevent = {target: elem};\n\n\t\t\t\tif(firesLoad){\n\t\t\t\t\taddRemoveLoadEvents(elem, resetPreloading, true);\n\t\t\t\t\tclearTimeout(resetPreloadingTimer);\n\t\t\t\t\tresetPreloadingTimer = setTimeout(resetPreloading, 2500);\n\n\t\t\t\t\taddClass(elem, lazySizesConfig.loadingClass);\n\t\t\t\t\taddRemoveLoadEvents(elem, rafSwitchLoadingClass, true);\n\t\t\t\t}\n\n\t\t\t\tif(isPicture){\n\t\t\t\t\tforEach.call(parent.getElementsByTagName('source'), handleSources);\n\t\t\t\t}\n\n\t\t\t\tif(srcset){\n\t\t\t\t\telem.setAttribute('srcset', srcset);\n\t\t\t\t} else if(src && !isPicture){\n\t\t\t\t\tif(regIframe.test(elem.nodeName)){\n\t\t\t\t\t\tchangeIframeSrc(elem, src);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telem.src = src;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(isImg && (srcset || isPicture)){\n\t\t\t\t\tupdatePolyfill(elem, {src: src});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(elem._lazyRace){\n\t\t\t\tdelete elem._lazyRace;\n\t\t\t}\n\t\t\tremoveClass(elem, lazySizesConfig.lazyClass);\n\n\t\t\trAF(function(){\n\t\t\t\tif( !firesLoad || (elem.complete && elem.naturalWidth > 1)){\n\t\t\t\t\tif(firesLoad){\n\t\t\t\t\t\tresetPreloading(event);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisLoading--;\n\t\t\t\t\t}\n\t\t\t\t\tswitchLoadingClass(event);\n\t\t\t\t}\n\t\t\t}, true);\n\t\t});\n\n\t\tvar unveilElement = function (elem){\n\t\t\tvar detail;\n\n\t\t\tvar isImg = regImg.test(elem.nodeName);\n\n\t\t\t//allow using sizes=\"auto\", but don't use. it's invalid. Use data-sizes=\"auto\" or a valid value for sizes instead (i.e.: sizes=\"80vw\")\n\t\t\tvar sizes = isImg && (elem[_getAttribute](lazySizesConfig.sizesAttr) || elem[_getAttribute]('sizes'));\n\t\t\tvar isAuto = sizes == 'auto';\n\n\t\t\tif( (isAuto || !isCompleted) && isImg && (elem[_getAttribute]('src') || elem.srcset) && !elem.complete && !hasClass(elem, lazySizesConfig.errorClass) && hasClass(elem, lazySizesConfig.lazyClass)){return;}\n\n\t\t\tdetail = triggerEvent(elem, 'lazyunveilread').detail;\n\n\t\t\tif(isAuto){\n\t\t\t\t autoSizer.updateElem(elem, true, elem.offsetWidth);\n\t\t\t}\n\n\t\t\telem._lazyRace = true;\n\t\t\tisLoading++;\n\n\t\t\tlazyUnveil(elem, detail, isAuto, sizes, isImg);\n\t\t};\n\n\t\tvar onload = function(){\n\t\t\tif(isCompleted){return;}\n\t\t\tif(Date.now() - started < 999){\n\t\t\t\tsetTimeout(onload, 999);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar afterScroll = debounce(function(){\n\t\t\t\tlazySizesConfig.loadMode = 3;\n\t\t\t\tthrottledCheckElements();\n\t\t\t});\n\n\t\t\tisCompleted = true;\n\n\t\t\tlazySizesConfig.loadMode = 3;\n\n\t\t\tthrottledCheckElements();\n\n\t\t\taddEventListener('scroll', function(){\n\t\t\t\tif(lazySizesConfig.loadMode == 3){\n\t\t\t\t\tlazySizesConfig.loadMode = 2;\n\t\t\t\t}\n\t\t\t\tafterScroll();\n\t\t\t}, true);\n\t\t};\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tstarted = Date.now();\n\n\t\t\t\tlazysizes.elements = document.getElementsByClassName(lazySizesConfig.lazyClass);\n\t\t\t\tpreloadElems = document.getElementsByClassName(lazySizesConfig.lazyClass + ' ' + lazySizesConfig.preloadClass);\n\t\t\t\thFac = lazySizesConfig.hFac;\n\n\t\t\t\taddEventListener('scroll', throttledCheckElements, true);\n\n\t\t\t\taddEventListener('resize', throttledCheckElements, true);\n\n\t\t\t\tif(window.MutationObserver){\n\t\t\t\t\tnew MutationObserver( throttledCheckElements ).observe( docElem, {childList: true, subtree: true, attributes: true} );\n\t\t\t\t} else {\n\t\t\t\t\tdocElem[_addEventListener]('DOMNodeInserted', throttledCheckElements, true);\n\t\t\t\t\tdocElem[_addEventListener]('DOMAttrModified', throttledCheckElements, true);\n\t\t\t\t\tsetInterval(throttledCheckElements, 999);\n\t\t\t\t}\n\n\t\t\t\taddEventListener('hashchange', throttledCheckElements, true);\n\n\t\t\t\t//, 'fullscreenchange'\n\t\t\t\t['focus', 'mouseover', 'click', 'load', 'transitionend', 'animationend', 'webkitAnimationEnd'].forEach(function(name){\n\t\t\t\t\tdocument[_addEventListener](name, throttledCheckElements, true);\n\t\t\t\t});\n\n\t\t\t\tif((/d$|^c/.test(document.readyState))){\n\t\t\t\t\tonload();\n\t\t\t\t} else {\n\t\t\t\t\taddEventListener('load', onload);\n\t\t\t\t\tdocument[_addEventListener]('DOMContentLoaded', throttledCheckElements);\n\t\t\t\t\tsetTimeout(onload, 20000);\n\t\t\t\t}\n\n\t\t\t\tif(lazysizes.elements.length){\n\t\t\t\t\tcheckElements();\n\t\t\t\t\trAF._lsFlush();\n\t\t\t\t} else {\n\t\t\t\t\tthrottledCheckElements();\n\t\t\t\t}\n\t\t\t},\n\t\t\tcheckElems: throttledCheckElements,\n\t\t\tunveil: unveilElement\n\t\t};\n\t})();\n\n\n\tvar autoSizer = (function(){\n\t\tvar autosizesElems;\n\n\t\tvar sizeElement = rAFIt(function(elem, parent, event, width){\n\t\t\tvar sources, i, len;\n\t\t\telem._lazysizesWidth = width;\n\t\t\twidth += 'px';\n\n\t\t\telem.setAttribute('sizes', width);\n\n\t\t\tif(regPicture.test(parent.nodeName || '')){\n\t\t\t\tsources = parent.getElementsByTagName('source');\n\t\t\t\tfor(i = 0, len = sources.length; i < len; i++){\n\t\t\t\t\tsources[i].setAttribute('sizes', width);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!event.detail.dataAttr){\n\t\t\t\tupdatePolyfill(elem, event.detail);\n\t\t\t}\n\t\t});\n\t\tvar getSizeElement = function (elem, dataAttr, width){\n\t\t\tvar event;\n\t\t\tvar parent = elem.parentNode;\n\n\t\t\tif(parent){\n\t\t\t\twidth = getWidth(elem, parent, width);\n\t\t\t\tevent = triggerEvent(elem, 'lazybeforesizes', {width: width, dataAttr: !!dataAttr});\n\n\t\t\t\tif(!event.defaultPrevented){\n\t\t\t\t\twidth = event.detail.width;\n\n\t\t\t\t\tif(width && width !== elem._lazysizesWidth){\n\t\t\t\t\t\tsizeElement(elem, parent, event, width);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar updateElementsSizes = function(){\n\t\t\tvar i;\n\t\t\tvar len = autosizesElems.length;\n\t\t\tif(len){\n\t\t\t\ti = 0;\n\n\t\t\t\tfor(; i < len; i++){\n\t\t\t\t\tgetSizeElement(autosizesElems[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tvar debouncedUpdateElementsSizes = debounce(updateElementsSizes);\n\n\t\treturn {\n\t\t\t_: function(){\n\t\t\t\tautosizesElems = document.getElementsByClassName(lazySizesConfig.autosizesClass);\n\t\t\t\taddEventListener('resize', debouncedUpdateElementsSizes);\n\t\t\t},\n\t\t\tcheckElems: debouncedUpdateElementsSizes,\n\t\t\tupdateElem: getSizeElement\n\t\t};\n\t})();\n\n\tvar init = function(){\n\t\tif(!init.i){\n\t\t\tinit.i = true;\n\t\t\tautoSizer._();\n\t\t\tloader._();\n\t\t}\n\t};\n\n\tlazysizes = {\n\t\tcfg: lazySizesConfig,\n\t\tautoSizer: autoSizer,\n\t\tloader: loader,\n\t\tinit: init,\n\t\tuP: updatePolyfill,\n\t\taC: addClass,\n\t\trC: removeClass,\n\t\thC: hasClass,\n\t\tfire: triggerEvent,\n\t\tgW: getWidth,\n\t\trAF: rAF,\n\t};\n\n\treturn lazysizes;\n}\n));\n","/**\n * Some versions of iOS (8.1-) do load the first candidate of a srcset candidate list, if width descriptors with the sizes attribute is used.\n * This tiny extension prevents this wasted download by creating a picture structure around the image.\n * Note: This extension is already included in the ls.respimg.js file.\n *\n * Usage:\n *\n * <img\n * \tclass=\"lazyload\"\n * \tdata-sizes=\"auto\"\n * \tdata-srcset=\"small.jpg 640px,\n * \t\tmedium.jpg 980w,\n * \t\tlarge.jpg 1280w\"\n * \t/>\n */\n\n(function(window, factory) {\n\tvar globalInstall = function(){\n\t\tfactory(window.lazySizes);\n\t\twindow.removeEventListener('lazyunveilread', globalInstall, true);\n\t};\n\n\tfactory = factory.bind(null, window, window.document);\n\n\tif(typeof module == 'object' && module.exports){\n\t\tfactory(require('lazysizes'));\n\t} else if(window.lazySizes) {\n\t\tglobalInstall();\n\t} else {\n\t\twindow.addEventListener('lazyunveilread', globalInstall, true);\n\t}\n}(window, function(window, document, lazySizes) {\n\t'use strict';\n\tvar regPicture;\n\tvar img = document.createElement('img');\n\n\tif(('srcset' in img) && !('sizes' in img) && !window.HTMLPictureElement){\n\t\tregPicture = /^picture$/i;\n\t\tdocument.addEventListener('lazybeforeunveil', function(e){\n\t\t\tif(e.detail.instance != lazySizes){return;}\n\n\t\t\tvar elem, parent, srcset, sizes, isPicture;\n\t\t\tvar picture, source;\n\t\t\tif(e.defaultPrevented ||\n\t\t\t\tlazySizesConfig.noIOSFix ||\n\t\t\t\t!(elem = e.target) ||\n\t\t\t\t!(srcset = elem.getAttribute(lazySizesConfig.srcsetAttr)) ||\n\t\t\t\t!(parent = elem.parentNode) ||\n\t\t\t\t(\n\t\t\t\t\t!(isPicture = regPicture.test(parent.nodeName || '')) &&\n\t\t\t\t\t!(sizes = elem.getAttribute('sizes') || elem.getAttribute(lazySizesConfig.sizesAttr))\n\t\t\t\t)\n\t\t\t){return;}\n\n\t\t\tpicture = isPicture ? parent : document.createElement('picture');\n\n\t\t\tif(!elem._lazyImgSrc){\n\t\t\t\tObject.defineProperty(elem, '_lazyImgSrc', {\n\t\t\t\t\tvalue: document.createElement('source'),\n\t\t\t\t\twritable: true\n\t\t\t\t});\n\t\t\t}\n\t\t\tsource = elem._lazyImgSrc;\n\n\t\t\tif(sizes){\n\t\t\t\tsource.setAttribute('sizes', sizes);\n\t\t\t}\n\n\t\t\tsource.setAttribute(lazySizesConfig.srcsetAttr, srcset);\n\t\t\telem.setAttribute('data-pfsrcset', srcset);\n\t\t\telem.removeAttribute(lazySizesConfig.srcsetAttr);\n\n\t\t\tif(!isPicture){\n\t\t\t\tparent.insertBefore(picture, elem);\n\t\t\t\tpicture.appendChild(elem);\n\t\t\t}\n\t\t\tpicture.insertBefore(source, elem);\n\t\t});\n\t}\n}));\n","/*\n This lazySizes extension helps to use responsive images, but to opt-out from too high retina support in case the w descriptor is used (for x descriptor this is not needed!),\n - data-sizes=\"auto\" has to be used in conjunction\n\n <img src=\"100.jpg\"\n \tdata-optimumx=\"1.8\"\n \tdata-sizes=\"auto\"\n \tdata-srcset=\"100.jpg 100w,\n \t300.jpg 300w,\n \t600.jpg 600w,\n \t900.jpg 900w,\n \t1200.jpg 1200w\"\n \t/>\n\n \tsee a live demo here: http://afarkas.github.io/lazysizes/maxdpr/\n */\n\n(function(window, factory) {\n\tvar globalInstall = function(){\n\t\tfactory(window.lazySizes);\n\t\twindow.removeEventListener('lazyunveilread', globalInstall, true);\n\t};\n\n\tfactory = factory.bind(null, window, window.document);\n\n\tif(typeof module == 'object' && module.exports){\n\t\tfactory(require('lazysizes'));\n\t} else if(window.lazySizes) {\n\t\tglobalInstall();\n\t} else {\n\t\twindow.addEventListener('lazyunveilread', globalInstall, true);\n\t}\n}(window, function(window, document, lazySizes) {\n\t/*jshint eqnull:true */\n\t'use strict';\n\tif(!window.addEventListener){return;}\n\n\tvar config;\n\n\tvar regPicture = /^picture$/i;\n\tvar docElem = document.documentElement;\n\n\tvar parseWsrcset = (function(){\n\t\tvar candidates;\n\t\tvar reg = /(([^,\\s].[^\\s]+)\\s+(\\d+)(w|h)(\\s+(\\d+)(w|h))?)/g;\n\t\tvar addCandidate = function(match, candidate, url, descNumber1, descType1, fullDesc, descNumber2, descType2){\n\t\t\tcandidates.push({\n\t\t\t\tc: candidate,\n\t\t\t\tu: url,\n\t\t\t\tw: (descType2 == 'w' ? descNumber2 : descNumber1)  * 1\n\t\t\t});\n\t\t};\n\n\t\treturn function(input){\n\t\t\tcandidates = [];\n\t\t\tinput.replace(reg, addCandidate);\n\t\t\treturn candidates;\n\t\t};\n\t})();\n\n\tvar parseImg = (function(){\n\n\t\tvar ascendingSort = function ( a, b ) {\n\t\t\treturn a.w - b.w;\n\t\t};\n\n\t\tvar parseSets =  function (elem, dataName){\n\t\t\tvar lazyData = {srcset: elem.getAttribute(lazySizes.cfg.srcsetAttr)  || ''};\n\t\t\tvar cands = parseWsrcset(lazyData.srcset);\n\t\t\tObject.defineProperty(elem, dataName, {\n\t\t\t\tvalue: lazyData,\n\t\t\t\twritable: true\n\t\t\t});\n\n\t\t\tlazyData.cands = cands;\n\n\t\t\tlazyData.index = 0;\n\t\t\tlazyData.dirty = false;\n\t\t\tif(cands[0] && cands[0].w){\n\n\t\t\t\tcands.sort( ascendingSort );\n\t\t\t\tlazyData.cSrcset = [cands[ lazyData.index ].c];\n\t\t\t} else {\n\t\t\t\tlazyData.cSrcset = lazyData.srcset ? [lazyData.srcset] : [];\n\t\t\t\tlazyData.cands = [];\n\t\t\t}\n\n\t\t\treturn lazyData;\n\t\t};\n\n\t\treturn function parseImg(elem, dataName){\n\t\t\tvar sources, i, len, parent;\n\n\n\t\t\tif(!elem[dataName]){\n\t\t\t\tparent = elem.parentNode || {};\n\t\t\t\telem[dataName] = parseSets(elem, dataName);\n\t\t\t\telem[dataName].isImg = true;\n\t\t\t\tif(regPicture.test(parent.nodeName || '')){\n\t\t\t\t\telem[dataName].picture = true;\n\t\t\t\t\tsources = parent.getElementsByTagName('source');\n\t\t\t\t\tfor(i = 0, len = sources.length; i < len; i++){\n\t\t\t\t\t\tparseSets(sources[i], dataName).isImg = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn elem[dataName];\n\t\t};\n\t})();\n\n\tvar constraintFns = {\n\t\t_lazyOptimumx: (function(){\n\t\t\tvar takeHighRes = function (lowerCandidate, higherCandidateResolution, optimumx){\n\t\t\t\tvar low, bonusFactor, substract;\n\t\t\t\tif(!lowerCandidate || !lowerCandidate.d){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tsubstract = optimumx > 0.7 ? 0.6 : 0.4;\n\n\t\t\t\tif(lowerCandidate.d >= optimumx){return false;}\n\n\t\t\t\tbonusFactor = Math.pow(lowerCandidate.d - substract, 1.6) || 0.1;\n\n\t\t\t\tif(bonusFactor < 0.1){\n\t\t\t\t\tbonusFactor = 0.1;\n\t\t\t\t} else if(bonusFactor > 3){\n\t\t\t\t\tbonusFactor = 3;\n\t\t\t\t}\n\n\t\t\t\tlow = lowerCandidate.d + ((higherCandidateResolution - optimumx) * bonusFactor);\n\n\t\t\t\treturn low < optimumx;\n\t\t\t};\n\n\t\t\treturn function (data, width, optimumx){\n\t\t\t\tvar i, can;\n\n\t\t\t\tfor(i = 0; i < data.cands.length; i++){\n\t\t\t\t\tcan = data.cands[i];\n\t\t\t\t\tcan.d = (can.w || 1) / width;\n\n\t\t\t\t\tif(data.index >= i){continue;}\n\n\t\t\t\t\tif(can.d <= optimumx || takeHighRes(data.cands[i - 1], can.d, optimumx)){\n\t\t\t\t\t\tdata.cSrcset.push(can.c);\n\t\t\t\t\t\tdata.index = i;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t})()\n\t};\n\n\tvar constrainSets = (function(){\n\n\t\tvar constrainSet = function(elem, displayWidth, optimumx, attr, dataName){\n\t\t\tvar curIndex;\n\t\t\tvar lazyData = elem[dataName];\n\n\t\t\tif(!lazyData){return;}\n\t\t\tcurIndex = lazyData.index;\n\n\t\t\tconstraintFns[dataName](lazyData, displayWidth, optimumx);\n\n\t\t\tif(!lazyData.dirty || curIndex != lazyData.index){\n\t\t\t\tlazyData.cSrcset.join(', ');\n\t\t\t\telem.setAttribute(attr, lazyData.cSrcset.join(', '));\n\t\t\t\tlazyData.dirty = true;\n\t\t\t}\n\t\t};\n\n\t\treturn function(image, displayWidth, optimumx, attr, dataName){\n\t\t\tvar sources, parent, len, i;\n\t\t\tvar lazyData = image[dataName];\n\n\t\t\tlazyData.width = displayWidth;\n\n\t\t\tif(lazyData.picture && (parent = image.parentNode)){\n\t\t\t\tsources = parent.getElementsByTagName('source');\n\t\t\t\tfor(i = 0, len = sources.length; i < len; i++){\n\t\t\t\t\tconstrainSet(sources[i], displayWidth, optimumx, attr, dataName);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconstrainSet(image, displayWidth, optimumx, attr, dataName);\n\t\t};\n\t})();\n\n\tvar getOptimumX = function(element){\n\t\tvar optimumx = element.getAttribute('data-optimumx') || element.getAttribute('data-maxdpr');\n\n\t\tif(!optimumx && config.constrainPixelDensity){\n\t\t\toptimumx = 'auto';\n\t\t}\n\n\t\tif(optimumx){\n\t\t\tif(optimumx == 'auto'){\n\t\t\t\toptimumx = config.getOptimumX(element);\n\t\t\t} else {\n\t\t\t\toptimumx = parseFloat(optimumx, 10);\n\t\t\t}\n\t\t}\n\t\treturn optimumx;\n\t};\n\n\tvar extentLazySizes = function(){\n\t\tif(lazySizes && !lazySizes.getOptimumX){\n\t\t\tlazySizes.getX = getOptimumX;\n\t\t\tlazySizes.pWS = parseWsrcset;\n\t\t\tdocElem.removeEventListener('lazybeforeunveil', extentLazySizes);\n\t\t}\n\t};\n\n\tdocElem.addEventListener('lazybeforeunveil', extentLazySizes);\n\tsetTimeout(extentLazySizes);\n\n\tconfig = (lazySizes && lazySizes.cfg) || window.lazySizesConfig;\n\n\tif(!config){\n\t\tconfig = {};\n\t\twindow.lazySizesConfig = config;\n\t}\n\n\tif(typeof config.getOptimumX != 'function'){\n\t\tconfig.getOptimumX = function(/*element*/){\n\t\t\tvar dpr = window.devicePixelRatio || 1;\n\t\t\tif(dpr > 2.6){\n\t\t\t\tdpr *= 0.6; // returns 1.8 for 3\n\t\t\t} else if(dpr > 1.9){\n\t\t\t\tdpr *= 0.8; // returns 1.6 for 2\n\t\t\t} else {\n\t\t\t\tdpr -= 0.01; // returns 0.99 for 1\n\t\t\t}\n\t\t\treturn Math.min(Math.round(dpr * 100) / 100, 2);\n\t\t};\n\t}\n\n\tif(!window.devicePixelRatio){return;}\n\n\taddEventListener('lazybeforesizes', function(e){\n\t\tif(e.detail.instance != lazySizes){return;}\n\n\t\tvar optimumx, lazyData, width, attr;\n\n\t\tvar elem = e.target;\n\t\tvar detail = e.detail;\n\t\tvar dataAttr = detail.dataAttr;\n\n\t\tif(e.defaultPrevented ||\n\t\t\t!(optimumx = getOptimumX(elem)) ||\n\t\t\toptimumx >= devicePixelRatio){return;}\n\n\t\tif(dataAttr && elem._lazyOptimumx && !detail.reloaded && (!config.unloadedClass || !lazySizes.hC(elem, config.unloadedClass))){\n\t\t\telem._lazyOptimumx = null;\n\t\t}\n\n\t\tlazyData = parseImg(elem, '_lazyOptimumx');\n\n\t\twidth = detail.width;\n\n\t\tif(width && (lazyData.width || 0) < width){\n\t\t\tattr = dataAttr ? lazySizes.cfg.srcsetAttr : 'srcset';\n\n\t\t\tlazySizes.rAF(function(){\n\t\t\t\tconstrainSets(elem, width, optimumx, attr, '_lazyOptimumx');\n\t\t\t});\n\t\t}\n\t});\n\n}));\n","(function(window, factory) {\n\tvar globalInstall = function(){\n\t\tfactory(window.lazySizes);\n\t\twindow.removeEventListener('lazyunveilread', globalInstall, true);\n\t};\n\n\tfactory = factory.bind(null, window, window.document);\n\n\tif(typeof module == 'object' && module.exports){\n\t\tfactory(require('lazysizes'));\n\t} else if(window.lazySizes) {\n\t\tglobalInstall();\n\t} else {\n\t\twindow.addEventListener('lazyunveilread', globalInstall, true);\n\t}\n}(window, function(window, document, lazySizes) {\n\t'use strict';\n\n\tif(!window.addEventListener){return;}\n\n\tvar regDescriptors = /\\s+(\\d+)(w|h)\\s+(\\d+)(w|h)/;\n\tvar regCssFit = /parent-fit[\"']*\\s*:\\s*[\"']*(contain|cover|width)/;\n\tvar regCssObject = /parent-container[\"']*\\s*:\\s*[\"']*(.+?)(?=(\\s|$|,|'|\"|;))/;\n\tvar regPicture = /^picture$/i;\n\n\tvar getCSS = function (elem){\n\t\treturn (getComputedStyle(elem, null) || {});\n\t};\n\n\tvar parentFit = {\n\n\t\tgetParent: function(element, parentSel){\n\t\t\tvar parent = element;\n\t\t\tvar parentNode = element.parentNode;\n\n\t\t\tif((!parentSel || parentSel == 'prev') && parentNode && regPicture.test(parentNode.nodeName || '')){\n\t\t\t\tparentNode = parentNode.parentNode;\n\t\t\t}\n\n\t\t\tif(parentSel != 'self'){\n\t\t\t\tif(parentSel == 'prev'){\n\t\t\t\t\tparent = element.previousElementSibling;\n\t\t\t\t} else if(parentSel && (parentNode.closest || window.jQuery)){\n\t\t\t\t\tparent = (parentNode.closest ?\n\t\t\t\t\t\t\tparentNode.closest(parentSel) :\n\t\t\t\t\t\t\tjQuery(parentNode).closest(parentSel)[0]) ||\n\t\t\t\t\t\tparentNode\n\t\t\t\t\t;\n\t\t\t\t} else {\n\t\t\t\t\tparent = parentNode;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn parent;\n\t\t},\n\n\t\tgetFit: function(element){\n\t\t\tvar tmpMatch, parentObj;\n\t\t\tvar css = getCSS(element);\n\t\t\tvar content = css.content || css.fontFamily;\n\t\t\tvar obj = {\n\t\t\t\tfit: element._lazysizesParentFit || element.getAttribute('data-parent-fit')\n\t\t\t};\n\n\t\t\tif(!obj.fit && content && (tmpMatch = content.match(regCssFit))){\n\t\t\t\tobj.fit = tmpMatch[1];\n\t\t\t}\n\n\t\t\tif(obj.fit){\n\t\t\t\tparentObj = element._lazysizesParentContainer || element.getAttribute('data-parent-container');\n\n\t\t\t\tif(!parentObj && content && (tmpMatch = content.match(regCssObject))){\n\t\t\t\t\tparentObj = tmpMatch[1];\n\t\t\t\t}\n\n\t\t\t\tobj.parent = parentFit.getParent(element, parentObj);\n\n\n\t\t\t} else {\n\t\t\t\tobj.fit = css.objectFit;\n\t\t\t}\n\n\t\t\treturn obj;\n\t\t},\n\n\t\tgetImageRatio: function(element){\n\t\t\tvar i, srcset, media, ratio;\n\t\t\tvar parent = element.parentNode;\n\t\t\tvar elements = parent && regPicture.test(parent.nodeName || '') ?\n\t\t\t\t\tparent.querySelectorAll('source, img') :\n\t\t\t\t\t[element]\n\t\t\t\t;\n\n\t\t\tfor(i = 0; i < elements.length; i++){\n\t\t\t\telement = elements[i];\n\t\t\t\tsrcset = element.getAttribute(lazySizesConfig.srcsetAttr) || element.getAttribute('srcset') || element.getAttribute('data-pfsrcset') || element.getAttribute('data-risrcset') || '';\n\t\t\t\tmedia = element._lsMedia || element.getAttribute('media');\n\t\t\t\tmedia = lazySizesConfig.customMedia[element.getAttribute('data-media') || media] || media;\n\n\t\t\t\tif(srcset && (!media || (window.matchMedia && matchMedia(media) || {}).matches )){\n\t\t\t\t\tratio = parseFloat(element.getAttribute('data-aspectratio'));\n\n\t\t\t\t\tif(!ratio && srcset.match(regDescriptors)){\n\t\t\t\t\t\tif(RegExp.$2 == 'w'){\n\t\t\t\t\t\t\tratio = RegExp.$1 / RegExp.$3;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tratio = RegExp.$3 / RegExp.$1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn ratio;\n\t\t},\n\n\t\tcalculateSize: function(element, width){\n\t\t\tvar displayRatio, height, imageRatio, retWidth;\n\t\t\tvar fitObj = this.getFit(element);\n\t\t\tvar fit = fitObj.fit;\n\t\t\tvar fitElem = fitObj.parent;\n\n\t\t\tif(fit != 'width' && ((fit != 'contain' && fit != 'cover') || !(imageRatio = this.getImageRatio(element)))){\n\t\t\t\treturn width;\n\t\t\t}\n\n\t\t\tif(fitElem){\n\t\t\t\twidth = fitElem.clientWidth;\n\t\t\t} else {\n\t\t\t\tfitElem = element;\n\t\t\t}\n\n\t\t\tretWidth = width;\n\n\t\t\tif(fit == 'width'){\n\t\t\t\tretWidth = width;\n\t\t\t} else {\n\t\t\t\theight = fitElem.clientHeight;\n\n\t\t\t\tif(height > 40 && (displayRatio =  width / height) && ((fit == 'cover' && displayRatio < imageRatio) || (fit == 'contain' && displayRatio > imageRatio))){\n\t\t\t\t\tretWidth = width * (imageRatio / displayRatio);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn retWidth;\n\t\t}\n\t};\n\n\tlazySizes.parentFit = parentFit;\n\n\tdocument.addEventListener('lazybeforesizes', function(e){\n\t\tif(e.defaultPrevented || e.detail.instance != lazySizes){return;}\n\n\t\tvar element = e.target;\n\t\te.detail.width = parentFit.calculateSize(element, e.detail.width);\n\t});\n}));\n","(function(window, factory) {\n\tvar globalInstall = function(){\n\t\tfactory(window.lazySizes);\n\t\twindow.removeEventListener('lazyunveilread', globalInstall, true);\n\t};\n\n\tfactory = factory.bind(null, window, window.document);\n\n\tif(typeof module == 'object' && module.exports){\n\t\tfactory(require('lazysizes'), require('../fix-ios-sizes/fix-ios-sizes'));\n\t} else if(window.lazySizes) {\n\t\tglobalInstall();\n\t} else {\n\t\twindow.addEventListener('lazyunveilread', globalInstall, true);\n\t}\n}(window, function(window, document, lazySizes) {\n\t/*jshint eqnull:true */\n\t'use strict';\n\tvar polyfill;\n\tvar config = (lazySizes && lazySizes.cfg) || window.lazySizesConfig;\n\tvar img = document.createElement('img');\n\tvar supportSrcset = ('sizes' in img) && ('srcset' in img);\n\tvar regHDesc = /\\s+\\d+h/g;\n\tvar fixEdgeHDescriptor = (function(){\n\t\tvar regDescriptors = /\\s+(\\d+)(w|h)\\s+(\\d+)(w|h)/;\n\t\tvar forEach = Array.prototype.forEach;\n\n\t\treturn function(edgeMatch){\n\t\t\tvar img = document.createElement('img');\n\t\t\tvar removeHDescriptors = function(source){\n\t\t\t\tvar ratio;\n\t\t\t\tvar srcset = source.getAttribute(lazySizesConfig.srcsetAttr);\n\t\t\t\tif(srcset){\n\t\t\t\t\tif(srcset.match(regDescriptors)){\n\t\t\t\t\t\tif(RegExp.$2 == 'w'){\n\t\t\t\t\t\t\tratio = RegExp.$1 / RegExp.$3;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tratio = RegExp.$3 / RegExp.$1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(ratio){\n\t\t\t\t\t\t\tsource.setAttribute('data-aspectratio', ratio);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tsource.setAttribute(lazySizesConfig.srcsetAttr, srcset.replace(regHDesc, ''));\n\t\t\t\t}\n\t\t\t};\n\t\t\tvar handler = function(e){\n\t\t\t\tvar picture = e.target.parentNode;\n\n\t\t\t\tif(picture && picture.nodeName == 'PICTURE'){\n\t\t\t\t\tforEach.call(picture.getElementsByTagName('source'), removeHDescriptors);\n\t\t\t\t}\n\t\t\t\tremoveHDescriptors(e.target);\n\t\t\t};\n\n\t\t\tvar test = function(){\n\t\t\t\tif(!!img.currentSrc){\n\t\t\t\t\tdocument.removeEventListener('lazybeforeunveil', handler);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif(edgeMatch[1]){\n\t\t\t\tdocument.addEventListener('lazybeforeunveil', handler);\n\n\t\t\t\tif(true || edgeMatch[1] > 14){\n\t\t\t\t\timg.onload = test;\n\t\t\t\t\timg.onerror = test;\n\n\t\t\t\t\timg.srcset = 'data:,a 1w 1h';\n\n\t\t\t\t\tif(img.complete){\n\t\t\t\t\t\ttest();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t})();\n\n\n\tif(!config){\n\t\tconfig = {};\n\t\twindow.lazySizesConfig = config;\n\t}\n\n\tif(!config.supportsType){\n\t\tconfig.supportsType = function(type/*, elem*/){\n\t\t\treturn !type;\n\t\t};\n\t}\n\n\tif(window.picturefill || config.pf){return;}\n\n\tif(window.HTMLPictureElement && supportSrcset){\n\n\t\tif(document.msElementsFromPoint){\n\t\t\tfixEdgeHDescriptor(navigator.userAgent.match(/Edge\\/(\\d+)/));\n\t\t}\n\n\t\tconfig.pf = function(){};\n\t\treturn;\n\t}\n\n\tconfig.pf = function(options){\n\t\tvar i, len;\n\t\tif(window.picturefill){return;}\n\t\tfor(i = 0, len = options.elements.length; i < len; i++){\n\t\t\tpolyfill(options.elements[i]);\n\t\t}\n\t};\n\n\t// partial polyfill\n\tpolyfill = (function(){\n\t\tvar ascendingSort = function( a, b ) {\n\t\t\treturn a.w - b.w;\n\t\t};\n\t\tvar regPxLength = /^\\s*\\d+\\.*\\d*px\\s*$/;\n\t\tvar reduceCandidate = function (srces) {\n\t\t\tvar lowerCandidate, bonusFactor;\n\t\t\tvar len = srces.length;\n\t\t\tvar candidate = srces[len -1];\n\t\t\tvar i = 0;\n\n\t\t\tfor(i; i < len;i++){\n\t\t\t\tcandidate = srces[i];\n\t\t\t\tcandidate.d = candidate.w / srces.w;\n\n\t\t\t\tif(candidate.d >= srces.d){\n\t\t\t\t\tif(!candidate.cached && (lowerCandidate = srces[i - 1]) &&\n\t\t\t\t\t\tlowerCandidate.d > srces.d - (0.13 * Math.pow(srces.d, 2.2))){\n\n\t\t\t\t\t\tbonusFactor = Math.pow(lowerCandidate.d - 0.6, 1.6);\n\n\t\t\t\t\t\tif(lowerCandidate.cached) {\n\t\t\t\t\t\t\tlowerCandidate.d += 0.15 * bonusFactor;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(lowerCandidate.d + ((candidate.d - srces.d) * bonusFactor) > srces.d){\n\t\t\t\t\t\t\tcandidate = lowerCandidate;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn candidate;\n\t\t};\n\n\t\tvar parseWsrcset = (function(){\n\t\t\tvar candidates;\n\t\t\tvar regWCandidates = /(([^,\\s].[^\\s]+)\\s+(\\d+)w)/g;\n\t\t\tvar regMultiple = /\\s/;\n\t\t\tvar addCandidate = function(match, candidate, url, wDescriptor){\n\t\t\t\tcandidates.push({\n\t\t\t\t\tc: candidate,\n\t\t\t\t\tu: url,\n\t\t\t\t\tw: wDescriptor * 1\n\t\t\t\t});\n\t\t\t};\n\n\t\t\treturn function(input){\n\t\t\t\tcandidates = [];\n\t\t\t\tinput = input.trim();\n\t\t\t\tinput\n\t\t\t\t\t.replace(regHDesc, '')\n\t\t\t\t\t.replace(regWCandidates, addCandidate)\n\t\t\t\t;\n\n\t\t\t\tif(!candidates.length && input && !regMultiple.test(input)){\n\t\t\t\t\tcandidates.push({\n\t\t\t\t\t\tc: input,\n\t\t\t\t\t\tu: input,\n\t\t\t\t\t\tw: 99\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn candidates;\n\t\t\t};\n\t\t})();\n\n\t\tvar runMatchMedia = function(){\n\t\t\tif(runMatchMedia.init){return;}\n\n\t\t\trunMatchMedia.init = true;\n\t\t\taddEventListener('resize', (function(){\n\t\t\t\tvar timer;\n\t\t\t\tvar matchMediaElems = document.getElementsByClassName('lazymatchmedia');\n\t\t\t\tvar run = function(){\n\t\t\t\t\tvar i, len;\n\t\t\t\t\tfor(i = 0, len = matchMediaElems.length; i < len; i++){\n\t\t\t\t\t\tpolyfill(matchMediaElems[i]);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\treturn function(){\n\t\t\t\t\tclearTimeout(timer);\n\t\t\t\t\ttimer = setTimeout(run, 66);\n\t\t\t\t};\n\t\t\t})());\n\t\t};\n\n\t\tvar createSrcset = function(elem, isImage){\n\t\t\tvar parsedSet;\n\t\t\tvar srcSet = elem.getAttribute('srcset') || elem.getAttribute(config.srcsetAttr);\n\n\t\t\tif(!srcSet && isImage){\n\t\t\t\tsrcSet = !elem._lazypolyfill ?\n\t\t\t\t\t(elem.getAttribute(config.srcAttr) || elem.getAttribute('src')) :\n\t\t\t\t\telem._lazypolyfill._set\n\t\t\t\t;\n\t\t\t}\n\n\t\t\tif(!elem._lazypolyfill || elem._lazypolyfill._set != srcSet){\n\n\t\t\t\tparsedSet = parseWsrcset( srcSet || '' );\n\t\t\t\tif(isImage && elem.parentNode){\n\t\t\t\t\tparsedSet.isPicture = elem.parentNode.nodeName.toUpperCase() == 'PICTURE';\n\n\t\t\t\t\tif(parsedSet.isPicture){\n\t\t\t\t\t\tif(window.matchMedia){\n\t\t\t\t\t\t\tlazySizes.aC(elem, 'lazymatchmedia');\n\t\t\t\t\t\t\trunMatchMedia();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tparsedSet._set = srcSet;\n\t\t\t\tObject.defineProperty(elem, '_lazypolyfill', {\n\t\t\t\t\tvalue: parsedSet,\n\t\t\t\t\twritable: true\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tvar getX = function(elem){\n\t\t\tvar dpr = window.devicePixelRatio || 1;\n\t\t\tvar optimum = lazySizes.getX && lazySizes.getX(elem);\n\t\t\treturn Math.min(optimum || dpr, 2.5, dpr);\n\t\t};\n\n\t\tvar matchesMedia = function(media){\n\t\t\tif(window.matchMedia){\n\t\t\t\tmatchesMedia = function(media){\n\t\t\t\t\treturn !media || (matchMedia(media) || {}).matches;\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn !media;\n\t\t\t}\n\n\t\t\treturn matchesMedia(media);\n\t\t};\n\n\t\tvar getCandidate = function(elem){\n\t\t\tvar sources, i, len, media, source, srces, src, width;\n\n\t\t\tsource = elem;\n\t\t\tcreateSrcset(source, true);\n\t\t\tsrces = source._lazypolyfill;\n\n\t\t\tif(srces.isPicture){\n\t\t\t\tfor(i = 0, sources = elem.parentNode.getElementsByTagName('source'), len = sources.length; i < len; i++){\n\t\t\t\t\tif( config.supportsType(sources[i].getAttribute('type'), elem) && matchesMedia( sources[i].getAttribute('media')) ){\n\t\t\t\t\t\tsource = sources[i];\n\t\t\t\t\t\tcreateSrcset(source);\n\t\t\t\t\t\tsrces = source._lazypolyfill;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(srces.length > 1){\n\t\t\t\twidth = source.getAttribute('sizes') || '';\n\t\t\t\twidth = regPxLength.test(width) && parseInt(width, 10) || lazySizes.gW(elem, elem.parentNode);\n\t\t\t\tsrces.d = getX(elem);\n\t\t\t\tif(!srces.src || !srces.w || srces.w < width){\n\t\t\t\t\tsrces.w = width;\n\t\t\t\t\tsrc = reduceCandidate(srces.sort(ascendingSort));\n\t\t\t\t\tsrces.src = src;\n\t\t\t\t} else {\n\t\t\t\t\tsrc = srces.src;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsrc = srces[0];\n\t\t\t}\n\n\t\t\treturn src;\n\t\t};\n\n\t\tvar p = function(elem){\n\t\t\tif(supportSrcset && elem.parentNode && elem.parentNode.nodeName.toUpperCase() != 'PICTURE'){return;}\n\t\t\tvar candidate = getCandidate(elem);\n\n\t\t\tif(candidate && candidate.u && elem._lazypolyfill.cur != candidate.u){\n\t\t\t\telem._lazypolyfill.cur = candidate.u;\n\t\t\t\tcandidate.cached = true;\n\t\t\t\telem.setAttribute(config.srcAttr, candidate.u);\n\t\t\t\telem.setAttribute('src', candidate.u);\n\t\t\t}\n\t\t};\n\n\t\tp.parse = parseWsrcset;\n\n\t\treturn p;\n\t})();\n\n\tif(config.loadedClass && config.loadingClass){\n\t\t(function(){\n\t\t\tvar sels = [];\n\t\t\t['img[sizes$=\"px\"][srcset].', 'picture > img:not([srcset]).'].forEach(function(sel){\n\t\t\t\tsels.push(sel + config.loadedClass);\n\t\t\t\tsels.push(sel + config.loadingClass);\n\t\t\t});\n\t\t\tconfig.pf({\n\t\t\t\telements: document.querySelectorAll(sels.join(', '))\n\t\t\t});\n\t\t})();\n\n\t}\n}));\n","/*! lightgallery - v1.6.5 - 2017-11-16\r\n* http://sachinchoolur.github.io/lightGallery/\r\n* Copyright (c) 2017 Sachin N; Licensed GPLv3 */\r\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define(['jquery'], function (a0) {\n      return (factory(a0));\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(require('jquery'));\n  } else {\n    factory(root[\"jQuery\"]);\n  }\n}(this, function ($) {\n\n(function() {\r\n    'use strict';\r\n\r\n    var defaults = {\r\n\r\n        mode: 'lg-slide',\r\n\r\n        // Ex : 'ease'\r\n        cssEasing: 'ease',\r\n\r\n        //'for jquery animation'\r\n        easing: 'linear',\r\n        speed: 600,\r\n        height: '100%',\r\n        width: '100%',\r\n        addClass: '',\r\n        startClass: 'lg-start-zoom',\r\n        backdropDuration: 150,\r\n        hideBarsDelay: 6000,\r\n\r\n        useLeft: false,\r\n\r\n        closable: true,\r\n        loop: true,\r\n        escKey: true,\r\n        keyPress: true,\r\n        controls: true,\r\n        slideEndAnimatoin: true,\r\n        hideControlOnEnd: false,\r\n        mousewheel: true,\r\n\r\n        getCaptionFromTitleOrAlt: true,\r\n\r\n        // .lg-item || '.lg-sub-html'\r\n        appendSubHtmlTo: '.lg-sub-html',\r\n\r\n        subHtmlSelectorRelative: false,\r\n\r\n        /**\r\n         * @desc number of preload slides\r\n         * will exicute only after the current slide is fully loaded.\r\n         *\r\n         * @ex you clicked on 4th image and if preload = 1 then 3rd slide and 5th\r\n         * slide will be loaded in the background after the 4th slide is fully loaded..\r\n         * if preload is 2 then 2nd 3rd 5th 6th slides will be preloaded.. ... ...\r\n         *\r\n         */\r\n        preload: 1,\r\n        showAfterLoad: true,\r\n        selector: '',\r\n        selectWithin: '',\r\n        nextHtml: '',\r\n        prevHtml: '',\r\n\r\n        // 0, 1\r\n        index: false,\r\n\r\n        iframeMaxWidth: '100%',\r\n\r\n        download: true,\r\n        counter: true,\r\n        appendCounterTo: '.lg-toolbar',\r\n\r\n        swipeThreshold: 50,\r\n        enableSwipe: true,\r\n        enableDrag: true,\r\n\r\n        dynamic: false,\r\n        dynamicEl: [],\r\n        galleryId: 1\r\n    };\r\n\r\n    function Plugin(element, options) {\r\n\r\n        // Current lightGallery element\r\n        this.el = element;\r\n\r\n        // Current jquery element\r\n        this.$el = $(element);\r\n\r\n        // lightGallery settings\r\n        this.s = $.extend({}, defaults, options);\r\n\r\n        // When using dynamic mode, ensure dynamicEl is an array\r\n        if (this.s.dynamic && this.s.dynamicEl !== 'undefined' && this.s.dynamicEl.constructor === Array && !this.s.dynamicEl.length) {\r\n            throw ('When using dynamic mode, you must also define dynamicEl as an Array.');\r\n        }\r\n\r\n        // lightGallery modules\r\n        this.modules = {};\r\n\r\n        // false when lightgallery complete first slide;\r\n        this.lGalleryOn = false;\r\n\r\n        this.lgBusy = false;\r\n\r\n        // Timeout function for hiding controls;\r\n        this.hideBartimeout = false;\r\n\r\n        // To determine browser supports for touch events;\r\n        this.isTouch = ('ontouchstart' in document.documentElement);\r\n\r\n        // Disable hideControlOnEnd if sildeEndAnimation is true\r\n        if (this.s.slideEndAnimatoin) {\r\n            this.s.hideControlOnEnd = false;\r\n        }\r\n\r\n        // Gallery items\r\n        if (this.s.dynamic) {\r\n            this.$items = this.s.dynamicEl;\r\n        } else {\r\n            if (this.s.selector === 'this') {\r\n                this.$items = this.$el;\r\n            } else if (this.s.selector !== '') {\r\n                if (this.s.selectWithin) {\r\n                    this.$items = $(this.s.selectWithin).find(this.s.selector);\r\n                } else {\r\n                    this.$items = this.$el.find($(this.s.selector));\r\n                }\r\n            } else {\r\n                this.$items = this.$el.children();\r\n            }\r\n        }\r\n\r\n        // .lg-item\r\n        this.$slide = '';\r\n\r\n        // .lg-outer\r\n        this.$outer = '';\r\n\r\n        this.init();\r\n\r\n        return this;\r\n    }\r\n\r\n    Plugin.prototype.init = function() {\r\n\r\n        var _this = this;\r\n\r\n        // s.preload should not be more than $item.length\r\n        if (_this.s.preload > _this.$items.length) {\r\n            _this.s.preload = _this.$items.length;\r\n        }\r\n\r\n        // if dynamic option is enabled execute immediately\r\n        var _hash = window.location.hash;\r\n        if (_hash.indexOf('lg=' + this.s.galleryId) > 0) {\r\n\r\n            _this.index = parseInt(_hash.split('&slide=')[1], 10);\r\n\r\n            $('body').addClass('lg-from-hash');\r\n            if (!$('body').hasClass('lg-on')) {\r\n                setTimeout(function() {\r\n                    _this.build(_this.index);\r\n                });\r\n\r\n                $('body').addClass('lg-on');\r\n            }\r\n        }\r\n\r\n        if (_this.s.dynamic) {\r\n\r\n            _this.$el.trigger('onBeforeOpen.lg');\r\n\r\n            _this.index = _this.s.index || 0;\r\n\r\n            // prevent accidental double execution\r\n            if (!$('body').hasClass('lg-on')) {\r\n                setTimeout(function() {\r\n                    _this.build(_this.index);\r\n                    $('body').addClass('lg-on');\r\n                });\r\n            }\r\n        } else {\r\n\r\n            // Using different namespace for click because click event should not unbind if selector is same object('this')\r\n            _this.$items.on('click.lgcustom', function(event) {\r\n\r\n                // For IE8\r\n                try {\r\n                    event.preventDefault();\r\n                    event.preventDefault();\r\n                } catch (er) {\r\n                    event.returnValue = false;\r\n                }\r\n\r\n                _this.$el.trigger('onBeforeOpen.lg');\r\n\r\n                _this.index = _this.s.index || _this.$items.index(this);\r\n\r\n                // prevent accidental double execution\r\n                if (!$('body').hasClass('lg-on')) {\r\n                    _this.build(_this.index);\r\n                    $('body').addClass('lg-on');\r\n                }\r\n            });\r\n        }\r\n\r\n    };\r\n\r\n    Plugin.prototype.build = function(index) {\r\n\r\n        var _this = this;\r\n\r\n        _this.structure();\r\n\r\n        // module constructor\r\n        $.each($.fn.lightGallery.modules, function(key) {\r\n            _this.modules[key] = new $.fn.lightGallery.modules[key](_this.el);\r\n        });\r\n\r\n        // initiate slide function\r\n        _this.slide(index, false, false, false);\r\n\r\n        if (_this.s.keyPress) {\r\n            _this.keyPress();\r\n        }\r\n\r\n        if (_this.$items.length > 1) {\r\n\r\n            _this.arrow();\r\n\r\n            setTimeout(function() {\r\n                _this.enableDrag();\r\n                _this.enableSwipe();\r\n            }, 50);\r\n\r\n            if (_this.s.mousewheel) {\r\n                _this.mousewheel();\r\n            }\r\n        } else {\r\n            _this.$slide.on('click.lg', function() {\r\n                _this.$el.trigger('onSlideClick.lg');\r\n            });\r\n        }\r\n\r\n        _this.counter();\r\n\r\n        _this.closeGallery();\r\n\r\n        _this.$el.trigger('onAfterOpen.lg');\r\n\r\n        // Hide controllers if mouse doesn't move for some period\r\n        _this.$outer.on('mousemove.lg click.lg touchstart.lg', function() {\r\n\r\n            _this.$outer.removeClass('lg-hide-items');\r\n\r\n            clearTimeout(_this.hideBartimeout);\r\n\r\n            // Timeout will be cleared on each slide movement also\r\n            _this.hideBartimeout = setTimeout(function() {\r\n                _this.$outer.addClass('lg-hide-items');\r\n            }, _this.s.hideBarsDelay);\r\n\r\n        });\r\n\r\n        _this.$outer.trigger('mousemove.lg');\r\n\r\n    };\r\n\r\n    Plugin.prototype.structure = function() {\r\n        var list = '';\r\n        var controls = '';\r\n        var i = 0;\r\n        var subHtmlCont = '';\r\n        var template;\r\n        var _this = this;\r\n\r\n        $('body').append('<div class=\"lg-backdrop\"></div>');\r\n        $('.lg-backdrop').css('transition-duration', this.s.backdropDuration + 'ms');\r\n\r\n        // Create gallery items\r\n        for (i = 0; i < this.$items.length; i++) {\r\n            list += '<div class=\"lg-item\"></div>';\r\n        }\r\n\r\n        // Create controlls\r\n        if (this.s.controls && this.$items.length > 1) {\r\n            controls = '<div class=\"lg-actions\">' +\r\n                '<button class=\"lg-prev lg-icon\">' + this.s.prevHtml + '</button>' +\r\n                '<button class=\"lg-next lg-icon\">' + this.s.nextHtml + '</button>' +\r\n                '</div>';\r\n        }\r\n\r\n        if (this.s.appendSubHtmlTo === '.lg-sub-html') {\r\n            subHtmlCont = '<div class=\"lg-sub-html\"></div>';\r\n        }\r\n\r\n        template = '<div class=\"lg-outer ' + this.s.addClass + ' ' + this.s.startClass + '\">' +\r\n            '<div class=\"lg\" style=\"width:' + this.s.width + '; height:' + this.s.height + '\">' +\r\n            '<div class=\"lg-inner\">' + list + '</div>' +\r\n            '<div class=\"lg-toolbar lg-group\">' +\r\n            '<span class=\"lg-close lg-icon\"></span>' +\r\n            '</div>' +\r\n            controls +\r\n            subHtmlCont +\r\n            '</div>' +\r\n            '</div>';\r\n\r\n        $('body').append(template);\r\n        this.$outer = $('.lg-outer');\r\n        this.$slide = this.$outer.find('.lg-item');\r\n\r\n        if (this.s.useLeft) {\r\n            this.$outer.addClass('lg-use-left');\r\n\r\n            // Set mode lg-slide if use left is true;\r\n            this.s.mode = 'lg-slide';\r\n        } else {\r\n            this.$outer.addClass('lg-use-css3');\r\n        }\r\n\r\n        // For fixed height gallery\r\n        _this.setTop();\r\n        $(window).on('resize.lg orientationchange.lg', function() {\r\n            setTimeout(function() {\r\n                _this.setTop();\r\n            }, 100);\r\n        });\r\n\r\n        // add class lg-current to remove initial transition\r\n        this.$slide.eq(this.index).addClass('lg-current');\r\n\r\n        // add Class for css support and transition mode\r\n        if (this.doCss()) {\r\n            this.$outer.addClass('lg-css3');\r\n        } else {\r\n            this.$outer.addClass('lg-css');\r\n\r\n            // Set speed 0 because no animation will happen if browser doesn't support css3\r\n            this.s.speed = 0;\r\n        }\r\n\r\n        this.$outer.addClass(this.s.mode);\r\n\r\n        if (this.s.enableDrag && this.$items.length > 1) {\r\n            this.$outer.addClass('lg-grab');\r\n        }\r\n\r\n        if (this.s.showAfterLoad) {\r\n            this.$outer.addClass('lg-show-after-load');\r\n        }\r\n\r\n        if (this.doCss()) {\r\n            var $inner = this.$outer.find('.lg-inner');\r\n            $inner.css('transition-timing-function', this.s.cssEasing);\r\n            $inner.css('transition-duration', this.s.speed + 'ms');\r\n        }\r\n\r\n        setTimeout(function() {\r\n            $('.lg-backdrop').addClass('in');\r\n        });\r\n\r\n        setTimeout(function() {\r\n            _this.$outer.addClass('lg-visible');\r\n        }, this.s.backdropDuration);\r\n\r\n        if (this.s.download) {\r\n            this.$outer.find('.lg-toolbar').append('<a id=\"lg-download\" target=\"_blank\" download class=\"lg-download lg-icon\"></a>');\r\n        }\r\n\r\n        // Store the current scroll top value to scroll back after closing the gallery..\r\n        this.prevScrollTop = $(window).scrollTop();\r\n\r\n    };\r\n\r\n    // For fixed height gallery\r\n    Plugin.prototype.setTop = function() {\r\n        if (this.s.height !== '100%') {\r\n            var wH = $(window).height();\r\n            var top = (wH - parseInt(this.s.height, 10)) / 2;\r\n            var $lGallery = this.$outer.find('.lg');\r\n            if (wH >= parseInt(this.s.height, 10)) {\r\n                $lGallery.css('top', top + 'px');\r\n            } else {\r\n                $lGallery.css('top', '0px');\r\n            }\r\n        }\r\n    };\r\n\r\n    // Find css3 support\r\n    Plugin.prototype.doCss = function() {\r\n        // check for css animation support\r\n        var support = function() {\r\n            var transition = ['transition', 'MozTransition', 'WebkitTransition', 'OTransition', 'msTransition', 'KhtmlTransition'];\r\n            var root = document.documentElement;\r\n            var i = 0;\r\n            for (i = 0; i < transition.length; i++) {\r\n                if (transition[i] in root.style) {\r\n                    return true;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (support()) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     *  @desc Check the given src is video\r\n     *  @param {String} src\r\n     *  @return {Object} video type\r\n     *  Ex:{ youtube  :  [\"//www.youtube.com/watch?v=c0asJgSyxcY\", \"c0asJgSyxcY\"] }\r\n     */\r\n    Plugin.prototype.isVideo = function(src, index) {\r\n\r\n        var html;\r\n        if (this.s.dynamic) {\r\n            html = this.s.dynamicEl[index].html;\r\n        } else {\r\n            html = this.$items.eq(index).attr('data-html');\r\n        }\r\n\r\n        if (!src) {\r\n            if(html) {\r\n                return {\r\n                    html5: true\r\n                };\r\n            } else {\r\n                console.error('lightGallery :- data-src is not pvovided on slide item ' + (index + 1) + '. Please make sure the selector property is properly configured. More info - http://sachinchoolur.github.io/lightGallery/demos/html-markup.html');\r\n                return false;\r\n            }\r\n        }\r\n\r\n        var youtube = src.match(/\\/\\/(?:www\\.)?youtu(?:\\.be|be\\.com)\\/(?:watch\\?v=|embed\\/)?([a-z0-9\\-\\_\\%]+)/i);\r\n        var vimeo = src.match(/\\/\\/(?:www\\.)?vimeo.com\\/([0-9a-z\\-_]+)/i);\r\n        var dailymotion = src.match(/\\/\\/(?:www\\.)?dai.ly\\/([0-9a-z\\-_]+)/i);\r\n        var vk = src.match(/\\/\\/(?:www\\.)?(?:vk\\.com|vkontakte\\.ru)\\/(?:video_ext\\.php\\?)(.*)/i);\r\n\r\n        if (youtube) {\r\n            return {\r\n                youtube: youtube\r\n            };\r\n        } else if (vimeo) {\r\n            return {\r\n                vimeo: vimeo\r\n            };\r\n        } else if (dailymotion) {\r\n            return {\r\n                dailymotion: dailymotion\r\n            };\r\n        } else if (vk) {\r\n            return {\r\n                vk: vk\r\n            };\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @desc Create image counter\r\n     *  Ex: 1/10\r\n     */\r\n    Plugin.prototype.counter = function() {\r\n        if (this.s.counter) {\r\n            $(this.s.appendCounterTo).append('<div id=\"lg-counter\"><span id=\"lg-counter-current\">' + (parseInt(this.index, 10) + 1) + '</span> / <span id=\"lg-counter-all\">' + this.$items.length + '</span></div>');\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @desc add sub-html into the slide\r\n     *  @param {Number} index - index of the slide\r\n     */\r\n    Plugin.prototype.addHtml = function(index) {\r\n        var subHtml = null;\r\n        var subHtmlUrl;\r\n        var $currentEle;\r\n        if (this.s.dynamic) {\r\n            if (this.s.dynamicEl[index].subHtmlUrl) {\r\n                subHtmlUrl = this.s.dynamicEl[index].subHtmlUrl;\r\n            } else {\r\n                subHtml = this.s.dynamicEl[index].subHtml;\r\n            }\r\n        } else {\r\n            $currentEle = this.$items.eq(index);\r\n            if ($currentEle.attr('data-sub-html-url')) {\r\n                subHtmlUrl = $currentEle.attr('data-sub-html-url');\r\n            } else {\r\n                subHtml = $currentEle.attr('data-sub-html');\r\n                if (this.s.getCaptionFromTitleOrAlt && !subHtml) {\r\n                    subHtml = $currentEle.attr('title') || $currentEle.find('img').first().attr('alt');\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!subHtmlUrl) {\r\n            if (typeof subHtml !== 'undefined' && subHtml !== null) {\r\n\r\n                // get first letter of subhtml\r\n                // if first letter starts with . or # get the html form the jQuery object\r\n                var fL = subHtml.substring(0, 1);\r\n                if (fL === '.' || fL === '#') {\r\n                    if (this.s.subHtmlSelectorRelative && !this.s.dynamic) {\r\n                        subHtml = $currentEle.find(subHtml).html();\r\n                    } else {\r\n                        subHtml = $(subHtml).html();\r\n                    }\r\n                }\r\n            } else {\r\n                subHtml = '';\r\n            }\r\n        }\r\n\r\n        if (this.s.appendSubHtmlTo === '.lg-sub-html') {\r\n\r\n            if (subHtmlUrl) {\r\n                this.$outer.find(this.s.appendSubHtmlTo).load(subHtmlUrl);\r\n            } else {\r\n                this.$outer.find(this.s.appendSubHtmlTo).html(subHtml);\r\n            }\r\n\r\n        } else {\r\n\r\n            if (subHtmlUrl) {\r\n                this.$slide.eq(index).load(subHtmlUrl);\r\n            } else {\r\n                this.$slide.eq(index).append(subHtml);\r\n            }\r\n        }\r\n\r\n        // Add lg-empty-html class if title doesn't exist\r\n        if (typeof subHtml !== 'undefined' && subHtml !== null) {\r\n            if (subHtml === '') {\r\n                this.$outer.find(this.s.appendSubHtmlTo).addClass('lg-empty-html');\r\n            } else {\r\n                this.$outer.find(this.s.appendSubHtmlTo).removeClass('lg-empty-html');\r\n            }\r\n        }\r\n\r\n        this.$el.trigger('onAfterAppendSubHtml.lg', [index]);\r\n    };\r\n\r\n    /**\r\n     *  @desc Preload slides\r\n     *  @param {Number} index - index of the slide\r\n     */\r\n    Plugin.prototype.preload = function(index) {\r\n        var i = 1;\r\n        var j = 1;\r\n        for (i = 1; i <= this.s.preload; i++) {\r\n            if (i >= this.$items.length - index) {\r\n                break;\r\n            }\r\n\r\n            this.loadContent(index + i, false, 0);\r\n        }\r\n\r\n        for (j = 1; j <= this.s.preload; j++) {\r\n            if (index - j < 0) {\r\n                break;\r\n            }\r\n\r\n            this.loadContent(index - j, false, 0);\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @desc Load slide content into slide.\r\n     *  @param {Number} index - index of the slide.\r\n     *  @param {Boolean} rec - if true call loadcontent() function again.\r\n     *  @param {Boolean} delay - delay for adding complete class. it is 0 except first time.\r\n     */\r\n    Plugin.prototype.loadContent = function(index, rec, delay) {\r\n\r\n        var _this = this;\r\n        var _hasPoster = false;\r\n        var _$img;\r\n        var _src;\r\n        var _poster;\r\n        var _srcset;\r\n        var _sizes;\r\n        var _html;\r\n        var getResponsiveSrc = function(srcItms) {\r\n            var rsWidth = [];\r\n            var rsSrc = [];\r\n            for (var i = 0; i < srcItms.length; i++) {\r\n                var __src = srcItms[i].split(' ');\r\n\r\n                // Manage empty space\r\n                if (__src[0] === '') {\r\n                    __src.splice(0, 1);\r\n                }\r\n\r\n                rsSrc.push(__src[0]);\r\n                rsWidth.push(__src[1]);\r\n            }\r\n\r\n            var wWidth = $(window).width();\r\n            for (var j = 0; j < rsWidth.length; j++) {\r\n                if (parseInt(rsWidth[j], 10) > wWidth) {\r\n                    _src = rsSrc[j];\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (_this.s.dynamic) {\r\n\r\n            if (_this.s.dynamicEl[index].poster) {\r\n                _hasPoster = true;\r\n                _poster = _this.s.dynamicEl[index].poster;\r\n            }\r\n\r\n            _html = _this.s.dynamicEl[index].html;\r\n            _src = _this.s.dynamicEl[index].src;\r\n\r\n            if (_this.s.dynamicEl[index].responsive) {\r\n                var srcDyItms = _this.s.dynamicEl[index].responsive.split(',');\r\n                getResponsiveSrc(srcDyItms);\r\n            }\r\n\r\n            _srcset = _this.s.dynamicEl[index].srcset;\r\n            _sizes = _this.s.dynamicEl[index].sizes;\r\n\r\n        } else {\r\n\r\n            if (_this.$items.eq(index).attr('data-poster')) {\r\n                _hasPoster = true;\r\n                _poster = _this.$items.eq(index).attr('data-poster');\r\n            }\r\n\r\n            _html = _this.$items.eq(index).attr('data-html');\r\n            _src = _this.$items.eq(index).attr('href') || _this.$items.eq(index).attr('data-src');\r\n\r\n            if (_this.$items.eq(index).attr('data-responsive')) {\r\n                var srcItms = _this.$items.eq(index).attr('data-responsive').split(',');\r\n                getResponsiveSrc(srcItms);\r\n            }\r\n\r\n            _srcset = _this.$items.eq(index).attr('data-srcset');\r\n            _sizes = _this.$items.eq(index).attr('data-sizes');\r\n\r\n        }\r\n\r\n        //if (_src || _srcset || _sizes || _poster) {\r\n\r\n        var iframe = false;\r\n        if (_this.s.dynamic) {\r\n            if (_this.s.dynamicEl[index].iframe) {\r\n                iframe = true;\r\n            }\r\n        } else {\r\n            if (_this.$items.eq(index).attr('data-iframe') === 'true') {\r\n                iframe = true;\r\n            }\r\n        }\r\n\r\n        var _isVideo = _this.isVideo(_src, index);\r\n        if (!_this.$slide.eq(index).hasClass('lg-loaded')) {\r\n            if (iframe) {\r\n                _this.$slide.eq(index).prepend('<div class=\"lg-video-cont lg-has-iframe\" style=\"max-width:' + _this.s.iframeMaxWidth + '\"><div class=\"lg-video\"><iframe class=\"lg-object\" frameborder=\"0\" src=\"' + _src + '\"  allowfullscreen=\"true\"></iframe></div></div>');\r\n            } else if (_hasPoster) {\r\n                var videoClass = '';\r\n                if (_isVideo && _isVideo.youtube) {\r\n                    videoClass = 'lg-has-youtube';\r\n                } else if (_isVideo && _isVideo.vimeo) {\r\n                    videoClass = 'lg-has-vimeo';\r\n                } else {\r\n                    videoClass = 'lg-has-html5';\r\n                }\r\n\r\n                _this.$slide.eq(index).prepend('<div class=\"lg-video-cont ' + videoClass + ' \"><div class=\"lg-video\"><span class=\"lg-video-play\"></span><img class=\"lg-object lg-has-poster\" src=\"' + _poster + '\" /></div></div>');\r\n\r\n            } else if (_isVideo) {\r\n                _this.$slide.eq(index).prepend('<div class=\"lg-video-cont \"><div class=\"lg-video\"></div></div>');\r\n                _this.$el.trigger('hasVideo.lg', [index, _src, _html]);\r\n            } else {\r\n                _this.$slide.eq(index).prepend('<div class=\"lg-img-wrap\"><img class=\"lg-object lg-image\" src=\"' + _src + '\" /></div>');\r\n            }\r\n\r\n            _this.$el.trigger('onAferAppendSlide.lg', [index]);\r\n\r\n            _$img = _this.$slide.eq(index).find('.lg-object');\r\n            if (_sizes) {\r\n                _$img.attr('sizes', _sizes);\r\n            }\r\n\r\n            if (_srcset) {\r\n                _$img.attr('srcset', _srcset);\r\n                try {\r\n                    picturefill({\r\n                        elements: [_$img[0]]\r\n                    });\r\n                } catch (e) {\r\n                    console.warn('lightGallery :- If you want srcset to be supported for older browser please include picturefil version 2 javascript library in your document.');\r\n                }\r\n            }\r\n\r\n            if (this.s.appendSubHtmlTo !== '.lg-sub-html') {\r\n                _this.addHtml(index);\r\n            }\r\n\r\n            _this.$slide.eq(index).addClass('lg-loaded');\r\n        }\r\n\r\n        _this.$slide.eq(index).find('.lg-object').on('load.lg error.lg', function() {\r\n\r\n            // For first time add some delay for displaying the start animation.\r\n            var _speed = 0;\r\n\r\n            // Do not change the delay value because it is required for zoom plugin.\r\n            // If gallery opened from direct url (hash) speed value should be 0\r\n            if (delay && !$('body').hasClass('lg-from-hash')) {\r\n                _speed = delay;\r\n            }\r\n\r\n            setTimeout(function() {\r\n                _this.$slide.eq(index).addClass('lg-complete');\r\n                _this.$el.trigger('onSlideItemLoad.lg', [index, delay || 0]);\r\n            }, _speed);\r\n\r\n        });\r\n\r\n        // @todo check load state for html5 videos\r\n        if (_isVideo && _isVideo.html5 && !_hasPoster) {\r\n            _this.$slide.eq(index).addClass('lg-complete');\r\n        }\r\n\r\n        if (rec === true) {\r\n            if (!_this.$slide.eq(index).hasClass('lg-complete')) {\r\n                _this.$slide.eq(index).find('.lg-object').on('load.lg error.lg', function() {\r\n                    _this.preload(index);\r\n                });\r\n            } else {\r\n                _this.preload(index);\r\n            }\r\n        }\r\n\r\n        //}\r\n    };\r\n\r\n    /**\r\n    *   @desc slide function for lightgallery\r\n        ** Slide() gets call on start\r\n        ** ** Set lg.on true once slide() function gets called.\r\n        ** Call loadContent() on slide() function inside setTimeout\r\n        ** ** On first slide we do not want any animation like slide of fade\r\n        ** ** So on first slide( if lg.on if false that is first slide) loadContent() should start loading immediately\r\n        ** ** Else loadContent() should wait for the transition to complete.\r\n        ** ** So set timeout s.speed + 50\r\n    <=> ** loadContent() will load slide content in to the particular slide\r\n        ** ** It has recursion (rec) parameter. if rec === true loadContent() will call preload() function.\r\n        ** ** preload will execute only when the previous slide is fully loaded (images iframe)\r\n        ** ** avoid simultaneous image load\r\n    <=> ** Preload() will check for s.preload value and call loadContent() again accoring to preload value\r\n        ** loadContent()  <====> Preload();\r\n\r\n    *   @param {Number} index - index of the slide\r\n    *   @param {Boolean} fromTouch - true if slide function called via touch event or mouse drag\r\n    *   @param {Boolean} fromThumb - true if slide function called via thumbnail click\r\n    *   @param {String} direction - Direction of the slide(next/prev)\r\n    */\r\n    Plugin.prototype.slide = function(index, fromTouch, fromThumb, direction) {\r\n\r\n        var _prevIndex = this.$outer.find('.lg-current').index();\r\n        var _this = this;\r\n\r\n        // Prevent if multiple call\r\n        // Required for hsh plugin\r\n        if (_this.lGalleryOn && (_prevIndex === index)) {\r\n            return;\r\n        }\r\n\r\n        var _length = this.$slide.length;\r\n        var _time = _this.lGalleryOn ? this.s.speed : 0;\r\n\r\n        if (!_this.lgBusy) {\r\n\r\n            if (this.s.download) {\r\n                var _src;\r\n                if (_this.s.dynamic) {\r\n                    _src = _this.s.dynamicEl[index].downloadUrl !== false && (_this.s.dynamicEl[index].downloadUrl || _this.s.dynamicEl[index].src);\r\n                } else {\r\n                    _src = _this.$items.eq(index).attr('data-download-url') !== 'false' && (_this.$items.eq(index).attr('data-download-url') || _this.$items.eq(index).attr('href') || _this.$items.eq(index).attr('data-src'));\r\n\r\n                }\r\n\r\n                if (_src) {\r\n                    $('#lg-download').attr('href', _src);\r\n                    _this.$outer.removeClass('lg-hide-download');\r\n                } else {\r\n                    _this.$outer.addClass('lg-hide-download');\r\n                }\r\n            }\r\n\r\n            this.$el.trigger('onBeforeSlide.lg', [_prevIndex, index, fromTouch, fromThumb]);\r\n\r\n            _this.lgBusy = true;\r\n\r\n            clearTimeout(_this.hideBartimeout);\r\n\r\n            // Add title if this.s.appendSubHtmlTo === lg-sub-html\r\n            if (this.s.appendSubHtmlTo === '.lg-sub-html') {\r\n\r\n                // wait for slide animation to complete\r\n                setTimeout(function() {\r\n                    _this.addHtml(index);\r\n                }, _time);\r\n            }\r\n\r\n            this.arrowDisable(index);\r\n\r\n            if (!direction) {\r\n                if (index < _prevIndex) {\r\n                    direction = 'prev';\r\n                } else if (index > _prevIndex) {\r\n                    direction = 'next';\r\n                }\r\n            }\r\n\r\n            if (!fromTouch) {\r\n\r\n                // remove all transitions\r\n                _this.$outer.addClass('lg-no-trans');\r\n\r\n                this.$slide.removeClass('lg-prev-slide lg-next-slide');\r\n\r\n                if (direction === 'prev') {\r\n\r\n                    //prevslide\r\n                    this.$slide.eq(index).addClass('lg-prev-slide');\r\n                    this.$slide.eq(_prevIndex).addClass('lg-next-slide');\r\n                } else {\r\n\r\n                    // next slide\r\n                    this.$slide.eq(index).addClass('lg-next-slide');\r\n                    this.$slide.eq(_prevIndex).addClass('lg-prev-slide');\r\n                }\r\n\r\n                // give 50 ms for browser to add/remove class\r\n                setTimeout(function() {\r\n                    _this.$slide.removeClass('lg-current');\r\n\r\n                    //_this.$slide.eq(_prevIndex).removeClass('lg-current');\r\n                    _this.$slide.eq(index).addClass('lg-current');\r\n\r\n                    // reset all transitions\r\n                    _this.$outer.removeClass('lg-no-trans');\r\n                }, 50);\r\n            } else {\r\n\r\n                this.$slide.removeClass('lg-prev-slide lg-current lg-next-slide');\r\n                var touchPrev;\r\n                var touchNext;\r\n                if (_length > 2) {\r\n                    touchPrev = index - 1;\r\n                    touchNext = index + 1;\r\n\r\n                    if ((index === 0) && (_prevIndex === _length - 1)) {\r\n\r\n                        // next slide\r\n                        touchNext = 0;\r\n                        touchPrev = _length - 1;\r\n                    } else if ((index === _length - 1) && (_prevIndex === 0)) {\r\n\r\n                        // prev slide\r\n                        touchNext = 0;\r\n                        touchPrev = _length - 1;\r\n                    }\r\n\r\n                } else {\r\n                    touchPrev = 0;\r\n                    touchNext = 1;\r\n                }\r\n\r\n                if (direction === 'prev') {\r\n                    _this.$slide.eq(touchNext).addClass('lg-next-slide');\r\n                } else {\r\n                    _this.$slide.eq(touchPrev).addClass('lg-prev-slide');\r\n                }\r\n\r\n                _this.$slide.eq(index).addClass('lg-current');\r\n            }\r\n\r\n            if (_this.lGalleryOn) {\r\n                setTimeout(function() {\r\n                    _this.loadContent(index, true, 0);\r\n                }, this.s.speed + 50);\r\n\r\n                setTimeout(function() {\r\n                    _this.lgBusy = false;\r\n                    _this.$el.trigger('onAfterSlide.lg', [_prevIndex, index, fromTouch, fromThumb]);\r\n                }, this.s.speed);\r\n\r\n            } else {\r\n                _this.loadContent(index, true, _this.s.backdropDuration);\r\n\r\n                _this.lgBusy = false;\r\n                _this.$el.trigger('onAfterSlide.lg', [_prevIndex, index, fromTouch, fromThumb]);\r\n            }\r\n\r\n            _this.lGalleryOn = true;\r\n\r\n            if (this.s.counter) {\r\n                $('#lg-counter-current').text(index + 1);\r\n            }\r\n\r\n        }\r\n        _this.index = index;\r\n\r\n    };\r\n\r\n    /**\r\n     *  @desc Go to next slide\r\n     *  @param {Boolean} fromTouch - true if slide function called via touch event\r\n     */\r\n    Plugin.prototype.goToNextSlide = function(fromTouch) {\r\n        var _this = this;\r\n        var _loop = _this.s.loop;\r\n        if (fromTouch && _this.$slide.length < 3) {\r\n            _loop = false;\r\n        }\r\n\r\n        if (!_this.lgBusy) {\r\n            if ((_this.index + 1) < _this.$slide.length) {\r\n                _this.index++;\r\n                _this.$el.trigger('onBeforeNextSlide.lg', [_this.index]);\r\n                _this.slide(_this.index, fromTouch, false, 'next');\r\n            } else {\r\n                if (_loop) {\r\n                    _this.index = 0;\r\n                    _this.$el.trigger('onBeforeNextSlide.lg', [_this.index]);\r\n                    _this.slide(_this.index, fromTouch, false, 'next');\r\n                } else if (_this.s.slideEndAnimatoin && !fromTouch) {\r\n                    _this.$outer.addClass('lg-right-end');\r\n                    setTimeout(function() {\r\n                        _this.$outer.removeClass('lg-right-end');\r\n                    }, 400);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     *  @desc Go to previous slide\r\n     *  @param {Boolean} fromTouch - true if slide function called via touch event\r\n     */\r\n    Plugin.prototype.goToPrevSlide = function(fromTouch) {\r\n        var _this = this;\r\n        var _loop = _this.s.loop;\r\n        if (fromTouch && _this.$slide.length < 3) {\r\n            _loop = false;\r\n        }\r\n\r\n        if (!_this.lgBusy) {\r\n            if (_this.index > 0) {\r\n                _this.index--;\r\n                _this.$el.trigger('onBeforePrevSlide.lg', [_this.index, fromTouch]);\r\n                _this.slide(_this.index, fromTouch, false, 'prev');\r\n            } else {\r\n                if (_loop) {\r\n                    _this.index = _this.$items.length - 1;\r\n                    _this.$el.trigger('onBeforePrevSlide.lg', [_this.index, fromTouch]);\r\n                    _this.slide(_this.index, fromTouch, false, 'prev');\r\n                } else if (_this.s.slideEndAnimatoin && !fromTouch) {\r\n                    _this.$outer.addClass('lg-left-end');\r\n                    setTimeout(function() {\r\n                        _this.$outer.removeClass('lg-left-end');\r\n                    }, 400);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    Plugin.prototype.keyPress = function() {\r\n        var _this = this;\r\n        if (this.$items.length > 1) {\r\n            $(window).on('keyup.lg', function(e) {\r\n                if (_this.$items.length > 1) {\r\n                    if (e.keyCode === 37) {\r\n                        e.preventDefault();\r\n                        _this.goToPrevSlide();\r\n                    }\r\n\r\n                    if (e.keyCode === 39) {\r\n                        e.preventDefault();\r\n                        _this.goToNextSlide();\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        $(window).on('keydown.lg', function(e) {\r\n            if (_this.s.escKey === true && e.keyCode === 27) {\r\n                e.preventDefault();\r\n                if (!_this.$outer.hasClass('lg-thumb-open')) {\r\n                    _this.destroy();\r\n                } else {\r\n                    _this.$outer.removeClass('lg-thumb-open');\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    Plugin.prototype.arrow = function() {\r\n        var _this = this;\r\n        this.$outer.find('.lg-prev').on('click.lg', function() {\r\n            _this.goToPrevSlide();\r\n        });\r\n\r\n        this.$outer.find('.lg-next').on('click.lg', function() {\r\n            _this.goToNextSlide();\r\n        });\r\n    };\r\n\r\n    Plugin.prototype.arrowDisable = function(index) {\r\n\r\n        // Disable arrows if s.hideControlOnEnd is true\r\n        if (!this.s.loop && this.s.hideControlOnEnd) {\r\n            if ((index + 1) < this.$slide.length) {\r\n                this.$outer.find('.lg-next').removeAttr('disabled').removeClass('disabled');\r\n            } else {\r\n                this.$outer.find('.lg-next').attr('disabled', 'disabled').addClass('disabled');\r\n            }\r\n\r\n            if (index > 0) {\r\n                this.$outer.find('.lg-prev').removeAttr('disabled').removeClass('disabled');\r\n            } else {\r\n                this.$outer.find('.lg-prev').attr('disabled', 'disabled').addClass('disabled');\r\n            }\r\n        }\r\n    };\r\n\r\n    Plugin.prototype.setTranslate = function($el, xValue, yValue) {\r\n        // jQuery supports Automatic CSS prefixing since jQuery 1.8.0\r\n        if (this.s.useLeft) {\r\n            $el.css('left', xValue);\r\n        } else {\r\n            $el.css({\r\n                transform: 'translate3d(' + (xValue) + 'px, ' + yValue + 'px, 0px)'\r\n            });\r\n        }\r\n    };\r\n\r\n    Plugin.prototype.touchMove = function(startCoords, endCoords) {\r\n\r\n        var distance = endCoords - startCoords;\r\n\r\n        if (Math.abs(distance) > 15) {\r\n            // reset opacity and transition duration\r\n            this.$outer.addClass('lg-dragging');\r\n\r\n            // move current slide\r\n            this.setTranslate(this.$slide.eq(this.index), distance, 0);\r\n\r\n            // move next and prev slide with current slide\r\n            this.setTranslate($('.lg-prev-slide'), -this.$slide.eq(this.index).width() + distance, 0);\r\n            this.setTranslate($('.lg-next-slide'), this.$slide.eq(this.index).width() + distance, 0);\r\n        }\r\n    };\r\n\r\n    Plugin.prototype.touchEnd = function(distance) {\r\n        var _this = this;\r\n\r\n        // keep slide animation for any mode while dragg/swipe\r\n        if (_this.s.mode !== 'lg-slide') {\r\n            _this.$outer.addClass('lg-slide');\r\n        }\r\n\r\n        this.$slide.not('.lg-current, .lg-prev-slide, .lg-next-slide').css('opacity', '0');\r\n\r\n        // set transition duration\r\n        setTimeout(function() {\r\n            _this.$outer.removeClass('lg-dragging');\r\n            if ((distance < 0) && (Math.abs(distance) > _this.s.swipeThreshold)) {\r\n                _this.goToNextSlide(true);\r\n            } else if ((distance > 0) && (Math.abs(distance) > _this.s.swipeThreshold)) {\r\n                _this.goToPrevSlide(true);\r\n            } else if (Math.abs(distance) < 5) {\r\n\r\n                // Trigger click if distance is less than 5 pix\r\n                _this.$el.trigger('onSlideClick.lg');\r\n            }\r\n\r\n            _this.$slide.removeAttr('style');\r\n        });\r\n\r\n        // remove slide class once drag/swipe is completed if mode is not slide\r\n        setTimeout(function() {\r\n            if (!_this.$outer.hasClass('lg-dragging') && _this.s.mode !== 'lg-slide') {\r\n                _this.$outer.removeClass('lg-slide');\r\n            }\r\n        }, _this.s.speed + 100);\r\n\r\n    };\r\n\r\n    Plugin.prototype.enableSwipe = function() {\r\n        var _this = this;\r\n        var startCoords = 0;\r\n        var endCoords = 0;\r\n        var isMoved = false;\r\n\r\n        if (_this.s.enableSwipe && _this.doCss()) {\r\n\r\n            _this.$slide.on('touchstart.lg', function(e) {\r\n                if (!_this.$outer.hasClass('lg-zoomed') && !_this.lgBusy) {\r\n                    e.preventDefault();\r\n                    _this.manageSwipeClass();\r\n                    startCoords = e.originalEvent.targetTouches[0].pageX;\r\n                }\r\n            });\r\n\r\n            _this.$slide.on('touchmove.lg', function(e) {\r\n                if (!_this.$outer.hasClass('lg-zoomed')) {\r\n                    e.preventDefault();\r\n                    endCoords = e.originalEvent.targetTouches[0].pageX;\r\n                    _this.touchMove(startCoords, endCoords);\r\n                    isMoved = true;\r\n                }\r\n            });\r\n\r\n            _this.$slide.on('touchend.lg', function() {\r\n                if (!_this.$outer.hasClass('lg-zoomed')) {\r\n                    if (isMoved) {\r\n                        isMoved = false;\r\n                        _this.touchEnd(endCoords - startCoords);\r\n                    } else {\r\n                        _this.$el.trigger('onSlideClick.lg');\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n    };\r\n\r\n    Plugin.prototype.enableDrag = function() {\r\n        var _this = this;\r\n        var startCoords = 0;\r\n        var endCoords = 0;\r\n        var isDraging = false;\r\n        var isMoved = false;\r\n        if (_this.s.enableDrag && _this.doCss()) {\r\n            _this.$slide.on('mousedown.lg', function(e) {\r\n                // execute only on .lg-object\r\n                if (!_this.$outer.hasClass('lg-zoomed')) {\r\n                    if ($(e.target).hasClass('lg-object') || $(e.target).hasClass('lg-video-play')) {\r\n                        e.preventDefault();\r\n\r\n                        if (!_this.lgBusy) {\r\n                            _this.manageSwipeClass();\r\n                            startCoords = e.pageX;\r\n                            isDraging = true;\r\n\r\n                            // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\r\n                            _this.$outer.scrollLeft += 1;\r\n                            _this.$outer.scrollLeft -= 1;\r\n\r\n                            // *\r\n\r\n                            _this.$outer.removeClass('lg-grab').addClass('lg-grabbing');\r\n\r\n                            _this.$el.trigger('onDragstart.lg');\r\n                        }\r\n\r\n                    }\r\n                }\r\n            });\r\n\r\n            $(window).on('mousemove.lg', function(e) {\r\n                if (isDraging) {\r\n                    isMoved = true;\r\n                    endCoords = e.pageX;\r\n                    _this.touchMove(startCoords, endCoords);\r\n                    _this.$el.trigger('onDragmove.lg');\r\n                }\r\n            });\r\n\r\n            $(window).on('mouseup.lg', function(e) {\r\n                if (isMoved) {\r\n                    isMoved = false;\r\n                    _this.touchEnd(endCoords - startCoords);\r\n                    _this.$el.trigger('onDragend.lg');\r\n                } else if ($(e.target).hasClass('lg-object') || $(e.target).hasClass('lg-video-play')) {\r\n                    _this.$el.trigger('onSlideClick.lg');\r\n                }\r\n\r\n                // Prevent execution on click\r\n                if (isDraging) {\r\n                    isDraging = false;\r\n                    _this.$outer.removeClass('lg-grabbing').addClass('lg-grab');\r\n                }\r\n            });\r\n\r\n        }\r\n    };\r\n\r\n    Plugin.prototype.manageSwipeClass = function() {\r\n        var _touchNext = this.index + 1;\r\n        var _touchPrev = this.index - 1;\r\n        if (this.s.loop && this.$slide.length > 2) {\r\n            if (this.index === 0) {\r\n                _touchPrev = this.$slide.length - 1;\r\n            } else if (this.index === this.$slide.length - 1) {\r\n                _touchNext = 0;\r\n            }\r\n        }\r\n\r\n        this.$slide.removeClass('lg-next-slide lg-prev-slide');\r\n        if (_touchPrev > -1) {\r\n            this.$slide.eq(_touchPrev).addClass('lg-prev-slide');\r\n        }\r\n\r\n        this.$slide.eq(_touchNext).addClass('lg-next-slide');\r\n    };\r\n\r\n    Plugin.prototype.mousewheel = function() {\r\n        var _this = this;\r\n        _this.$outer.on('mousewheel.lg', function(e) {\r\n\r\n            if (!e.deltaY) {\r\n                return;\r\n            }\r\n\r\n            if (e.deltaY > 0) {\r\n                _this.goToPrevSlide();\r\n            } else {\r\n                _this.goToNextSlide();\r\n            }\r\n\r\n            e.preventDefault();\r\n        });\r\n\r\n    };\r\n\r\n    Plugin.prototype.closeGallery = function() {\r\n\r\n        var _this = this;\r\n        var mousedown = false;\r\n        this.$outer.find('.lg-close').on('click.lg', function() {\r\n            _this.destroy();\r\n        });\r\n\r\n        if (_this.s.closable) {\r\n\r\n            // If you drag the slide and release outside gallery gets close on chrome\r\n            // for preventing this check mousedown and mouseup happened on .lg-item or lg-outer\r\n            _this.$outer.on('mousedown.lg', function(e) {\r\n\r\n                if ($(e.target).is('.lg-outer') || $(e.target).is('.lg-item ') || $(e.target).is('.lg-img-wrap')) {\r\n                    mousedown = true;\r\n                } else {\r\n                    mousedown = false;\r\n                }\r\n\r\n            });\r\n\r\n            _this.$outer.on('mouseup.lg', function(e) {\r\n\r\n                if ($(e.target).is('.lg-outer') || $(e.target).is('.lg-item ') || $(e.target).is('.lg-img-wrap') && mousedown) {\r\n                    if (!_this.$outer.hasClass('lg-dragging')) {\r\n                        _this.destroy();\r\n                    }\r\n                }\r\n\r\n            });\r\n\r\n        }\r\n\r\n    };\r\n\r\n    Plugin.prototype.destroy = function(d) {\r\n\r\n        var _this = this;\r\n\r\n        if (!d) {\r\n            _this.$el.trigger('onBeforeClose.lg');\r\n            $(window).scrollTop(_this.prevScrollTop);\r\n        }\r\n\r\n\r\n        /**\r\n         * if d is false or undefined destroy will only close the gallery\r\n         * plugins instance remains with the element\r\n         *\r\n         * if d is true destroy will completely remove the plugin\r\n         */\r\n\r\n        if (d) {\r\n            if (!_this.s.dynamic) {\r\n                // only when not using dynamic mode is $items a jquery collection\r\n                this.$items.off('click.lg click.lgcustom');\r\n            }\r\n\r\n            $.removeData(_this.el, 'lightGallery');\r\n        }\r\n\r\n        // Unbind all events added by lightGallery\r\n        this.$el.off('.lg.tm');\r\n\r\n        // Distroy all lightGallery modules\r\n        $.each($.fn.lightGallery.modules, function(key) {\r\n            if (_this.modules[key]) {\r\n                _this.modules[key].destroy();\r\n            }\r\n        });\r\n\r\n        this.lGalleryOn = false;\r\n\r\n        clearTimeout(_this.hideBartimeout);\r\n        this.hideBartimeout = false;\r\n        $(window).off('.lg');\r\n        $('body').removeClass('lg-on lg-from-hash');\r\n\r\n        if (_this.$outer) {\r\n            _this.$outer.removeClass('lg-visible');\r\n        }\r\n\r\n        $('.lg-backdrop').removeClass('in');\r\n\r\n        setTimeout(function() {\r\n            if (_this.$outer) {\r\n                _this.$outer.remove();\r\n            }\r\n\r\n            $('.lg-backdrop').remove();\r\n\r\n            if (!d) {\r\n                _this.$el.trigger('onCloseAfter.lg');\r\n            }\r\n\r\n        }, _this.s.backdropDuration + 50);\r\n    };\r\n\r\n    $.fn.lightGallery = function(options) {\r\n        return this.each(function() {\r\n            if (!$.data(this, 'lightGallery')) {\r\n                $.data(this, 'lightGallery', new Plugin(this, options));\r\n            } else {\r\n                try {\r\n                    $(this).data('lightGallery').init();\r\n                } catch (err) {\r\n                    console.error('lightGallery has not initiated properly');\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    $.fn.lightGallery.modules = {};\r\n\r\n})();\r\n\n\n}));\n","/*! lg-fullscreen - v1.0.1 - 2016-09-30\r\n* http://sachinchoolur.github.io/lightGallery\r\n* Copyright (c) 2016 Sachin N; Licensed GPLv3 */\r\n\r\n(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD. Register as an anonymous module unless amdModuleId is set\r\n    define(['jquery'], function (a0) {\r\n      return (factory(a0));\r\n    });\r\n  } else if (typeof exports === 'object') {\r\n    // Node. Does not work with strict CommonJS, but\r\n    // only CommonJS-like environments that support module.exports,\r\n    // like Node.\r\n    module.exports = factory(require('jquery'));\r\n  } else {\r\n    factory(jQuery);\r\n  }\r\n}(this, function ($) {\r\n\r\n(function() {\r\n\r\n    'use strict';\r\n\r\n    var defaults = {\r\n        fullScreen: true\r\n    };\r\n\r\n    var Fullscreen = function(element) {\r\n\r\n        // get lightGallery core plugin data\r\n        this.core = $(element).data('lightGallery');\r\n\r\n        this.$el = $(element);\r\n\r\n        // extend module defalut settings with lightGallery core settings\r\n        this.core.s = $.extend({}, defaults, this.core.s);\r\n\r\n        this.init();\r\n\r\n        return this;\r\n    };\r\n\r\n    Fullscreen.prototype.init = function() {\r\n        var fullScreen = '';\r\n        if (this.core.s.fullScreen) {\r\n\r\n            // check for fullscreen browser support\r\n            if (!document.fullscreenEnabled && !document.webkitFullscreenEnabled &&\r\n                !document.mozFullScreenEnabled && !document.msFullscreenEnabled) {\r\n                return;\r\n            } else {\r\n                fullScreen = '<span class=\"lg-fullscreen lg-icon\"></span>';\r\n                this.core.$outer.find('.lg-toolbar').append(fullScreen);\r\n                this.fullScreen();\r\n            }\r\n        }\r\n    };\r\n\r\n    Fullscreen.prototype.requestFullscreen = function() {\r\n        var el = document.documentElement;\r\n        if (el.requestFullscreen) {\r\n            el.requestFullscreen();\r\n        } else if (el.msRequestFullscreen) {\r\n            el.msRequestFullscreen();\r\n        } else if (el.mozRequestFullScreen) {\r\n            el.mozRequestFullScreen();\r\n        } else if (el.webkitRequestFullscreen) {\r\n            el.webkitRequestFullscreen();\r\n        }\r\n    };\r\n\r\n    Fullscreen.prototype.exitFullscreen = function() {\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        } else if (document.msExitFullscreen) {\r\n            document.msExitFullscreen();\r\n        } else if (document.mozCancelFullScreen) {\r\n            document.mozCancelFullScreen();\r\n        } else if (document.webkitExitFullscreen) {\r\n            document.webkitExitFullscreen();\r\n        }\r\n    };\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Using_full_screen_mode\r\n    Fullscreen.prototype.fullScreen = function() {\r\n        var _this = this;\r\n\r\n        $(document).on('fullscreenchange.lg webkitfullscreenchange.lg mozfullscreenchange.lg MSFullscreenChange.lg', function() {\r\n            _this.core.$outer.toggleClass('lg-fullscreen-on');\r\n        });\r\n\r\n        this.core.$outer.find('.lg-fullscreen').on('click.lg', function() {\r\n            if (!document.fullscreenElement &&\r\n                !document.mozFullScreenElement && !document.webkitFullscreenElement && !document.msFullscreenElement) {\r\n                _this.requestFullscreen();\r\n            } else {\r\n                _this.exitFullscreen();\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n    Fullscreen.prototype.destroy = function() {\r\n\r\n        // exit from fullscreen if activated\r\n        this.exitFullscreen();\r\n\r\n        $(document).off('fullscreenchange.lg webkitfullscreenchange.lg mozfullscreenchange.lg MSFullscreenChange.lg');\r\n    };\r\n\r\n    $.fn.lightGallery.modules.fullscreen = Fullscreen;\r\n\r\n})();\r\n\r\n}));\r\n","/*! lg-hash - v1.0.3 - 2017-10-19\r\n* http://sachinchoolur.github.io/lightGallery\r\n* Copyright (c) 2017 Sachin N; Licensed GPLv3 */\r\n\r\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define(['jquery'], function (a0) {\n      return (factory(a0));\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(require('jquery'));\n  } else {\n    factory(jQuery);\n  }\n}(this, function ($) {\n\n(function() {\r\n\r\n    'use strict';\r\n\r\n    var defaults = {\r\n        hash: true\r\n    };\r\n\r\n    var Hash = function(element) {\r\n\r\n        this.core = $(element).data('lightGallery');\r\n\r\n        this.core.s = $.extend({}, defaults, this.core.s);\r\n\r\n        if (this.core.s.hash) {\r\n            this.oldHash = window.location.hash;\r\n            this.init();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    Hash.prototype.init = function() {\r\n        var _this = this;\r\n        var _hash;\r\n\r\n        // Change hash value on after each slide transition\r\n        _this.core.$el.on('onAfterSlide.lg.tm', function(event, prevIndex, index) {\r\n            if (history.replaceState) {\r\n                history.replaceState(null, null, window.location.pathname + '#lg=' + _this.core.s.galleryId + '&slide=' + index);\r\n            } else {\r\n                window.location.hash = 'lg=' + _this.core.s.galleryId + '&slide=' + index;\r\n            }\r\n        });\r\n\r\n        // Listen hash change and change the slide according to slide value\r\n        $(window).on('hashchange.lg.hash', function() {\r\n            _hash = window.location.hash;\r\n            var _idx = parseInt(_hash.split('&slide=')[1], 10);\r\n\r\n            // it galleryId doesn't exist in the url close the gallery\r\n            if ((_hash.indexOf('lg=' + _this.core.s.galleryId) > -1)) {\r\n                _this.core.slide(_idx, false, false);\r\n            } else if (_this.core.lGalleryOn) {\r\n                _this.core.destroy();\r\n            }\r\n\r\n        });\r\n    };\r\n\r\n    Hash.prototype.destroy = function() {\r\n\r\n        if (!this.core.s.hash) {\r\n            return;\r\n        }\r\n\r\n        // Reset to old hash value\r\n        if (this.oldHash && this.oldHash.indexOf('lg=' + this.core.s.galleryId) < 0) {\r\n            if (history.replaceState) {\r\n                history.replaceState(null, null, this.oldHash);\r\n            } else {\r\n                window.location.hash = this.oldHash;\r\n            }\r\n        } else {\r\n            if (history.replaceState) {\r\n                history.replaceState(null, document.title, window.location.pathname + window.location.search);\r\n            } else {\r\n                window.location.hash = '';\r\n            }\r\n        }\r\n\r\n        this.core.$el.off('.lg.hash');\r\n\r\n    };\r\n\r\n    $.fn.lightGallery.modules.hash = Hash;\r\n\r\n})();\r\n\n\n}));\n","/*! lg-pager - v1.0.2 - 2017-01-22\r\n* http://sachinchoolur.github.io/lightGallery\r\n* Copyright (c) 2017 Sachin N; Licensed GPLv3 */\r\n\r\n(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD. Register as an anonymous module unless amdModuleId is set\r\n    define(['jquery'], function (a0) {\r\n      return (factory(a0));\r\n    });\r\n  } else if (typeof exports === 'object') {\r\n    // Node. Does not work with strict CommonJS, but\r\n    // only CommonJS-like environments that support module.exports,\r\n    // like Node.\r\n    module.exports = factory(require('jquery'));\r\n  } else {\r\n    factory(jQuery);\r\n  }\r\n}(this, function ($) {\r\n\r\n(function() {\r\n\r\n    'use strict';\r\n\r\n    var defaults = {\r\n        pager: false\r\n    };\r\n\r\n    var Pager = function(element) {\r\n\r\n        this.core = $(element).data('lightGallery');\r\n\r\n        this.$el = $(element);\r\n        this.core.s = $.extend({}, defaults, this.core.s);\r\n        if (this.core.s.pager && this.core.$items.length > 1) {\r\n            this.init();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    Pager.prototype.init = function() {\r\n        var _this = this;\r\n        var pagerList = '';\r\n        var $pagerCont;\r\n        var $pagerOuter;\r\n        var timeout;\r\n\r\n        _this.core.$outer.find('.lg').append('<div class=\"lg-pager-outer\"></div>');\r\n\r\n        if (_this.core.s.dynamic) {\r\n            for (var i = 0; i < _this.core.s.dynamicEl.length; i++) {\r\n                pagerList += '<span class=\"lg-pager-cont\"> <span class=\"lg-pager\"></span><div class=\"lg-pager-thumb-cont\"><span class=\"lg-caret\"></span> <img src=\"' + _this.core.s.dynamicEl[i].thumb + '\" /></div></span>';\r\n            }\r\n        } else {\r\n            _this.core.$items.each(function() {\r\n\r\n                if (!_this.core.s.exThumbImage) {\r\n                    pagerList += '<span class=\"lg-pager-cont\"> <span class=\"lg-pager\"></span><div class=\"lg-pager-thumb-cont\"><span class=\"lg-caret\"></span> <img src=\"' + $(this).find('img').attr('src') + '\" /></div></span>';\r\n                } else {\r\n                    pagerList += '<span class=\"lg-pager-cont\"> <span class=\"lg-pager\"></span><div class=\"lg-pager-thumb-cont\"><span class=\"lg-caret\"></span> <img src=\"' + $(this).attr(_this.core.s.exThumbImage) + '\" /></div></span>';\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n        $pagerOuter = _this.core.$outer.find('.lg-pager-outer');\r\n\r\n        $pagerOuter.html(pagerList);\r\n\r\n        $pagerCont = _this.core.$outer.find('.lg-pager-cont');\r\n        $pagerCont.on('click.lg touchend.lg', function() {\r\n            var _$this = $(this);\r\n            _this.core.index = _$this.index();\r\n            _this.core.slide(_this.core.index, false, true, false);\r\n        });\r\n\r\n        $pagerOuter.on('mouseover.lg', function() {\r\n            clearTimeout(timeout);\r\n            $pagerOuter.addClass('lg-pager-hover');\r\n        });\r\n\r\n        $pagerOuter.on('mouseout.lg', function() {\r\n            timeout = setTimeout(function() {\r\n                $pagerOuter.removeClass('lg-pager-hover');\r\n            });\r\n        });\r\n\r\n        _this.core.$el.on('onBeforeSlide.lg.tm', function(e, prevIndex, index) {\r\n            $pagerCont.removeClass('lg-pager-active');\r\n            $pagerCont.eq(index).addClass('lg-pager-active');\r\n        });\r\n\r\n    };\r\n\r\n    Pager.prototype.destroy = function() {\r\n\r\n    };\r\n\r\n    $.fn.lightGallery.modules.pager = Pager;\r\n\r\n})();\r\n\r\n\r\n}));\r\n","/*! lg-thumbnail - v1.1.0 - 2017-08-08\r\n* http://sachinchoolur.github.io/lightGallery\r\n* Copyright (c) 2017 Sachin N; Licensed GPLv3 */\r\n\r\n(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD. Register as an anonymous module unless amdModuleId is set\r\n    define(['jquery'], function (a0) {\r\n      return (factory(a0));\r\n    });\r\n  } else if (typeof exports === 'object') {\r\n    // Node. Does not work with strict CommonJS, but\r\n    // only CommonJS-like environments that support module.exports,\r\n    // like Node.\r\n    module.exports = factory(require('jquery'));\r\n  } else {\r\n    factory(jQuery);\r\n  }\r\n}(this, function ($) {\r\n\r\n(function() {\r\n\r\n    'use strict';\r\n\r\n    var defaults = {\r\n        thumbnail: true,\r\n\r\n        animateThumb: true,\r\n        currentPagerPosition: 'middle',\r\n\r\n        thumbWidth: 100,\r\n        thumbHeight: '80px',\r\n        thumbContHeight: 100,\r\n        thumbMargin: 5,\r\n\r\n        exThumbImage: false,\r\n        showThumbByDefault: true,\r\n        toogleThumb: true,\r\n        pullCaptionUp: true,\r\n\r\n        enableThumbDrag: true,\r\n        enableThumbSwipe: true,\r\n        swipeThreshold: 50,\r\n\r\n        loadYoutubeThumbnail: true,\r\n        youtubeThumbSize: 1,\r\n\r\n        loadVimeoThumbnail: true,\r\n        vimeoThumbSize: 'thumbnail_small',\r\n\r\n        loadDailymotionThumbnail: true\r\n    };\r\n\r\n    var Thumbnail = function(element) {\r\n\r\n        // get lightGallery core plugin data\r\n        this.core = $(element).data('lightGallery');\r\n\r\n        // extend module default settings with lightGallery core settings\r\n        this.core.s = $.extend({}, defaults, this.core.s);\r\n\r\n        this.$el = $(element);\r\n        this.$thumbOuter = null;\r\n        this.thumbOuterWidth = 0;\r\n        this.thumbTotalWidth = (this.core.$items.length * (this.core.s.thumbWidth + this.core.s.thumbMargin));\r\n        this.thumbIndex = this.core.index;\r\n\r\n        if (this.core.s.animateThumb) {\r\n            this.core.s.thumbHeight = '100%';\r\n        }\r\n\r\n        // Thumbnail animation value\r\n        this.left = 0;\r\n\r\n        this.init();\r\n\r\n        return this;\r\n    };\r\n\r\n    Thumbnail.prototype.init = function() {\r\n        var _this = this;\r\n        if (this.core.s.thumbnail && this.core.$items.length > 1) {\r\n            if (this.core.s.showThumbByDefault) {\r\n                setTimeout(function(){\r\n                    _this.core.$outer.addClass('lg-thumb-open');\r\n                }, 700);\r\n            }\r\n\r\n            if (this.core.s.pullCaptionUp) {\r\n                this.core.$outer.addClass('lg-pull-caption-up');\r\n            }\r\n\r\n            this.build();\r\n            if (this.core.s.animateThumb && this.core.doCss()) {\r\n                if (this.core.s.enableThumbDrag) {\r\n                    this.enableThumbDrag();\r\n                }\r\n\r\n                if (this.core.s.enableThumbSwipe) {\r\n                    this.enableThumbSwipe();\r\n                }\r\n\r\n                this.thumbClickable = false;\r\n            } else {\r\n                this.thumbClickable = true;\r\n            }\r\n\r\n            this.toogle();\r\n            this.thumbkeyPress();\r\n        }\r\n    };\r\n\r\n    Thumbnail.prototype.build = function() {\r\n        var _this = this;\r\n        var thumbList = '';\r\n        var vimeoErrorThumbSize = '';\r\n        var $thumb;\r\n        var html = '<div class=\"lg-thumb-outer\">' +\r\n            '<div class=\"lg-thumb lg-group\">' +\r\n            '</div>' +\r\n            '</div>';\r\n\r\n        switch (this.core.s.vimeoThumbSize) {\r\n            case 'thumbnail_large':\r\n                vimeoErrorThumbSize = '640';\r\n                break;\r\n            case 'thumbnail_medium':\r\n                vimeoErrorThumbSize = '200x150';\r\n                break;\r\n            case 'thumbnail_small':\r\n                vimeoErrorThumbSize = '100x75';\r\n        }\r\n\r\n        _this.core.$outer.addClass('lg-has-thumb');\r\n\r\n        _this.core.$outer.find('.lg').append(html);\r\n\r\n        _this.$thumbOuter = _this.core.$outer.find('.lg-thumb-outer');\r\n        _this.thumbOuterWidth = _this.$thumbOuter.width();\r\n\r\n        if (_this.core.s.animateThumb) {\r\n            _this.core.$outer.find('.lg-thumb').css({\r\n                width: _this.thumbTotalWidth + 'px',\r\n                position: 'relative'\r\n            });\r\n        }\r\n\r\n        if (this.core.s.animateThumb) {\r\n            _this.$thumbOuter.css('height', _this.core.s.thumbContHeight + 'px');\r\n        }\r\n\r\n        function getThumb(src, thumb, index) {\r\n            var isVideo = _this.core.isVideo(src, index) || {};\r\n            var thumbImg;\r\n            var vimeoId = '';\r\n\r\n            if (isVideo.youtube || isVideo.vimeo || isVideo.dailymotion) {\r\n                if (isVideo.youtube) {\r\n                    if (_this.core.s.loadYoutubeThumbnail) {\r\n                        thumbImg = '//img.youtube.com/vi/' + isVideo.youtube[1] + '/' + _this.core.s.youtubeThumbSize + '.jpg';\r\n                    } else {\r\n                        thumbImg = thumb;\r\n                    }\r\n                } else if (isVideo.vimeo) {\r\n                    if (_this.core.s.loadVimeoThumbnail) {\r\n                        thumbImg = '//i.vimeocdn.com/video/error_' + vimeoErrorThumbSize + '.jpg';\r\n                        vimeoId = isVideo.vimeo[1];\r\n                    } else {\r\n                        thumbImg = thumb;\r\n                    }\r\n                } else if (isVideo.dailymotion) {\r\n                    if (_this.core.s.loadDailymotionThumbnail) {\r\n                        thumbImg = '//www.dailymotion.com/thumbnail/video/' + isVideo.dailymotion[1];\r\n                    } else {\r\n                        thumbImg = thumb;\r\n                    }\r\n                }\r\n            } else {\r\n                thumbImg = thumb;\r\n            }\r\n\r\n            thumbList += '<div data-vimeo-id=\"' + vimeoId + '\" class=\"lg-thumb-item\" style=\"width:' + _this.core.s.thumbWidth + 'px; height: ' + _this.core.s.thumbHeight + '; margin-right: ' + _this.core.s.thumbMargin + 'px\"><img src=\"' + thumbImg + '\" /></div>';\r\n            vimeoId = '';\r\n        }\r\n\r\n        if (_this.core.s.dynamic) {\r\n            for (var i = 0; i < _this.core.s.dynamicEl.length; i++) {\r\n                getThumb(_this.core.s.dynamicEl[i].src, _this.core.s.dynamicEl[i].thumb, i);\r\n            }\r\n        } else {\r\n            _this.core.$items.each(function(i) {\r\n\r\n                if (!_this.core.s.exThumbImage) {\r\n                    getThumb($(this).attr('href') || $(this).attr('data-src'), $(this).find('img').attr('src'), i);\r\n                } else {\r\n                    getThumb($(this).attr('href') || $(this).attr('data-src'), $(this).attr(_this.core.s.exThumbImage), i);\r\n                }\r\n\r\n            });\r\n        }\r\n\r\n        _this.core.$outer.find('.lg-thumb').html(thumbList);\r\n\r\n        $thumb = _this.core.$outer.find('.lg-thumb-item');\r\n\r\n        // Load vimeo thumbnails\r\n        $thumb.each(function() {\r\n            var $this = $(this);\r\n            var vimeoVideoId = $this.attr('data-vimeo-id');\r\n\r\n            if (vimeoVideoId) {\r\n                $.getJSON('//www.vimeo.com/api/v2/video/' + vimeoVideoId + '.json?callback=?', {\r\n                    format: 'json'\r\n                }, function(data) {\r\n                    $this.find('img').attr('src', data[0][_this.core.s.vimeoThumbSize]);\r\n                });\r\n            }\r\n        });\r\n\r\n        // manage active class for thumbnail\r\n        $thumb.eq(_this.core.index).addClass('active');\r\n        _this.core.$el.on('onBeforeSlide.lg.tm', function() {\r\n            $thumb.removeClass('active');\r\n            $thumb.eq(_this.core.index).addClass('active');\r\n        });\r\n\r\n        $thumb.on('click.lg touchend.lg', function() {\r\n            var _$this = $(this);\r\n            setTimeout(function() {\r\n\r\n                // In IE9 and bellow touch does not support\r\n                // Go to slide if browser does not support css transitions\r\n                if ((_this.thumbClickable && !_this.core.lgBusy) || !_this.core.doCss()) {\r\n                    _this.core.index = _$this.index();\r\n                    _this.core.slide(_this.core.index, false, true, false);\r\n                }\r\n            }, 50);\r\n        });\r\n\r\n        _this.core.$el.on('onBeforeSlide.lg.tm', function() {\r\n            _this.animateThumb(_this.core.index);\r\n        });\r\n\r\n        $(window).on('resize.lg.thumb orientationchange.lg.thumb', function() {\r\n            setTimeout(function() {\r\n                _this.animateThumb(_this.core.index);\r\n                _this.thumbOuterWidth = _this.$thumbOuter.width();\r\n            }, 200);\r\n        });\r\n\r\n    };\r\n\r\n    Thumbnail.prototype.setTranslate = function(value) {\r\n        // jQuery supports Automatic CSS prefixing since jQuery 1.8.0\r\n        this.core.$outer.find('.lg-thumb').css({\r\n            transform: 'translate3d(-' + (value) + 'px, 0px, 0px)'\r\n        });\r\n    };\r\n\r\n    Thumbnail.prototype.animateThumb = function(index) {\r\n        var $thumb = this.core.$outer.find('.lg-thumb');\r\n        if (this.core.s.animateThumb) {\r\n            var position;\r\n            switch (this.core.s.currentPagerPosition) {\r\n                case 'left':\r\n                    position = 0;\r\n                    break;\r\n                case 'middle':\r\n                    position = (this.thumbOuterWidth / 2) - (this.core.s.thumbWidth / 2);\r\n                    break;\r\n                case 'right':\r\n                    position = this.thumbOuterWidth - this.core.s.thumbWidth;\r\n            }\r\n            this.left = ((this.core.s.thumbWidth + this.core.s.thumbMargin) * index - 1) - position;\r\n            if (this.left > (this.thumbTotalWidth - this.thumbOuterWidth)) {\r\n                this.left = this.thumbTotalWidth - this.thumbOuterWidth;\r\n            }\r\n\r\n            if (this.left < 0) {\r\n                this.left = 0;\r\n            }\r\n\r\n            if (this.core.lGalleryOn) {\r\n                if (!$thumb.hasClass('on')) {\r\n                    this.core.$outer.find('.lg-thumb').css('transition-duration', this.core.s.speed + 'ms');\r\n                }\r\n\r\n                if (!this.core.doCss()) {\r\n                    $thumb.animate({\r\n                        left: -this.left + 'px'\r\n                    }, this.core.s.speed);\r\n                }\r\n            } else {\r\n                if (!this.core.doCss()) {\r\n                    $thumb.css('left', -this.left + 'px');\r\n                }\r\n            }\r\n\r\n            this.setTranslate(this.left);\r\n\r\n        }\r\n    };\r\n\r\n    // Enable thumbnail dragging and swiping\r\n    Thumbnail.prototype.enableThumbDrag = function() {\r\n\r\n        var _this = this;\r\n        var startCoords = 0;\r\n        var endCoords = 0;\r\n        var isDraging = false;\r\n        var isMoved = false;\r\n        var tempLeft = 0;\r\n\r\n        _this.$thumbOuter.addClass('lg-grab');\r\n\r\n        _this.core.$outer.find('.lg-thumb').on('mousedown.lg.thumb', function(e) {\r\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\r\n                // execute only on .lg-object\r\n                e.preventDefault();\r\n                startCoords = e.pageX;\r\n                isDraging = true;\r\n\r\n                // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\r\n                _this.core.$outer.scrollLeft += 1;\r\n                _this.core.$outer.scrollLeft -= 1;\r\n\r\n                // *\r\n                _this.thumbClickable = false;\r\n                _this.$thumbOuter.removeClass('lg-grab').addClass('lg-grabbing');\r\n            }\r\n        });\r\n\r\n        $(window).on('mousemove.lg.thumb', function(e) {\r\n            if (isDraging) {\r\n                tempLeft = _this.left;\r\n                isMoved = true;\r\n                endCoords = e.pageX;\r\n\r\n                _this.$thumbOuter.addClass('lg-dragging');\r\n\r\n                tempLeft = tempLeft - (endCoords - startCoords);\r\n\r\n                if (tempLeft > (_this.thumbTotalWidth - _this.thumbOuterWidth)) {\r\n                    tempLeft = _this.thumbTotalWidth - _this.thumbOuterWidth;\r\n                }\r\n\r\n                if (tempLeft < 0) {\r\n                    tempLeft = 0;\r\n                }\r\n\r\n                // move current slide\r\n                _this.setTranslate(tempLeft);\r\n\r\n            }\r\n        });\r\n\r\n        $(window).on('mouseup.lg.thumb', function() {\r\n            if (isMoved) {\r\n                isMoved = false;\r\n                _this.$thumbOuter.removeClass('lg-dragging');\r\n\r\n                _this.left = tempLeft;\r\n\r\n                if (Math.abs(endCoords - startCoords) < _this.core.s.swipeThreshold) {\r\n                    _this.thumbClickable = true;\r\n                }\r\n\r\n            } else {\r\n                _this.thumbClickable = true;\r\n            }\r\n\r\n            if (isDraging) {\r\n                isDraging = false;\r\n                _this.$thumbOuter.removeClass('lg-grabbing').addClass('lg-grab');\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n    Thumbnail.prototype.enableThumbSwipe = function() {\r\n        var _this = this;\r\n        var startCoords = 0;\r\n        var endCoords = 0;\r\n        var isMoved = false;\r\n        var tempLeft = 0;\r\n\r\n        _this.core.$outer.find('.lg-thumb').on('touchstart.lg', function(e) {\r\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\r\n                e.preventDefault();\r\n                startCoords = e.originalEvent.targetTouches[0].pageX;\r\n                _this.thumbClickable = false;\r\n            }\r\n        });\r\n\r\n        _this.core.$outer.find('.lg-thumb').on('touchmove.lg', function(e) {\r\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\r\n                e.preventDefault();\r\n                endCoords = e.originalEvent.targetTouches[0].pageX;\r\n                isMoved = true;\r\n\r\n                _this.$thumbOuter.addClass('lg-dragging');\r\n\r\n                tempLeft = _this.left;\r\n\r\n                tempLeft = tempLeft - (endCoords - startCoords);\r\n\r\n                if (tempLeft > (_this.thumbTotalWidth - _this.thumbOuterWidth)) {\r\n                    tempLeft = _this.thumbTotalWidth - _this.thumbOuterWidth;\r\n                }\r\n\r\n                if (tempLeft < 0) {\r\n                    tempLeft = 0;\r\n                }\r\n\r\n                // move current slide\r\n                _this.setTranslate(tempLeft);\r\n\r\n            }\r\n        });\r\n\r\n        _this.core.$outer.find('.lg-thumb').on('touchend.lg', function() {\r\n            if (_this.thumbTotalWidth > _this.thumbOuterWidth) {\r\n\r\n                if (isMoved) {\r\n                    isMoved = false;\r\n                    _this.$thumbOuter.removeClass('lg-dragging');\r\n                    if (Math.abs(endCoords - startCoords) < _this.core.s.swipeThreshold) {\r\n                        _this.thumbClickable = true;\r\n                    }\r\n\r\n                    _this.left = tempLeft;\r\n                } else {\r\n                    _this.thumbClickable = true;\r\n                }\r\n            } else {\r\n                _this.thumbClickable = true;\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n    Thumbnail.prototype.toogle = function() {\r\n        var _this = this;\r\n        if (_this.core.s.toogleThumb) {\r\n            _this.core.$outer.addClass('lg-can-toggle');\r\n            _this.$thumbOuter.append('<span class=\"lg-toogle-thumb lg-icon\"></span>');\r\n            _this.core.$outer.find('.lg-toogle-thumb').on('click.lg', function() {\r\n                _this.core.$outer.toggleClass('lg-thumb-open');\r\n            });\r\n        }\r\n    };\r\n\r\n    Thumbnail.prototype.thumbkeyPress = function() {\r\n        var _this = this;\r\n        $(window).on('keydown.lg.thumb', function(e) {\r\n            if (e.keyCode === 38) {\r\n                e.preventDefault();\r\n                _this.core.$outer.addClass('lg-thumb-open');\r\n            } else if (e.keyCode === 40) {\r\n                e.preventDefault();\r\n                _this.core.$outer.removeClass('lg-thumb-open');\r\n            }\r\n        });\r\n    };\r\n\r\n    Thumbnail.prototype.destroy = function() {\r\n        if (this.core.s.thumbnail && this.core.$items.length > 1) {\r\n            $(window).off('resize.lg.thumb orientationchange.lg.thumb keydown.lg.thumb');\r\n            this.$thumbOuter.remove();\r\n            this.core.$outer.removeClass('lg-has-thumb');\r\n        }\r\n    };\r\n\r\n    $.fn.lightGallery.modules.Thumbnail = Thumbnail;\r\n\r\n})();\r\n\r\n}));\r\n","/*! lg-zoom - v1.1.0 - 2017-08-08\r\n* http://sachinchoolur.github.io/lightGallery\r\n* Copyright (c) 2017 Sachin N; Licensed GPLv3 */\r\n\r\n(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD. Register as an anonymous module unless amdModuleId is set\r\n    define(['jquery'], function (a0) {\r\n      return (factory(a0));\r\n    });\r\n  } else if (typeof exports === 'object') {\r\n    // Node. Does not work with strict CommonJS, but\r\n    // only CommonJS-like environments that support module.exports,\r\n    // like Node.\r\n    module.exports = factory(require('jquery'));\r\n  } else {\r\n    factory(jQuery);\r\n  }\r\n}(this, function ($) {\r\n\r\n(function() {\r\n\r\n    'use strict';\r\n\r\n    var getUseLeft = function() {\r\n        var useLeft = false;\r\n        var isChrome = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\r\n        if (isChrome && parseInt(isChrome[2], 10) < 54) {\r\n            useLeft = true;\r\n        }\r\n\r\n        return useLeft;\r\n    };\r\n\r\n    var defaults = {\r\n        scale: 1,\r\n        zoom: true,\r\n        actualSize: true,\r\n        enableZoomAfter: 300,\r\n        useLeftForZoom: getUseLeft()\r\n    };\r\n\r\n    var Zoom = function(element) {\r\n\r\n        this.core = $(element).data('lightGallery');\r\n\r\n        this.core.s = $.extend({}, defaults, this.core.s);\r\n\r\n        if (this.core.s.zoom && this.core.doCss()) {\r\n            this.init();\r\n\r\n            // Store the zoomable timeout value just to clear it while closing\r\n            this.zoomabletimeout = false;\r\n\r\n            // Set the initial value center\r\n            this.pageX = $(window).width() / 2;\r\n            this.pageY = ($(window).height() / 2) + $(window).scrollTop();\r\n        }\r\n\r\n        return this;\r\n    };\r\n\r\n    Zoom.prototype.init = function() {\r\n\r\n        var _this = this;\r\n        var zoomIcons = '<span id=\"lg-zoom-in\" class=\"lg-icon\"></span><span id=\"lg-zoom-out\" class=\"lg-icon\"></span>';\r\n\r\n        if (_this.core.s.actualSize) {\r\n            zoomIcons += '<span id=\"lg-actual-size\" class=\"lg-icon\"></span>';\r\n        }\r\n\r\n        if (_this.core.s.useLeftForZoom) {\r\n            _this.core.$outer.addClass('lg-use-left-for-zoom');\r\n        } else {\r\n            _this.core.$outer.addClass('lg-use-transition-for-zoom');\r\n        }\r\n\r\n        this.core.$outer.find('.lg-toolbar').append(zoomIcons);\r\n\r\n        // Add zoomable class\r\n        _this.core.$el.on('onSlideItemLoad.lg.tm.zoom', function(event, index, delay) {\r\n\r\n            // delay will be 0 except first time\r\n            var _speed = _this.core.s.enableZoomAfter + delay;\r\n\r\n            // set _speed value 0 if gallery opened from direct url and if it is first slide\r\n            if ($('body').hasClass('lg-from-hash') && delay) {\r\n\r\n                // will execute only once\r\n                _speed = 0;\r\n            } else {\r\n\r\n                // Remove lg-from-hash to enable starting animation.\r\n                $('body').removeClass('lg-from-hash');\r\n            }\r\n\r\n            _this.zoomabletimeout = setTimeout(function() {\r\n                _this.core.$slide.eq(index).addClass('lg-zoomable');\r\n            }, _speed + 30);\r\n        });\r\n\r\n        var scale = 1;\r\n        /**\r\n         * @desc Image zoom\r\n         * Translate the wrap and scale the image to get better user experience\r\n         *\r\n         * @param {String} scaleVal - Zoom decrement/increment value\r\n         */\r\n        var zoom = function(scaleVal) {\r\n\r\n            var $image = _this.core.$outer.find('.lg-current .lg-image');\r\n            var _x;\r\n            var _y;\r\n\r\n            // Find offset manually to avoid issue after zoom\r\n            var offsetX = ($(window).width() - $image.prop('offsetWidth')) / 2;\r\n            var offsetY = (($(window).height() - $image.prop('offsetHeight')) / 2) + $(window).scrollTop();\r\n\r\n            _x = _this.pageX - offsetX;\r\n            _y = _this.pageY - offsetY;\r\n\r\n            var x = (scaleVal - 1) * (_x);\r\n            var y = (scaleVal - 1) * (_y);\r\n\r\n            $image.css('transform', 'scale3d(' + scaleVal + ', ' + scaleVal + ', 1)').attr('data-scale', scaleVal);\r\n\r\n            if (_this.core.s.useLeftForZoom) {\r\n                $image.parent().css({\r\n                    left: -x + 'px',\r\n                    top: -y + 'px'\r\n                }).attr('data-x', x).attr('data-y', y);\r\n            } else {\r\n                $image.parent().css('transform', 'translate3d(-' + x + 'px, -' + y + 'px, 0)').attr('data-x', x).attr('data-y', y);\r\n            }\r\n        };\r\n\r\n        var callScale = function() {\r\n            if (scale > 1) {\r\n                _this.core.$outer.addClass('lg-zoomed');\r\n            } else {\r\n                _this.resetZoom();\r\n            }\r\n\r\n            if (scale < 1) {\r\n                scale = 1;\r\n            }\r\n\r\n            zoom(scale);\r\n        };\r\n\r\n        var actualSize = function(event, $image, index, fromIcon) {\r\n            var w = $image.prop('offsetWidth');\r\n            var nw;\r\n            if (_this.core.s.dynamic) {\r\n                nw = _this.core.s.dynamicEl[index].width || $image[0].naturalWidth || w;\r\n            } else {\r\n                nw = _this.core.$items.eq(index).attr('data-width') || $image[0].naturalWidth || w;\r\n            }\r\n\r\n            var _scale;\r\n\r\n            if (_this.core.$outer.hasClass('lg-zoomed')) {\r\n                scale = 1;\r\n            } else {\r\n                if (nw > w) {\r\n                    _scale = nw / w;\r\n                    scale = _scale || 2;\r\n                }\r\n            }\r\n\r\n            if (fromIcon) {\r\n                _this.pageX = $(window).width() / 2;\r\n                _this.pageY = ($(window).height() / 2) + $(window).scrollTop();\r\n            } else {\r\n                _this.pageX = event.pageX || event.originalEvent.targetTouches[0].pageX;\r\n                _this.pageY = event.pageY || event.originalEvent.targetTouches[0].pageY;\r\n            }\r\n\r\n            callScale();\r\n            setTimeout(function() {\r\n                _this.core.$outer.removeClass('lg-grabbing').addClass('lg-grab');\r\n            }, 10);\r\n        };\r\n\r\n        var tapped = false;\r\n\r\n        // event triggered after appending slide content\r\n        _this.core.$el.on('onAferAppendSlide.lg.tm.zoom', function(event, index) {\r\n\r\n            // Get the current element\r\n            var $image = _this.core.$slide.eq(index).find('.lg-image');\r\n\r\n            $image.on('dblclick', function(event) {\r\n                actualSize(event, $image, index);\r\n            });\r\n\r\n            $image.on('touchstart', function(event) {\r\n                if (!tapped) {\r\n                    tapped = setTimeout(function() {\r\n                        tapped = null;\r\n                    }, 300);\r\n                } else {\r\n                    clearTimeout(tapped);\r\n                    tapped = null;\r\n                    actualSize(event, $image, index);\r\n                }\r\n\r\n                event.preventDefault();\r\n            });\r\n\r\n        });\r\n\r\n        // Update zoom on resize and orientationchange\r\n        $(window).on('resize.lg.zoom scroll.lg.zoom orientationchange.lg.zoom', function() {\r\n            _this.pageX = $(window).width() / 2;\r\n            _this.pageY = ($(window).height() / 2) + $(window).scrollTop();\r\n            zoom(scale);\r\n        });\r\n\r\n        $('#lg-zoom-out').on('click.lg', function() {\r\n            if (_this.core.$outer.find('.lg-current .lg-image').length) {\r\n                scale -= _this.core.s.scale;\r\n                callScale();\r\n            }\r\n        });\r\n\r\n        $('#lg-zoom-in').on('click.lg', function() {\r\n            if (_this.core.$outer.find('.lg-current .lg-image').length) {\r\n                scale += _this.core.s.scale;\r\n                callScale();\r\n            }\r\n        });\r\n\r\n        $('#lg-actual-size').on('click.lg', function(event) {\r\n            actualSize(event, _this.core.$slide.eq(_this.core.index).find('.lg-image'), _this.core.index, true);\r\n        });\r\n\r\n        // Reset zoom on slide change\r\n        _this.core.$el.on('onBeforeSlide.lg.tm', function() {\r\n            scale = 1;\r\n            _this.resetZoom();\r\n        });\r\n\r\n        // Drag option after zoom\r\n        _this.zoomDrag();\r\n\r\n        _this.zoomSwipe();\r\n\r\n    };\r\n\r\n    // Reset zoom effect\r\n    Zoom.prototype.resetZoom = function() {\r\n        this.core.$outer.removeClass('lg-zoomed');\r\n        this.core.$slide.find('.lg-img-wrap').removeAttr('style data-x data-y');\r\n        this.core.$slide.find('.lg-image').removeAttr('style data-scale');\r\n\r\n        // Reset pagx pagy values to center\r\n        this.pageX = $(window).width() / 2;\r\n        this.pageY = ($(window).height() / 2) + $(window).scrollTop();\r\n    };\r\n\r\n    Zoom.prototype.zoomSwipe = function() {\r\n        var _this = this;\r\n        var startCoords = {};\r\n        var endCoords = {};\r\n        var isMoved = false;\r\n\r\n        // Allow x direction drag\r\n        var allowX = false;\r\n\r\n        // Allow Y direction drag\r\n        var allowY = false;\r\n\r\n        _this.core.$slide.on('touchstart.lg', function(e) {\r\n\r\n            if (_this.core.$outer.hasClass('lg-zoomed')) {\r\n                var $image = _this.core.$slide.eq(_this.core.index).find('.lg-object');\r\n\r\n                allowY = $image.prop('offsetHeight') * $image.attr('data-scale') > _this.core.$outer.find('.lg').height();\r\n                allowX = $image.prop('offsetWidth') * $image.attr('data-scale') > _this.core.$outer.find('.lg').width();\r\n                if ((allowX || allowY)) {\r\n                    e.preventDefault();\r\n                    startCoords = {\r\n                        x: e.originalEvent.targetTouches[0].pageX,\r\n                        y: e.originalEvent.targetTouches[0].pageY\r\n                    };\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        _this.core.$slide.on('touchmove.lg', function(e) {\r\n\r\n            if (_this.core.$outer.hasClass('lg-zoomed')) {\r\n\r\n                var _$el = _this.core.$slide.eq(_this.core.index).find('.lg-img-wrap');\r\n                var distanceX;\r\n                var distanceY;\r\n\r\n                e.preventDefault();\r\n                isMoved = true;\r\n\r\n                endCoords = {\r\n                    x: e.originalEvent.targetTouches[0].pageX,\r\n                    y: e.originalEvent.targetTouches[0].pageY\r\n                };\r\n\r\n                // reset opacity and transition duration\r\n                _this.core.$outer.addClass('lg-zoom-dragging');\r\n\r\n                if (allowY) {\r\n                    distanceY = (-Math.abs(_$el.attr('data-y'))) + (endCoords.y - startCoords.y);\r\n                } else {\r\n                    distanceY = -Math.abs(_$el.attr('data-y'));\r\n                }\r\n\r\n                if (allowX) {\r\n                    distanceX = (-Math.abs(_$el.attr('data-x'))) + (endCoords.x - startCoords.x);\r\n                } else {\r\n                    distanceX = -Math.abs(_$el.attr('data-x'));\r\n                }\r\n\r\n                if ((Math.abs(endCoords.x - startCoords.x) > 15) || (Math.abs(endCoords.y - startCoords.y) > 15)) {\r\n\r\n                    if (_this.core.s.useLeftForZoom) {\r\n                        _$el.css({\r\n                            left: distanceX + 'px',\r\n                            top: distanceY + 'px'\r\n                        });\r\n                    } else {\r\n                        _$el.css('transform', 'translate3d(' + distanceX + 'px, ' + distanceY + 'px, 0)');\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        });\r\n\r\n        _this.core.$slide.on('touchend.lg', function() {\r\n            if (_this.core.$outer.hasClass('lg-zoomed')) {\r\n                if (isMoved) {\r\n                    isMoved = false;\r\n                    _this.core.$outer.removeClass('lg-zoom-dragging');\r\n                    _this.touchendZoom(startCoords, endCoords, allowX, allowY);\r\n\r\n                }\r\n            }\r\n        });\r\n\r\n    };\r\n\r\n    Zoom.prototype.zoomDrag = function() {\r\n\r\n        var _this = this;\r\n        var startCoords = {};\r\n        var endCoords = {};\r\n        var isDraging = false;\r\n        var isMoved = false;\r\n\r\n        // Allow x direction drag\r\n        var allowX = false;\r\n\r\n        // Allow Y direction drag\r\n        var allowY = false;\r\n\r\n        _this.core.$slide.on('mousedown.lg.zoom', function(e) {\r\n\r\n            // execute only on .lg-object\r\n            var $image = _this.core.$slide.eq(_this.core.index).find('.lg-object');\r\n\r\n            allowY = $image.prop('offsetHeight') * $image.attr('data-scale') > _this.core.$outer.find('.lg').height();\r\n            allowX = $image.prop('offsetWidth') * $image.attr('data-scale') > _this.core.$outer.find('.lg').width();\r\n\r\n            if (_this.core.$outer.hasClass('lg-zoomed')) {\r\n                if ($(e.target).hasClass('lg-object') && (allowX || allowY)) {\r\n                    e.preventDefault();\r\n                    startCoords = {\r\n                        x: e.pageX,\r\n                        y: e.pageY\r\n                    };\r\n\r\n                    isDraging = true;\r\n\r\n                    // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\r\n                    _this.core.$outer.scrollLeft += 1;\r\n                    _this.core.$outer.scrollLeft -= 1;\r\n\r\n                    _this.core.$outer.removeClass('lg-grab').addClass('lg-grabbing');\r\n                }\r\n            }\r\n        });\r\n\r\n        $(window).on('mousemove.lg.zoom', function(e) {\r\n            if (isDraging) {\r\n                var _$el = _this.core.$slide.eq(_this.core.index).find('.lg-img-wrap');\r\n                var distanceX;\r\n                var distanceY;\r\n\r\n                isMoved = true;\r\n                endCoords = {\r\n                    x: e.pageX,\r\n                    y: e.pageY\r\n                };\r\n\r\n                // reset opacity and transition duration\r\n                _this.core.$outer.addClass('lg-zoom-dragging');\r\n\r\n                if (allowY) {\r\n                    distanceY = (-Math.abs(_$el.attr('data-y'))) + (endCoords.y - startCoords.y);\r\n                } else {\r\n                    distanceY = -Math.abs(_$el.attr('data-y'));\r\n                }\r\n\r\n                if (allowX) {\r\n                    distanceX = (-Math.abs(_$el.attr('data-x'))) + (endCoords.x - startCoords.x);\r\n                } else {\r\n                    distanceX = -Math.abs(_$el.attr('data-x'));\r\n                }\r\n\r\n                if (_this.core.s.useLeftForZoom) {\r\n                    _$el.css({\r\n                        left: distanceX + 'px',\r\n                        top: distanceY + 'px'\r\n                    });\r\n                } else {\r\n                    _$el.css('transform', 'translate3d(' + distanceX + 'px, ' + distanceY + 'px, 0)');\r\n                }\r\n            }\r\n        });\r\n\r\n        $(window).on('mouseup.lg.zoom', function(e) {\r\n\r\n            if (isDraging) {\r\n                isDraging = false;\r\n                _this.core.$outer.removeClass('lg-zoom-dragging');\r\n\r\n                // Fix for chrome mouse move on click\r\n                if (isMoved && ((startCoords.x !== endCoords.x) || (startCoords.y !== endCoords.y))) {\r\n                    endCoords = {\r\n                        x: e.pageX,\r\n                        y: e.pageY\r\n                    };\r\n                    _this.touchendZoom(startCoords, endCoords, allowX, allowY);\r\n\r\n                }\r\n\r\n                isMoved = false;\r\n            }\r\n\r\n            _this.core.$outer.removeClass('lg-grabbing').addClass('lg-grab');\r\n\r\n        });\r\n    };\r\n\r\n    Zoom.prototype.touchendZoom = function(startCoords, endCoords, allowX, allowY) {\r\n\r\n        var _this = this;\r\n        var _$el = _this.core.$slide.eq(_this.core.index).find('.lg-img-wrap');\r\n        var $image = _this.core.$slide.eq(_this.core.index).find('.lg-object');\r\n        var distanceX = (-Math.abs(_$el.attr('data-x'))) + (endCoords.x - startCoords.x);\r\n        var distanceY = (-Math.abs(_$el.attr('data-y'))) + (endCoords.y - startCoords.y);\r\n        var minY = (_this.core.$outer.find('.lg').height() - $image.prop('offsetHeight')) / 2;\r\n        var maxY = Math.abs(($image.prop('offsetHeight') * Math.abs($image.attr('data-scale'))) - _this.core.$outer.find('.lg').height() + minY);\r\n        var minX = (_this.core.$outer.find('.lg').width() - $image.prop('offsetWidth')) / 2;\r\n        var maxX = Math.abs(($image.prop('offsetWidth') * Math.abs($image.attr('data-scale'))) - _this.core.$outer.find('.lg').width() + minX);\r\n\r\n        if ((Math.abs(endCoords.x - startCoords.x) > 15) || (Math.abs(endCoords.y - startCoords.y) > 15)) {\r\n            if (allowY) {\r\n                if (distanceY <= -maxY) {\r\n                    distanceY = -maxY;\r\n                } else if (distanceY >= -minY) {\r\n                    distanceY = -minY;\r\n                }\r\n            }\r\n\r\n            if (allowX) {\r\n                if (distanceX <= -maxX) {\r\n                    distanceX = -maxX;\r\n                } else if (distanceX >= -minX) {\r\n                    distanceX = -minX;\r\n                }\r\n            }\r\n\r\n            if (allowY) {\r\n                _$el.attr('data-y', Math.abs(distanceY));\r\n            } else {\r\n                distanceY = -Math.abs(_$el.attr('data-y'));\r\n            }\r\n\r\n            if (allowX) {\r\n                _$el.attr('data-x', Math.abs(distanceX));\r\n            } else {\r\n                distanceX = -Math.abs(_$el.attr('data-x'));\r\n            }\r\n\r\n            if (_this.core.s.useLeftForZoom) {\r\n                _$el.css({\r\n                    left: distanceX + 'px',\r\n                    top: distanceY + 'px'\r\n                });\r\n            } else {\r\n                _$el.css('transform', 'translate3d(' + distanceX + 'px, ' + distanceY + 'px, 0)');\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    Zoom.prototype.destroy = function() {\r\n\r\n        var _this = this;\r\n\r\n        // Unbind all events added by lightGallery zoom plugin\r\n        _this.core.$el.off('.lg.zoom');\r\n        $(window).off('.lg.zoom');\r\n        _this.core.$slide.off('.lg.zoom');\r\n        _this.core.$el.off('.lg.tm.zoom');\r\n        _this.resetZoom();\r\n        clearTimeout(_this.zoomabletimeout);\r\n        _this.zoomabletimeout = false;\r\n    };\r\n\r\n    $.fn.lightGallery.modules.zoom = Zoom;\r\n\r\n})();\r\n\r\n\r\n}));\r\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof global.process === \"object\" && global.process.domain) {\n      invoke = global.process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","/*!\n * Select2 4.0.5\n * https://select2.github.io\n *\n * Released under the MIT license\n * https://github.com/select2/select2/blob/master/LICENSE.md\n */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof module === 'object' && module.exports) {\n    // Node/CommonJS\n    module.exports = function (root, jQuery) {\n      if (jQuery === undefined) {\n        // require('jQuery') returns a factory that requires window to\n        // build a jQuery instance, we normalize how we use modules\n        // that require this pattern but the window provided is a noop\n        // if it's defined (how jquery works)\n        if (typeof window !== 'undefined') {\n          jQuery = require('jquery');\n        }\n        else {\n          jQuery = require('jquery')(root);\n        }\n      }\n      factory(jQuery);\n      return jQuery;\n    };\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n} (function (jQuery) {\n  // This is needed so we can catch the AMD loader configuration and use it\n  // The inner file should be wrapped (by `banner.start.js`) in a function that\n  // returns the AMD loader references.\n  var S2 =(function () {\n  // Restore the Select2 AMD loader so it can be used\n  // Needed mostly in the language files, where the loader is not inserted\n  if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {\n    var S2 = jQuery.fn.select2.amd;\n  }\nvar S2;(function () { if (!S2 || !S2.requirejs) {\nif (!S2) { S2 = {}; } else { require = S2; }\n/**\n * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, http://github.com/requirejs/almond/LICENSE\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name) {\n            name = name.split('/');\n            lastIndex = name.length - 1;\n\n            // If wanting node ID compatibility, strip .js from end\n            // of IDs. Have to do this here, and not in nameToUrl\n            // because node allows either .js or non .js to map\n            // to same file.\n            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n            }\n\n            // Starts with a '.' so need the baseName\n            if (name[0].charAt(0) === '.' && baseParts) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that 'directory' and not name of the baseName's\n                //module. For instance, baseName of 'one/two/three', maps to\n                //'one/two/three.js', but we want the directory, 'one/two' for\n                //this normalization.\n                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                name = normalizedBaseParts.concat(name);\n            }\n\n            //start trimDots\n            for (i = 0; i < name.length; i++) {\n                part = name[i];\n                if (part === '.') {\n                    name.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        name.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n            //end trimDots\n\n            name = name.join('/');\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    //Creates a parts array for a relName where first part is plugin ID,\n    //second part is resource ID. Assumes relName has already been normalized.\n    function makeRelParts(relName) {\n        return relName ? splitPrefix(relName) : [];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relParts) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0],\n            relResourceName = relParts[1];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relResourceName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relResourceName));\n            } else {\n                name = normalize(name, relResourceName);\n            }\n        } else {\n            name = normalize(name, relResourceName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i, relParts,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n        relParts = makeRelParts(relName);\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relParts);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, makeRelParts(callback)).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\nS2.requirejs = requirejs;S2.require = require;S2.define = define;\n}\n}());\nS2.define(\"almond\", function(){});\n\n/* global jQuery:false, $:false */\nS2.define('jquery',[],function () {\n  var _$ = jQuery || $;\n\n  if (_$ == null && console && console.error) {\n    console.error(\n      'Select2: An instance of jQuery or a jQuery-compatible library was not ' +\n      'found. Make sure that you are including jQuery before Select2 on your ' +\n      'web page.'\n    );\n  }\n\n  return _$;\n});\n\nS2.define('select2/utils',[\n  'jquery'\n], function ($) {\n  var Utils = {};\n\n  Utils.Extend = function (ChildClass, SuperClass) {\n    var __hasProp = {}.hasOwnProperty;\n\n    function BaseConstructor () {\n      this.constructor = ChildClass;\n    }\n\n    for (var key in SuperClass) {\n      if (__hasProp.call(SuperClass, key)) {\n        ChildClass[key] = SuperClass[key];\n      }\n    }\n\n    BaseConstructor.prototype = SuperClass.prototype;\n    ChildClass.prototype = new BaseConstructor();\n    ChildClass.__super__ = SuperClass.prototype;\n\n    return ChildClass;\n  };\n\n  function getMethods (theClass) {\n    var proto = theClass.prototype;\n\n    var methods = [];\n\n    for (var methodName in proto) {\n      var m = proto[methodName];\n\n      if (typeof m !== 'function') {\n        continue;\n      }\n\n      if (methodName === 'constructor') {\n        continue;\n      }\n\n      methods.push(methodName);\n    }\n\n    return methods;\n  }\n\n  Utils.Decorate = function (SuperClass, DecoratorClass) {\n    var decoratedMethods = getMethods(DecoratorClass);\n    var superMethods = getMethods(SuperClass);\n\n    function DecoratedClass () {\n      var unshift = Array.prototype.unshift;\n\n      var argCount = DecoratorClass.prototype.constructor.length;\n\n      var calledConstructor = SuperClass.prototype.constructor;\n\n      if (argCount > 0) {\n        unshift.call(arguments, SuperClass.prototype.constructor);\n\n        calledConstructor = DecoratorClass.prototype.constructor;\n      }\n\n      calledConstructor.apply(this, arguments);\n    }\n\n    DecoratorClass.displayName = SuperClass.displayName;\n\n    function ctr () {\n      this.constructor = DecoratedClass;\n    }\n\n    DecoratedClass.prototype = new ctr();\n\n    for (var m = 0; m < superMethods.length; m++) {\n        var superMethod = superMethods[m];\n\n        DecoratedClass.prototype[superMethod] =\n          SuperClass.prototype[superMethod];\n    }\n\n    var calledMethod = function (methodName) {\n      // Stub out the original method if it's not decorating an actual method\n      var originalMethod = function () {};\n\n      if (methodName in DecoratedClass.prototype) {\n        originalMethod = DecoratedClass.prototype[methodName];\n      }\n\n      var decoratedMethod = DecoratorClass.prototype[methodName];\n\n      return function () {\n        var unshift = Array.prototype.unshift;\n\n        unshift.call(arguments, originalMethod);\n\n        return decoratedMethod.apply(this, arguments);\n      };\n    };\n\n    for (var d = 0; d < decoratedMethods.length; d++) {\n      var decoratedMethod = decoratedMethods[d];\n\n      DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);\n    }\n\n    return DecoratedClass;\n  };\n\n  var Observable = function () {\n    this.listeners = {};\n  };\n\n  Observable.prototype.on = function (event, callback) {\n    this.listeners = this.listeners || {};\n\n    if (event in this.listeners) {\n      this.listeners[event].push(callback);\n    } else {\n      this.listeners[event] = [callback];\n    }\n  };\n\n  Observable.prototype.trigger = function (event) {\n    var slice = Array.prototype.slice;\n    var params = slice.call(arguments, 1);\n\n    this.listeners = this.listeners || {};\n\n    // Params should always come in as an array\n    if (params == null) {\n      params = [];\n    }\n\n    // If there are no arguments to the event, use a temporary object\n    if (params.length === 0) {\n      params.push({});\n    }\n\n    // Set the `_type` of the first object to the event\n    params[0]._type = event;\n\n    if (event in this.listeners) {\n      this.invoke(this.listeners[event], slice.call(arguments, 1));\n    }\n\n    if ('*' in this.listeners) {\n      this.invoke(this.listeners['*'], arguments);\n    }\n  };\n\n  Observable.prototype.invoke = function (listeners, params) {\n    for (var i = 0, len = listeners.length; i < len; i++) {\n      listeners[i].apply(this, params);\n    }\n  };\n\n  Utils.Observable = Observable;\n\n  Utils.generateChars = function (length) {\n    var chars = '';\n\n    for (var i = 0; i < length; i++) {\n      var randomChar = Math.floor(Math.random() * 36);\n      chars += randomChar.toString(36);\n    }\n\n    return chars;\n  };\n\n  Utils.bind = function (func, context) {\n    return function () {\n      func.apply(context, arguments);\n    };\n  };\n\n  Utils._convertData = function (data) {\n    for (var originalKey in data) {\n      var keys = originalKey.split('-');\n\n      var dataLevel = data;\n\n      if (keys.length === 1) {\n        continue;\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k];\n\n        // Lowercase the first letter\n        // By default, dash-separated becomes camelCase\n        key = key.substring(0, 1).toLowerCase() + key.substring(1);\n\n        if (!(key in dataLevel)) {\n          dataLevel[key] = {};\n        }\n\n        if (k == keys.length - 1) {\n          dataLevel[key] = data[originalKey];\n        }\n\n        dataLevel = dataLevel[key];\n      }\n\n      delete data[originalKey];\n    }\n\n    return data;\n  };\n\n  Utils.hasScroll = function (index, el) {\n    // Adapted from the function created by @ShadowScripter\n    // and adapted by @BillBarry on the Stack Exchange Code Review website.\n    // The original code can be found at\n    // http://codereview.stackexchange.com/q/13338\n    // and was designed to be used with the Sizzle selector engine.\n\n    var $el = $(el);\n    var overflowX = el.style.overflowX;\n    var overflowY = el.style.overflowY;\n\n    //Check both x and y declarations\n    if (overflowX === overflowY &&\n        (overflowY === 'hidden' || overflowY === 'visible')) {\n      return false;\n    }\n\n    if (overflowX === 'scroll' || overflowY === 'scroll') {\n      return true;\n    }\n\n    return ($el.innerHeight() < el.scrollHeight ||\n      $el.innerWidth() < el.scrollWidth);\n  };\n\n  Utils.escapeMarkup = function (markup) {\n    var replaceMap = {\n      '\\\\': '&#92;',\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      '\\'': '&#39;',\n      '/': '&#47;'\n    };\n\n    // Do not try to escape the markup if it's not a string\n    if (typeof markup !== 'string') {\n      return markup;\n    }\n\n    return String(markup).replace(/[&<>\"'\\/\\\\]/g, function (match) {\n      return replaceMap[match];\n    });\n  };\n\n  // Append an array of jQuery nodes to a given element.\n  Utils.appendMany = function ($element, $nodes) {\n    // jQuery 1.7.x does not support $.fn.append() with an array\n    // Fall back to a jQuery object collection using $.fn.add()\n    if ($.fn.jquery.substr(0, 3) === '1.7') {\n      var $jqNodes = $();\n\n      $.map($nodes, function (node) {\n        $jqNodes = $jqNodes.add(node);\n      });\n\n      $nodes = $jqNodes;\n    }\n\n    $element.append($nodes);\n  };\n\n  return Utils;\n});\n\nS2.define('select2/results',[\n  'jquery',\n  './utils'\n], function ($, Utils) {\n  function Results ($element, options, dataAdapter) {\n    this.$element = $element;\n    this.data = dataAdapter;\n    this.options = options;\n\n    Results.__super__.constructor.call(this);\n  }\n\n  Utils.Extend(Results, Utils.Observable);\n\n  Results.prototype.render = function () {\n    var $results = $(\n      '<ul class=\"select2-results__options\" role=\"tree\"></ul>'\n    );\n\n    if (this.options.get('multiple')) {\n      $results.attr('aria-multiselectable', 'true');\n    }\n\n    this.$results = $results;\n\n    return $results;\n  };\n\n  Results.prototype.clear = function () {\n    this.$results.empty();\n  };\n\n  Results.prototype.displayMessage = function (params) {\n    var escapeMarkup = this.options.get('escapeMarkup');\n\n    this.clear();\n    this.hideLoading();\n\n    var $message = $(\n      '<li role=\"treeitem\" aria-live=\"assertive\"' +\n      ' class=\"select2-results__option\"></li>'\n    );\n\n    var message = this.options.get('translations').get(params.message);\n\n    $message.append(\n      escapeMarkup(\n        message(params.args)\n      )\n    );\n\n    $message[0].className += ' select2-results__message';\n\n    this.$results.append($message);\n  };\n\n  Results.prototype.hideMessages = function () {\n    this.$results.find('.select2-results__message').remove();\n  };\n\n  Results.prototype.append = function (data) {\n    this.hideLoading();\n\n    var $options = [];\n\n    if (data.results == null || data.results.length === 0) {\n      if (this.$results.children().length === 0) {\n        this.trigger('results:message', {\n          message: 'noResults'\n        });\n      }\n\n      return;\n    }\n\n    data.results = this.sort(data.results);\n\n    for (var d = 0; d < data.results.length; d++) {\n      var item = data.results[d];\n\n      var $option = this.option(item);\n\n      $options.push($option);\n    }\n\n    this.$results.append($options);\n  };\n\n  Results.prototype.position = function ($results, $dropdown) {\n    var $resultsContainer = $dropdown.find('.select2-results');\n    $resultsContainer.append($results);\n  };\n\n  Results.prototype.sort = function (data) {\n    var sorter = this.options.get('sorter');\n\n    return sorter(data);\n  };\n\n  Results.prototype.highlightFirstItem = function () {\n    var $options = this.$results\n      .find('.select2-results__option[aria-selected]');\n\n    var $selected = $options.filter('[aria-selected=true]');\n\n    // Check if there are any selected options\n    if ($selected.length > 0) {\n      // If there are selected options, highlight the first\n      $selected.first().trigger('mouseenter');\n    } else {\n      // If there are no selected options, highlight the first option\n      // in the dropdown\n      $options.first().trigger('mouseenter');\n    }\n\n    this.ensureHighlightVisible();\n  };\n\n  Results.prototype.setClasses = function () {\n    var self = this;\n\n    this.data.current(function (selected) {\n      var selectedIds = $.map(selected, function (s) {\n        return s.id.toString();\n      });\n\n      var $options = self.$results\n        .find('.select2-results__option[aria-selected]');\n\n      $options.each(function () {\n        var $option = $(this);\n\n        var item = $.data(this, 'data');\n\n        // id needs to be converted to a string when comparing\n        var id = '' + item.id;\n\n        if ((item.element != null && item.element.selected) ||\n            (item.element == null && $.inArray(id, selectedIds) > -1)) {\n          $option.attr('aria-selected', 'true');\n        } else {\n          $option.attr('aria-selected', 'false');\n        }\n      });\n\n    });\n  };\n\n  Results.prototype.showLoading = function (params) {\n    this.hideLoading();\n\n    var loadingMore = this.options.get('translations').get('searching');\n\n    var loading = {\n      disabled: true,\n      loading: true,\n      text: loadingMore(params)\n    };\n    var $loading = this.option(loading);\n    $loading.className += ' loading-results';\n\n    this.$results.prepend($loading);\n  };\n\n  Results.prototype.hideLoading = function () {\n    this.$results.find('.loading-results').remove();\n  };\n\n  Results.prototype.option = function (data) {\n    var option = document.createElement('li');\n    option.className = 'select2-results__option';\n\n    var attrs = {\n      'role': 'treeitem',\n      'aria-selected': 'false'\n    };\n\n    if (data.disabled) {\n      delete attrs['aria-selected'];\n      attrs['aria-disabled'] = 'true';\n    }\n\n    if (data.id == null) {\n      delete attrs['aria-selected'];\n    }\n\n    if (data._resultId != null) {\n      option.id = data._resultId;\n    }\n\n    if (data.title) {\n      option.title = data.title;\n    }\n\n    if (data.children) {\n      attrs.role = 'group';\n      attrs['aria-label'] = data.text;\n      delete attrs['aria-selected'];\n    }\n\n    for (var attr in attrs) {\n      var val = attrs[attr];\n\n      option.setAttribute(attr, val);\n    }\n\n    if (data.children) {\n      var $option = $(option);\n\n      var label = document.createElement('strong');\n      label.className = 'select2-results__group';\n\n      var $label = $(label);\n      this.template(data, label);\n\n      var $children = [];\n\n      for (var c = 0; c < data.children.length; c++) {\n        var child = data.children[c];\n\n        var $child = this.option(child);\n\n        $children.push($child);\n      }\n\n      var $childrenContainer = $('<ul></ul>', {\n        'class': 'select2-results__options select2-results__options--nested'\n      });\n\n      $childrenContainer.append($children);\n\n      $option.append(label);\n      $option.append($childrenContainer);\n    } else {\n      this.template(data, option);\n    }\n\n    $.data(option, 'data', data);\n\n    return option;\n  };\n\n  Results.prototype.bind = function (container, $container) {\n    var self = this;\n\n    var id = container.id + '-results';\n\n    this.$results.attr('id', id);\n\n    container.on('results:all', function (params) {\n      self.clear();\n      self.append(params.data);\n\n      if (container.isOpen()) {\n        self.setClasses();\n        self.highlightFirstItem();\n      }\n    });\n\n    container.on('results:append', function (params) {\n      self.append(params.data);\n\n      if (container.isOpen()) {\n        self.setClasses();\n      }\n    });\n\n    container.on('query', function (params) {\n      self.hideMessages();\n      self.showLoading(params);\n    });\n\n    container.on('select', function () {\n      if (!container.isOpen()) {\n        return;\n      }\n\n      self.setClasses();\n      self.highlightFirstItem();\n    });\n\n    container.on('unselect', function () {\n      if (!container.isOpen()) {\n        return;\n      }\n\n      self.setClasses();\n      self.highlightFirstItem();\n    });\n\n    container.on('open', function () {\n      // When the dropdown is open, aria-expended=\"true\"\n      self.$results.attr('aria-expanded', 'true');\n      self.$results.attr('aria-hidden', 'false');\n\n      self.setClasses();\n      self.ensureHighlightVisible();\n    });\n\n    container.on('close', function () {\n      // When the dropdown is closed, aria-expended=\"false\"\n      self.$results.attr('aria-expanded', 'false');\n      self.$results.attr('aria-hidden', 'true');\n      self.$results.removeAttr('aria-activedescendant');\n    });\n\n    container.on('results:toggle', function () {\n      var $highlighted = self.getHighlightedResults();\n\n      if ($highlighted.length === 0) {\n        return;\n      }\n\n      $highlighted.trigger('mouseup');\n    });\n\n    container.on('results:select', function () {\n      var $highlighted = self.getHighlightedResults();\n\n      if ($highlighted.length === 0) {\n        return;\n      }\n\n      var data = $highlighted.data('data');\n\n      if ($highlighted.attr('aria-selected') == 'true') {\n        self.trigger('close', {});\n      } else {\n        self.trigger('select', {\n          data: data\n        });\n      }\n    });\n\n    container.on('results:previous', function () {\n      var $highlighted = self.getHighlightedResults();\n\n      var $options = self.$results.find('[aria-selected]');\n\n      var currentIndex = $options.index($highlighted);\n\n      // If we are already at te top, don't move further\n      if (currentIndex === 0) {\n        return;\n      }\n\n      var nextIndex = currentIndex - 1;\n\n      // If none are highlighted, highlight the first\n      if ($highlighted.length === 0) {\n        nextIndex = 0;\n      }\n\n      var $next = $options.eq(nextIndex);\n\n      $next.trigger('mouseenter');\n\n      var currentOffset = self.$results.offset().top;\n      var nextTop = $next.offset().top;\n      var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);\n\n      if (nextIndex === 0) {\n        self.$results.scrollTop(0);\n      } else if (nextTop - currentOffset < 0) {\n        self.$results.scrollTop(nextOffset);\n      }\n    });\n\n    container.on('results:next', function () {\n      var $highlighted = self.getHighlightedResults();\n\n      var $options = self.$results.find('[aria-selected]');\n\n      var currentIndex = $options.index($highlighted);\n\n      var nextIndex = currentIndex + 1;\n\n      // If we are at the last option, stay there\n      if (nextIndex >= $options.length) {\n        return;\n      }\n\n      var $next = $options.eq(nextIndex);\n\n      $next.trigger('mouseenter');\n\n      var currentOffset = self.$results.offset().top +\n        self.$results.outerHeight(false);\n      var nextBottom = $next.offset().top + $next.outerHeight(false);\n      var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;\n\n      if (nextIndex === 0) {\n        self.$results.scrollTop(0);\n      } else if (nextBottom > currentOffset) {\n        self.$results.scrollTop(nextOffset);\n      }\n    });\n\n    container.on('results:focus', function (params) {\n      params.element.addClass('select2-results__option--highlighted');\n    });\n\n    container.on('results:message', function (params) {\n      self.displayMessage(params);\n    });\n\n    if ($.fn.mousewheel) {\n      this.$results.on('mousewheel', function (e) {\n        var top = self.$results.scrollTop();\n\n        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;\n\n        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;\n        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();\n\n        if (isAtTop) {\n          self.$results.scrollTop(0);\n\n          e.preventDefault();\n          e.stopPropagation();\n        } else if (isAtBottom) {\n          self.$results.scrollTop(\n            self.$results.get(0).scrollHeight - self.$results.height()\n          );\n\n          e.preventDefault();\n          e.stopPropagation();\n        }\n      });\n    }\n\n    this.$results.on('mouseup', '.select2-results__option[aria-selected]',\n      function (evt) {\n      var $this = $(this);\n\n      var data = $this.data('data');\n\n      if ($this.attr('aria-selected') === 'true') {\n        if (self.options.get('multiple')) {\n          self.trigger('unselect', {\n            originalEvent: evt,\n            data: data\n          });\n        } else {\n          self.trigger('close', {});\n        }\n\n        return;\n      }\n\n      self.trigger('select', {\n        originalEvent: evt,\n        data: data\n      });\n    });\n\n    this.$results.on('mouseenter', '.select2-results__option[aria-selected]',\n      function (evt) {\n      var data = $(this).data('data');\n\n      self.getHighlightedResults()\n          .removeClass('select2-results__option--highlighted');\n\n      self.trigger('results:focus', {\n        data: data,\n        element: $(this)\n      });\n    });\n  };\n\n  Results.prototype.getHighlightedResults = function () {\n    var $highlighted = this.$results\n    .find('.select2-results__option--highlighted');\n\n    return $highlighted;\n  };\n\n  Results.prototype.destroy = function () {\n    this.$results.remove();\n  };\n\n  Results.prototype.ensureHighlightVisible = function () {\n    var $highlighted = this.getHighlightedResults();\n\n    if ($highlighted.length === 0) {\n      return;\n    }\n\n    var $options = this.$results.find('[aria-selected]');\n\n    var currentIndex = $options.index($highlighted);\n\n    var currentOffset = this.$results.offset().top;\n    var nextTop = $highlighted.offset().top;\n    var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);\n\n    var offsetDelta = nextTop - currentOffset;\n    nextOffset -= $highlighted.outerHeight(false) * 2;\n\n    if (currentIndex <= 2) {\n      this.$results.scrollTop(0);\n    } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {\n      this.$results.scrollTop(nextOffset);\n    }\n  };\n\n  Results.prototype.template = function (result, container) {\n    var template = this.options.get('templateResult');\n    var escapeMarkup = this.options.get('escapeMarkup');\n\n    var content = template(result, container);\n\n    if (content == null) {\n      container.style.display = 'none';\n    } else if (typeof content === 'string') {\n      container.innerHTML = escapeMarkup(content);\n    } else {\n      $(container).append(content);\n    }\n  };\n\n  return Results;\n});\n\nS2.define('select2/keys',[\n\n], function () {\n  var KEYS = {\n    BACKSPACE: 8,\n    TAB: 9,\n    ENTER: 13,\n    SHIFT: 16,\n    CTRL: 17,\n    ALT: 18,\n    ESC: 27,\n    SPACE: 32,\n    PAGE_UP: 33,\n    PAGE_DOWN: 34,\n    END: 35,\n    HOME: 36,\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40,\n    DELETE: 46\n  };\n\n  return KEYS;\n});\n\nS2.define('select2/selection/base',[\n  'jquery',\n  '../utils',\n  '../keys'\n], function ($, Utils, KEYS) {\n  function BaseSelection ($element, options) {\n    this.$element = $element;\n    this.options = options;\n\n    BaseSelection.__super__.constructor.call(this);\n  }\n\n  Utils.Extend(BaseSelection, Utils.Observable);\n\n  BaseSelection.prototype.render = function () {\n    var $selection = $(\n      '<span class=\"select2-selection\" role=\"combobox\" ' +\n      ' aria-haspopup=\"true\" aria-expanded=\"false\">' +\n      '</span>'\n    );\n\n    this._tabindex = 0;\n\n    if (this.$element.data('old-tabindex') != null) {\n      this._tabindex = this.$element.data('old-tabindex');\n    } else if (this.$element.attr('tabindex') != null) {\n      this._tabindex = this.$element.attr('tabindex');\n    }\n\n    $selection.attr('title', this.$element.attr('title'));\n    $selection.attr('tabindex', this._tabindex);\n\n    this.$selection = $selection;\n\n    return $selection;\n  };\n\n  BaseSelection.prototype.bind = function (container, $container) {\n    var self = this;\n\n    var id = container.id + '-container';\n    var resultsId = container.id + '-results';\n\n    this.container = container;\n\n    this.$selection.on('focus', function (evt) {\n      self.trigger('focus', evt);\n    });\n\n    this.$selection.on('blur', function (evt) {\n      self._handleBlur(evt);\n    });\n\n    this.$selection.on('keydown', function (evt) {\n      self.trigger('keypress', evt);\n\n      if (evt.which === KEYS.SPACE) {\n        evt.preventDefault();\n      }\n    });\n\n    container.on('results:focus', function (params) {\n      self.$selection.attr('aria-activedescendant', params.data._resultId);\n    });\n\n    container.on('selection:update', function (params) {\n      self.update(params.data);\n    });\n\n    container.on('open', function () {\n      // When the dropdown is open, aria-expanded=\"true\"\n      self.$selection.attr('aria-expanded', 'true');\n      self.$selection.attr('aria-owns', resultsId);\n\n      self._attachCloseHandler(container);\n    });\n\n    container.on('close', function () {\n      // When the dropdown is closed, aria-expanded=\"false\"\n      self.$selection.attr('aria-expanded', 'false');\n      self.$selection.removeAttr('aria-activedescendant');\n      self.$selection.removeAttr('aria-owns');\n\n      self.$selection.focus();\n\n      self._detachCloseHandler(container);\n    });\n\n    container.on('enable', function () {\n      self.$selection.attr('tabindex', self._tabindex);\n    });\n\n    container.on('disable', function () {\n      self.$selection.attr('tabindex', '-1');\n    });\n  };\n\n  BaseSelection.prototype._handleBlur = function (evt) {\n    var self = this;\n\n    // This needs to be delayed as the active element is the body when the tab\n    // key is pressed, possibly along with others.\n    window.setTimeout(function () {\n      // Don't trigger `blur` if the focus is still in the selection\n      if (\n        (document.activeElement == self.$selection[0]) ||\n        ($.contains(self.$selection[0], document.activeElement))\n      ) {\n        return;\n      }\n\n      self.trigger('blur', evt);\n    }, 1);\n  };\n\n  BaseSelection.prototype._attachCloseHandler = function (container) {\n    var self = this;\n\n    $(document.body).on('mousedown.select2.' + container.id, function (e) {\n      var $target = $(e.target);\n\n      var $select = $target.closest('.select2');\n\n      var $all = $('.select2.select2-container--open');\n\n      $all.each(function () {\n        var $this = $(this);\n\n        if (this == $select[0]) {\n          return;\n        }\n\n        var $element = $this.data('element');\n\n        $element.select2('close');\n      });\n    });\n  };\n\n  BaseSelection.prototype._detachCloseHandler = function (container) {\n    $(document.body).off('mousedown.select2.' + container.id);\n  };\n\n  BaseSelection.prototype.position = function ($selection, $container) {\n    var $selectionContainer = $container.find('.selection');\n    $selectionContainer.append($selection);\n  };\n\n  BaseSelection.prototype.destroy = function () {\n    this._detachCloseHandler(this.container);\n  };\n\n  BaseSelection.prototype.update = function (data) {\n    throw new Error('The `update` method must be defined in child classes.');\n  };\n\n  return BaseSelection;\n});\n\nS2.define('select2/selection/single',[\n  'jquery',\n  './base',\n  '../utils',\n  '../keys'\n], function ($, BaseSelection, Utils, KEYS) {\n  function SingleSelection () {\n    SingleSelection.__super__.constructor.apply(this, arguments);\n  }\n\n  Utils.Extend(SingleSelection, BaseSelection);\n\n  SingleSelection.prototype.render = function () {\n    var $selection = SingleSelection.__super__.render.call(this);\n\n    $selection.addClass('select2-selection--single');\n\n    $selection.html(\n      '<span class=\"select2-selection__rendered\"></span>' +\n      '<span class=\"select2-selection__arrow\" role=\"presentation\">' +\n        '<b role=\"presentation\"></b>' +\n      '</span>'\n    );\n\n    return $selection;\n  };\n\n  SingleSelection.prototype.bind = function (container, $container) {\n    var self = this;\n\n    SingleSelection.__super__.bind.apply(this, arguments);\n\n    var id = container.id + '-container';\n\n    this.$selection.find('.select2-selection__rendered').attr('id', id);\n    this.$selection.attr('aria-labelledby', id);\n\n    this.$selection.on('mousedown', function (evt) {\n      // Only respond to left clicks\n      if (evt.which !== 1) {\n        return;\n      }\n\n      self.trigger('toggle', {\n        originalEvent: evt\n      });\n    });\n\n    this.$selection.on('focus', function (evt) {\n      // User focuses on the container\n    });\n\n    this.$selection.on('blur', function (evt) {\n      // User exits the container\n    });\n\n    container.on('focus', function (evt) {\n      if (!container.isOpen()) {\n        self.$selection.focus();\n      }\n    });\n\n    container.on('selection:update', function (params) {\n      self.update(params.data);\n    });\n  };\n\n  SingleSelection.prototype.clear = function () {\n    this.$selection.find('.select2-selection__rendered').empty();\n  };\n\n  SingleSelection.prototype.display = function (data, container) {\n    var template = this.options.get('templateSelection');\n    var escapeMarkup = this.options.get('escapeMarkup');\n\n    return escapeMarkup(template(data, container));\n  };\n\n  SingleSelection.prototype.selectionContainer = function () {\n    return $('<span></span>');\n  };\n\n  SingleSelection.prototype.update = function (data) {\n    if (data.length === 0) {\n      this.clear();\n      return;\n    }\n\n    var selection = data[0];\n\n    var $rendered = this.$selection.find('.select2-selection__rendered');\n    var formatted = this.display(selection, $rendered);\n\n    $rendered.empty().append(formatted);\n    $rendered.prop('title', selection.title || selection.text);\n  };\n\n  return SingleSelection;\n});\n\nS2.define('select2/selection/multiple',[\n  'jquery',\n  './base',\n  '../utils'\n], function ($, BaseSelection, Utils) {\n  function MultipleSelection ($element, options) {\n    MultipleSelection.__super__.constructor.apply(this, arguments);\n  }\n\n  Utils.Extend(MultipleSelection, BaseSelection);\n\n  MultipleSelection.prototype.render = function () {\n    var $selection = MultipleSelection.__super__.render.call(this);\n\n    $selection.addClass('select2-selection--multiple');\n\n    $selection.html(\n      '<ul class=\"select2-selection__rendered\"></ul>'\n    );\n\n    return $selection;\n  };\n\n  MultipleSelection.prototype.bind = function (container, $container) {\n    var self = this;\n\n    MultipleSelection.__super__.bind.apply(this, arguments);\n\n    this.$selection.on('click', function (evt) {\n      self.trigger('toggle', {\n        originalEvent: evt\n      });\n    });\n\n    this.$selection.on(\n      'click',\n      '.select2-selection__choice__remove',\n      function (evt) {\n        // Ignore the event if it is disabled\n        if (self.options.get('disabled')) {\n          return;\n        }\n\n        var $remove = $(this);\n        var $selection = $remove.parent();\n\n        var data = $selection.data('data');\n\n        self.trigger('unselect', {\n          originalEvent: evt,\n          data: data\n        });\n      }\n    );\n  };\n\n  MultipleSelection.prototype.clear = function () {\n    this.$selection.find('.select2-selection__rendered').empty();\n  };\n\n  MultipleSelection.prototype.display = function (data, container) {\n    var template = this.options.get('templateSelection');\n    var escapeMarkup = this.options.get('escapeMarkup');\n\n    return escapeMarkup(template(data, container));\n  };\n\n  MultipleSelection.prototype.selectionContainer = function () {\n    var $container = $(\n      '<li class=\"select2-selection__choice\">' +\n        '<span class=\"select2-selection__choice__remove\" role=\"presentation\">' +\n          '&times;' +\n        '</span>' +\n      '</li>'\n    );\n\n    return $container;\n  };\n\n  MultipleSelection.prototype.update = function (data) {\n    this.clear();\n\n    if (data.length === 0) {\n      return;\n    }\n\n    var $selections = [];\n\n    for (var d = 0; d < data.length; d++) {\n      var selection = data[d];\n\n      var $selection = this.selectionContainer();\n      var formatted = this.display(selection, $selection);\n\n      $selection.append(formatted);\n      $selection.prop('title', selection.title || selection.text);\n\n      $selection.data('data', selection);\n\n      $selections.push($selection);\n    }\n\n    var $rendered = this.$selection.find('.select2-selection__rendered');\n\n    Utils.appendMany($rendered, $selections);\n  };\n\n  return MultipleSelection;\n});\n\nS2.define('select2/selection/placeholder',[\n  '../utils'\n], function (Utils) {\n  function Placeholder (decorated, $element, options) {\n    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));\n\n    decorated.call(this, $element, options);\n  }\n\n  Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {\n    if (typeof placeholder === 'string') {\n      placeholder = {\n        id: '',\n        text: placeholder\n      };\n    }\n\n    return placeholder;\n  };\n\n  Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {\n    var $placeholder = this.selectionContainer();\n\n    $placeholder.html(this.display(placeholder));\n    $placeholder.addClass('select2-selection__placeholder')\n                .removeClass('select2-selection__choice');\n\n    return $placeholder;\n  };\n\n  Placeholder.prototype.update = function (decorated, data) {\n    var singlePlaceholder = (\n      data.length == 1 && data[0].id != this.placeholder.id\n    );\n    var multipleSelections = data.length > 1;\n\n    if (multipleSelections || singlePlaceholder) {\n      return decorated.call(this, data);\n    }\n\n    this.clear();\n\n    var $placeholder = this.createPlaceholder(this.placeholder);\n\n    this.$selection.find('.select2-selection__rendered').append($placeholder);\n  };\n\n  return Placeholder;\n});\n\nS2.define('select2/selection/allowClear',[\n  'jquery',\n  '../keys'\n], function ($, KEYS) {\n  function AllowClear () { }\n\n  AllowClear.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    decorated.call(this, container, $container);\n\n    if (this.placeholder == null) {\n      if (this.options.get('debug') && window.console && console.error) {\n        console.error(\n          'Select2: The `allowClear` option should be used in combination ' +\n          'with the `placeholder` option.'\n        );\n      }\n    }\n\n    this.$selection.on('mousedown', '.select2-selection__clear',\n      function (evt) {\n        self._handleClear(evt);\n    });\n\n    container.on('keypress', function (evt) {\n      self._handleKeyboardClear(evt, container);\n    });\n  };\n\n  AllowClear.prototype._handleClear = function (_, evt) {\n    // Ignore the event if it is disabled\n    if (this.options.get('disabled')) {\n      return;\n    }\n\n    var $clear = this.$selection.find('.select2-selection__clear');\n\n    // Ignore the event if nothing has been selected\n    if ($clear.length === 0) {\n      return;\n    }\n\n    evt.stopPropagation();\n\n    var data = $clear.data('data');\n\n    for (var d = 0; d < data.length; d++) {\n      var unselectData = {\n        data: data[d]\n      };\n\n      // Trigger the `unselect` event, so people can prevent it from being\n      // cleared.\n      this.trigger('unselect', unselectData);\n\n      // If the event was prevented, don't clear it out.\n      if (unselectData.prevented) {\n        return;\n      }\n    }\n\n    this.$element.val(this.placeholder.id).trigger('change');\n\n    this.trigger('toggle', {});\n  };\n\n  AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {\n    if (container.isOpen()) {\n      return;\n    }\n\n    if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {\n      this._handleClear(evt);\n    }\n  };\n\n  AllowClear.prototype.update = function (decorated, data) {\n    decorated.call(this, data);\n\n    if (this.$selection.find('.select2-selection__placeholder').length > 0 ||\n        data.length === 0) {\n      return;\n    }\n\n    var $remove = $(\n      '<span class=\"select2-selection__clear\">' +\n        '&times;' +\n      '</span>'\n    );\n    $remove.data('data', data);\n\n    this.$selection.find('.select2-selection__rendered').prepend($remove);\n  };\n\n  return AllowClear;\n});\n\nS2.define('select2/selection/search',[\n  'jquery',\n  '../utils',\n  '../keys'\n], function ($, Utils, KEYS) {\n  function Search (decorated, $element, options) {\n    decorated.call(this, $element, options);\n  }\n\n  Search.prototype.render = function (decorated) {\n    var $search = $(\n      '<li class=\"select2-search select2-search--inline\">' +\n        '<input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\"' +\n        ' autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\"' +\n        ' spellcheck=\"false\" role=\"textbox\" aria-autocomplete=\"list\" />' +\n      '</li>'\n    );\n\n    this.$searchContainer = $search;\n    this.$search = $search.find('input');\n\n    var $rendered = decorated.call(this);\n\n    this._transferTabIndex();\n\n    return $rendered;\n  };\n\n  Search.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    decorated.call(this, container, $container);\n\n    container.on('open', function () {\n      self.$search.trigger('focus');\n    });\n\n    container.on('close', function () {\n      self.$search.val('');\n      self.$search.removeAttr('aria-activedescendant');\n      self.$search.trigger('focus');\n    });\n\n    container.on('enable', function () {\n      self.$search.prop('disabled', false);\n\n      self._transferTabIndex();\n    });\n\n    container.on('disable', function () {\n      self.$search.prop('disabled', true);\n    });\n\n    container.on('focus', function (evt) {\n      self.$search.trigger('focus');\n    });\n\n    container.on('results:focus', function (params) {\n      self.$search.attr('aria-activedescendant', params.id);\n    });\n\n    this.$selection.on('focusin', '.select2-search--inline', function (evt) {\n      self.trigger('focus', evt);\n    });\n\n    this.$selection.on('focusout', '.select2-search--inline', function (evt) {\n      self._handleBlur(evt);\n    });\n\n    this.$selection.on('keydown', '.select2-search--inline', function (evt) {\n      evt.stopPropagation();\n\n      self.trigger('keypress', evt);\n\n      self._keyUpPrevented = evt.isDefaultPrevented();\n\n      var key = evt.which;\n\n      if (key === KEYS.BACKSPACE && self.$search.val() === '') {\n        var $previousChoice = self.$searchContainer\n          .prev('.select2-selection__choice');\n\n        if ($previousChoice.length > 0) {\n          var item = $previousChoice.data('data');\n\n          self.searchRemoveChoice(item);\n\n          evt.preventDefault();\n        }\n      }\n    });\n\n    // Try to detect the IE version should the `documentMode` property that\n    // is stored on the document. This is only implemented in IE and is\n    // slightly cleaner than doing a user agent check.\n    // This property is not available in Edge, but Edge also doesn't have\n    // this bug.\n    var msie = document.documentMode;\n    var disableInputEvents = msie && msie <= 11;\n\n    // Workaround for browsers which do not support the `input` event\n    // This will prevent double-triggering of events for browsers which support\n    // both the `keyup` and `input` events.\n    this.$selection.on(\n      'input.searchcheck',\n      '.select2-search--inline',\n      function (evt) {\n        // IE will trigger the `input` event when a placeholder is used on a\n        // search box. To get around this issue, we are forced to ignore all\n        // `input` events in IE and keep using `keyup`.\n        if (disableInputEvents) {\n          self.$selection.off('input.search input.searchcheck');\n          return;\n        }\n\n        // Unbind the duplicated `keyup` event\n        self.$selection.off('keyup.search');\n      }\n    );\n\n    this.$selection.on(\n      'keyup.search input.search',\n      '.select2-search--inline',\n      function (evt) {\n        // IE will trigger the `input` event when a placeholder is used on a\n        // search box. To get around this issue, we are forced to ignore all\n        // `input` events in IE and keep using `keyup`.\n        if (disableInputEvents && evt.type === 'input') {\n          self.$selection.off('input.search input.searchcheck');\n          return;\n        }\n\n        var key = evt.which;\n\n        // We can freely ignore events from modifier keys\n        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {\n          return;\n        }\n\n        // Tabbing will be handled during the `keydown` phase\n        if (key == KEYS.TAB) {\n          return;\n        }\n\n        self.handleSearch(evt);\n      }\n    );\n  };\n\n  /**\n   * This method will transfer the tabindex attribute from the rendered\n   * selection to the search box. This allows for the search box to be used as\n   * the primary focus instead of the selection container.\n   *\n   * @private\n   */\n  Search.prototype._transferTabIndex = function (decorated) {\n    this.$search.attr('tabindex', this.$selection.attr('tabindex'));\n    this.$selection.attr('tabindex', '-1');\n  };\n\n  Search.prototype.createPlaceholder = function (decorated, placeholder) {\n    this.$search.attr('placeholder', placeholder.text);\n  };\n\n  Search.prototype.update = function (decorated, data) {\n    var searchHadFocus = this.$search[0] == document.activeElement;\n\n    this.$search.attr('placeholder', '');\n\n    decorated.call(this, data);\n\n    this.$selection.find('.select2-selection__rendered')\n                   .append(this.$searchContainer);\n\n    this.resizeSearch();\n    if (searchHadFocus) {\n      this.$search.focus();\n    }\n  };\n\n  Search.prototype.handleSearch = function () {\n    this.resizeSearch();\n\n    if (!this._keyUpPrevented) {\n      var input = this.$search.val();\n\n      this.trigger('query', {\n        term: input\n      });\n    }\n\n    this._keyUpPrevented = false;\n  };\n\n  Search.prototype.searchRemoveChoice = function (decorated, item) {\n    this.trigger('unselect', {\n      data: item\n    });\n\n    this.$search.val(item.text);\n    this.handleSearch();\n  };\n\n  Search.prototype.resizeSearch = function () {\n    this.$search.css('width', '25px');\n\n    var width = '';\n\n    if (this.$search.attr('placeholder') !== '') {\n      width = this.$selection.find('.select2-selection__rendered').innerWidth();\n    } else {\n      var minimumWidth = this.$search.val().length + 1;\n\n      width = (minimumWidth * 0.75) + 'em';\n    }\n\n    this.$search.css('width', width);\n  };\n\n  return Search;\n});\n\nS2.define('select2/selection/eventRelay',[\n  'jquery'\n], function ($) {\n  function EventRelay () { }\n\n  EventRelay.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n    var relayEvents = [\n      'open', 'opening',\n      'close', 'closing',\n      'select', 'selecting',\n      'unselect', 'unselecting'\n    ];\n\n    var preventableEvents = ['opening', 'closing', 'selecting', 'unselecting'];\n\n    decorated.call(this, container, $container);\n\n    container.on('*', function (name, params) {\n      // Ignore events that should not be relayed\n      if ($.inArray(name, relayEvents) === -1) {\n        return;\n      }\n\n      // The parameters should always be an object\n      params = params || {};\n\n      // Generate the jQuery event for the Select2 event\n      var evt = $.Event('select2:' + name, {\n        params: params\n      });\n\n      self.$element.trigger(evt);\n\n      // Only handle preventable events if it was one\n      if ($.inArray(name, preventableEvents) === -1) {\n        return;\n      }\n\n      params.prevented = evt.isDefaultPrevented();\n    });\n  };\n\n  return EventRelay;\n});\n\nS2.define('select2/translation',[\n  'jquery',\n  'require'\n], function ($, require) {\n  function Translation (dict) {\n    this.dict = dict || {};\n  }\n\n  Translation.prototype.all = function () {\n    return this.dict;\n  };\n\n  Translation.prototype.get = function (key) {\n    return this.dict[key];\n  };\n\n  Translation.prototype.extend = function (translation) {\n    this.dict = $.extend({}, translation.all(), this.dict);\n  };\n\n  // Static functions\n\n  Translation._cache = {};\n\n  Translation.loadPath = function (path) {\n    if (!(path in Translation._cache)) {\n      var translations = require(path);\n\n      Translation._cache[path] = translations;\n    }\n\n    return new Translation(Translation._cache[path]);\n  };\n\n  return Translation;\n});\n\nS2.define('select2/diacritics',[\n\n], function () {\n  var diacritics = {\n    '\\u24B6': 'A',\n    '\\uFF21': 'A',\n    '\\u00C0': 'A',\n    '\\u00C1': 'A',\n    '\\u00C2': 'A',\n    '\\u1EA6': 'A',\n    '\\u1EA4': 'A',\n    '\\u1EAA': 'A',\n    '\\u1EA8': 'A',\n    '\\u00C3': 'A',\n    '\\u0100': 'A',\n    '\\u0102': 'A',\n    '\\u1EB0': 'A',\n    '\\u1EAE': 'A',\n    '\\u1EB4': 'A',\n    '\\u1EB2': 'A',\n    '\\u0226': 'A',\n    '\\u01E0': 'A',\n    '\\u00C4': 'A',\n    '\\u01DE': 'A',\n    '\\u1EA2': 'A',\n    '\\u00C5': 'A',\n    '\\u01FA': 'A',\n    '\\u01CD': 'A',\n    '\\u0200': 'A',\n    '\\u0202': 'A',\n    '\\u1EA0': 'A',\n    '\\u1EAC': 'A',\n    '\\u1EB6': 'A',\n    '\\u1E00': 'A',\n    '\\u0104': 'A',\n    '\\u023A': 'A',\n    '\\u2C6F': 'A',\n    '\\uA732': 'AA',\n    '\\u00C6': 'AE',\n    '\\u01FC': 'AE',\n    '\\u01E2': 'AE',\n    '\\uA734': 'AO',\n    '\\uA736': 'AU',\n    '\\uA738': 'AV',\n    '\\uA73A': 'AV',\n    '\\uA73C': 'AY',\n    '\\u24B7': 'B',\n    '\\uFF22': 'B',\n    '\\u1E02': 'B',\n    '\\u1E04': 'B',\n    '\\u1E06': 'B',\n    '\\u0243': 'B',\n    '\\u0182': 'B',\n    '\\u0181': 'B',\n    '\\u24B8': 'C',\n    '\\uFF23': 'C',\n    '\\u0106': 'C',\n    '\\u0108': 'C',\n    '\\u010A': 'C',\n    '\\u010C': 'C',\n    '\\u00C7': 'C',\n    '\\u1E08': 'C',\n    '\\u0187': 'C',\n    '\\u023B': 'C',\n    '\\uA73E': 'C',\n    '\\u24B9': 'D',\n    '\\uFF24': 'D',\n    '\\u1E0A': 'D',\n    '\\u010E': 'D',\n    '\\u1E0C': 'D',\n    '\\u1E10': 'D',\n    '\\u1E12': 'D',\n    '\\u1E0E': 'D',\n    '\\u0110': 'D',\n    '\\u018B': 'D',\n    '\\u018A': 'D',\n    '\\u0189': 'D',\n    '\\uA779': 'D',\n    '\\u01F1': 'DZ',\n    '\\u01C4': 'DZ',\n    '\\u01F2': 'Dz',\n    '\\u01C5': 'Dz',\n    '\\u24BA': 'E',\n    '\\uFF25': 'E',\n    '\\u00C8': 'E',\n    '\\u00C9': 'E',\n    '\\u00CA': 'E',\n    '\\u1EC0': 'E',\n    '\\u1EBE': 'E',\n    '\\u1EC4': 'E',\n    '\\u1EC2': 'E',\n    '\\u1EBC': 'E',\n    '\\u0112': 'E',\n    '\\u1E14': 'E',\n    '\\u1E16': 'E',\n    '\\u0114': 'E',\n    '\\u0116': 'E',\n    '\\u00CB': 'E',\n    '\\u1EBA': 'E',\n    '\\u011A': 'E',\n    '\\u0204': 'E',\n    '\\u0206': 'E',\n    '\\u1EB8': 'E',\n    '\\u1EC6': 'E',\n    '\\u0228': 'E',\n    '\\u1E1C': 'E',\n    '\\u0118': 'E',\n    '\\u1E18': 'E',\n    '\\u1E1A': 'E',\n    '\\u0190': 'E',\n    '\\u018E': 'E',\n    '\\u24BB': 'F',\n    '\\uFF26': 'F',\n    '\\u1E1E': 'F',\n    '\\u0191': 'F',\n    '\\uA77B': 'F',\n    '\\u24BC': 'G',\n    '\\uFF27': 'G',\n    '\\u01F4': 'G',\n    '\\u011C': 'G',\n    '\\u1E20': 'G',\n    '\\u011E': 'G',\n    '\\u0120': 'G',\n    '\\u01E6': 'G',\n    '\\u0122': 'G',\n    '\\u01E4': 'G',\n    '\\u0193': 'G',\n    '\\uA7A0': 'G',\n    '\\uA77D': 'G',\n    '\\uA77E': 'G',\n    '\\u24BD': 'H',\n    '\\uFF28': 'H',\n    '\\u0124': 'H',\n    '\\u1E22': 'H',\n    '\\u1E26': 'H',\n    '\\u021E': 'H',\n    '\\u1E24': 'H',\n    '\\u1E28': 'H',\n    '\\u1E2A': 'H',\n    '\\u0126': 'H',\n    '\\u2C67': 'H',\n    '\\u2C75': 'H',\n    '\\uA78D': 'H',\n    '\\u24BE': 'I',\n    '\\uFF29': 'I',\n    '\\u00CC': 'I',\n    '\\u00CD': 'I',\n    '\\u00CE': 'I',\n    '\\u0128': 'I',\n    '\\u012A': 'I',\n    '\\u012C': 'I',\n    '\\u0130': 'I',\n    '\\u00CF': 'I',\n    '\\u1E2E': 'I',\n    '\\u1EC8': 'I',\n    '\\u01CF': 'I',\n    '\\u0208': 'I',\n    '\\u020A': 'I',\n    '\\u1ECA': 'I',\n    '\\u012E': 'I',\n    '\\u1E2C': 'I',\n    '\\u0197': 'I',\n    '\\u24BF': 'J',\n    '\\uFF2A': 'J',\n    '\\u0134': 'J',\n    '\\u0248': 'J',\n    '\\u24C0': 'K',\n    '\\uFF2B': 'K',\n    '\\u1E30': 'K',\n    '\\u01E8': 'K',\n    '\\u1E32': 'K',\n    '\\u0136': 'K',\n    '\\u1E34': 'K',\n    '\\u0198': 'K',\n    '\\u2C69': 'K',\n    '\\uA740': 'K',\n    '\\uA742': 'K',\n    '\\uA744': 'K',\n    '\\uA7A2': 'K',\n    '\\u24C1': 'L',\n    '\\uFF2C': 'L',\n    '\\u013F': 'L',\n    '\\u0139': 'L',\n    '\\u013D': 'L',\n    '\\u1E36': 'L',\n    '\\u1E38': 'L',\n    '\\u013B': 'L',\n    '\\u1E3C': 'L',\n    '\\u1E3A': 'L',\n    '\\u0141': 'L',\n    '\\u023D': 'L',\n    '\\u2C62': 'L',\n    '\\u2C60': 'L',\n    '\\uA748': 'L',\n    '\\uA746': 'L',\n    '\\uA780': 'L',\n    '\\u01C7': 'LJ',\n    '\\u01C8': 'Lj',\n    '\\u24C2': 'M',\n    '\\uFF2D': 'M',\n    '\\u1E3E': 'M',\n    '\\u1E40': 'M',\n    '\\u1E42': 'M',\n    '\\u2C6E': 'M',\n    '\\u019C': 'M',\n    '\\u24C3': 'N',\n    '\\uFF2E': 'N',\n    '\\u01F8': 'N',\n    '\\u0143': 'N',\n    '\\u00D1': 'N',\n    '\\u1E44': 'N',\n    '\\u0147': 'N',\n    '\\u1E46': 'N',\n    '\\u0145': 'N',\n    '\\u1E4A': 'N',\n    '\\u1E48': 'N',\n    '\\u0220': 'N',\n    '\\u019D': 'N',\n    '\\uA790': 'N',\n    '\\uA7A4': 'N',\n    '\\u01CA': 'NJ',\n    '\\u01CB': 'Nj',\n    '\\u24C4': 'O',\n    '\\uFF2F': 'O',\n    '\\u00D2': 'O',\n    '\\u00D3': 'O',\n    '\\u00D4': 'O',\n    '\\u1ED2': 'O',\n    '\\u1ED0': 'O',\n    '\\u1ED6': 'O',\n    '\\u1ED4': 'O',\n    '\\u00D5': 'O',\n    '\\u1E4C': 'O',\n    '\\u022C': 'O',\n    '\\u1E4E': 'O',\n    '\\u014C': 'O',\n    '\\u1E50': 'O',\n    '\\u1E52': 'O',\n    '\\u014E': 'O',\n    '\\u022E': 'O',\n    '\\u0230': 'O',\n    '\\u00D6': 'O',\n    '\\u022A': 'O',\n    '\\u1ECE': 'O',\n    '\\u0150': 'O',\n    '\\u01D1': 'O',\n    '\\u020C': 'O',\n    '\\u020E': 'O',\n    '\\u01A0': 'O',\n    '\\u1EDC': 'O',\n    '\\u1EDA': 'O',\n    '\\u1EE0': 'O',\n    '\\u1EDE': 'O',\n    '\\u1EE2': 'O',\n    '\\u1ECC': 'O',\n    '\\u1ED8': 'O',\n    '\\u01EA': 'O',\n    '\\u01EC': 'O',\n    '\\u00D8': 'O',\n    '\\u01FE': 'O',\n    '\\u0186': 'O',\n    '\\u019F': 'O',\n    '\\uA74A': 'O',\n    '\\uA74C': 'O',\n    '\\u01A2': 'OI',\n    '\\uA74E': 'OO',\n    '\\u0222': 'OU',\n    '\\u24C5': 'P',\n    '\\uFF30': 'P',\n    '\\u1E54': 'P',\n    '\\u1E56': 'P',\n    '\\u01A4': 'P',\n    '\\u2C63': 'P',\n    '\\uA750': 'P',\n    '\\uA752': 'P',\n    '\\uA754': 'P',\n    '\\u24C6': 'Q',\n    '\\uFF31': 'Q',\n    '\\uA756': 'Q',\n    '\\uA758': 'Q',\n    '\\u024A': 'Q',\n    '\\u24C7': 'R',\n    '\\uFF32': 'R',\n    '\\u0154': 'R',\n    '\\u1E58': 'R',\n    '\\u0158': 'R',\n    '\\u0210': 'R',\n    '\\u0212': 'R',\n    '\\u1E5A': 'R',\n    '\\u1E5C': 'R',\n    '\\u0156': 'R',\n    '\\u1E5E': 'R',\n    '\\u024C': 'R',\n    '\\u2C64': 'R',\n    '\\uA75A': 'R',\n    '\\uA7A6': 'R',\n    '\\uA782': 'R',\n    '\\u24C8': 'S',\n    '\\uFF33': 'S',\n    '\\u1E9E': 'S',\n    '\\u015A': 'S',\n    '\\u1E64': 'S',\n    '\\u015C': 'S',\n    '\\u1E60': 'S',\n    '\\u0160': 'S',\n    '\\u1E66': 'S',\n    '\\u1E62': 'S',\n    '\\u1E68': 'S',\n    '\\u0218': 'S',\n    '\\u015E': 'S',\n    '\\u2C7E': 'S',\n    '\\uA7A8': 'S',\n    '\\uA784': 'S',\n    '\\u24C9': 'T',\n    '\\uFF34': 'T',\n    '\\u1E6A': 'T',\n    '\\u0164': 'T',\n    '\\u1E6C': 'T',\n    '\\u021A': 'T',\n    '\\u0162': 'T',\n    '\\u1E70': 'T',\n    '\\u1E6E': 'T',\n    '\\u0166': 'T',\n    '\\u01AC': 'T',\n    '\\u01AE': 'T',\n    '\\u023E': 'T',\n    '\\uA786': 'T',\n    '\\uA728': 'TZ',\n    '\\u24CA': 'U',\n    '\\uFF35': 'U',\n    '\\u00D9': 'U',\n    '\\u00DA': 'U',\n    '\\u00DB': 'U',\n    '\\u0168': 'U',\n    '\\u1E78': 'U',\n    '\\u016A': 'U',\n    '\\u1E7A': 'U',\n    '\\u016C': 'U',\n    '\\u00DC': 'U',\n    '\\u01DB': 'U',\n    '\\u01D7': 'U',\n    '\\u01D5': 'U',\n    '\\u01D9': 'U',\n    '\\u1EE6': 'U',\n    '\\u016E': 'U',\n    '\\u0170': 'U',\n    '\\u01D3': 'U',\n    '\\u0214': 'U',\n    '\\u0216': 'U',\n    '\\u01AF': 'U',\n    '\\u1EEA': 'U',\n    '\\u1EE8': 'U',\n    '\\u1EEE': 'U',\n    '\\u1EEC': 'U',\n    '\\u1EF0': 'U',\n    '\\u1EE4': 'U',\n    '\\u1E72': 'U',\n    '\\u0172': 'U',\n    '\\u1E76': 'U',\n    '\\u1E74': 'U',\n    '\\u0244': 'U',\n    '\\u24CB': 'V',\n    '\\uFF36': 'V',\n    '\\u1E7C': 'V',\n    '\\u1E7E': 'V',\n    '\\u01B2': 'V',\n    '\\uA75E': 'V',\n    '\\u0245': 'V',\n    '\\uA760': 'VY',\n    '\\u24CC': 'W',\n    '\\uFF37': 'W',\n    '\\u1E80': 'W',\n    '\\u1E82': 'W',\n    '\\u0174': 'W',\n    '\\u1E86': 'W',\n    '\\u1E84': 'W',\n    '\\u1E88': 'W',\n    '\\u2C72': 'W',\n    '\\u24CD': 'X',\n    '\\uFF38': 'X',\n    '\\u1E8A': 'X',\n    '\\u1E8C': 'X',\n    '\\u24CE': 'Y',\n    '\\uFF39': 'Y',\n    '\\u1EF2': 'Y',\n    '\\u00DD': 'Y',\n    '\\u0176': 'Y',\n    '\\u1EF8': 'Y',\n    '\\u0232': 'Y',\n    '\\u1E8E': 'Y',\n    '\\u0178': 'Y',\n    '\\u1EF6': 'Y',\n    '\\u1EF4': 'Y',\n    '\\u01B3': 'Y',\n    '\\u024E': 'Y',\n    '\\u1EFE': 'Y',\n    '\\u24CF': 'Z',\n    '\\uFF3A': 'Z',\n    '\\u0179': 'Z',\n    '\\u1E90': 'Z',\n    '\\u017B': 'Z',\n    '\\u017D': 'Z',\n    '\\u1E92': 'Z',\n    '\\u1E94': 'Z',\n    '\\u01B5': 'Z',\n    '\\u0224': 'Z',\n    '\\u2C7F': 'Z',\n    '\\u2C6B': 'Z',\n    '\\uA762': 'Z',\n    '\\u24D0': 'a',\n    '\\uFF41': 'a',\n    '\\u1E9A': 'a',\n    '\\u00E0': 'a',\n    '\\u00E1': 'a',\n    '\\u00E2': 'a',\n    '\\u1EA7': 'a',\n    '\\u1EA5': 'a',\n    '\\u1EAB': 'a',\n    '\\u1EA9': 'a',\n    '\\u00E3': 'a',\n    '\\u0101': 'a',\n    '\\u0103': 'a',\n    '\\u1EB1': 'a',\n    '\\u1EAF': 'a',\n    '\\u1EB5': 'a',\n    '\\u1EB3': 'a',\n    '\\u0227': 'a',\n    '\\u01E1': 'a',\n    '\\u00E4': 'a',\n    '\\u01DF': 'a',\n    '\\u1EA3': 'a',\n    '\\u00E5': 'a',\n    '\\u01FB': 'a',\n    '\\u01CE': 'a',\n    '\\u0201': 'a',\n    '\\u0203': 'a',\n    '\\u1EA1': 'a',\n    '\\u1EAD': 'a',\n    '\\u1EB7': 'a',\n    '\\u1E01': 'a',\n    '\\u0105': 'a',\n    '\\u2C65': 'a',\n    '\\u0250': 'a',\n    '\\uA733': 'aa',\n    '\\u00E6': 'ae',\n    '\\u01FD': 'ae',\n    '\\u01E3': 'ae',\n    '\\uA735': 'ao',\n    '\\uA737': 'au',\n    '\\uA739': 'av',\n    '\\uA73B': 'av',\n    '\\uA73D': 'ay',\n    '\\u24D1': 'b',\n    '\\uFF42': 'b',\n    '\\u1E03': 'b',\n    '\\u1E05': 'b',\n    '\\u1E07': 'b',\n    '\\u0180': 'b',\n    '\\u0183': 'b',\n    '\\u0253': 'b',\n    '\\u24D2': 'c',\n    '\\uFF43': 'c',\n    '\\u0107': 'c',\n    '\\u0109': 'c',\n    '\\u010B': 'c',\n    '\\u010D': 'c',\n    '\\u00E7': 'c',\n    '\\u1E09': 'c',\n    '\\u0188': 'c',\n    '\\u023C': 'c',\n    '\\uA73F': 'c',\n    '\\u2184': 'c',\n    '\\u24D3': 'd',\n    '\\uFF44': 'd',\n    '\\u1E0B': 'd',\n    '\\u010F': 'd',\n    '\\u1E0D': 'd',\n    '\\u1E11': 'd',\n    '\\u1E13': 'd',\n    '\\u1E0F': 'd',\n    '\\u0111': 'd',\n    '\\u018C': 'd',\n    '\\u0256': 'd',\n    '\\u0257': 'd',\n    '\\uA77A': 'd',\n    '\\u01F3': 'dz',\n    '\\u01C6': 'dz',\n    '\\u24D4': 'e',\n    '\\uFF45': 'e',\n    '\\u00E8': 'e',\n    '\\u00E9': 'e',\n    '\\u00EA': 'e',\n    '\\u1EC1': 'e',\n    '\\u1EBF': 'e',\n    '\\u1EC5': 'e',\n    '\\u1EC3': 'e',\n    '\\u1EBD': 'e',\n    '\\u0113': 'e',\n    '\\u1E15': 'e',\n    '\\u1E17': 'e',\n    '\\u0115': 'e',\n    '\\u0117': 'e',\n    '\\u00EB': 'e',\n    '\\u1EBB': 'e',\n    '\\u011B': 'e',\n    '\\u0205': 'e',\n    '\\u0207': 'e',\n    '\\u1EB9': 'e',\n    '\\u1EC7': 'e',\n    '\\u0229': 'e',\n    '\\u1E1D': 'e',\n    '\\u0119': 'e',\n    '\\u1E19': 'e',\n    '\\u1E1B': 'e',\n    '\\u0247': 'e',\n    '\\u025B': 'e',\n    '\\u01DD': 'e',\n    '\\u24D5': 'f',\n    '\\uFF46': 'f',\n    '\\u1E1F': 'f',\n    '\\u0192': 'f',\n    '\\uA77C': 'f',\n    '\\u24D6': 'g',\n    '\\uFF47': 'g',\n    '\\u01F5': 'g',\n    '\\u011D': 'g',\n    '\\u1E21': 'g',\n    '\\u011F': 'g',\n    '\\u0121': 'g',\n    '\\u01E7': 'g',\n    '\\u0123': 'g',\n    '\\u01E5': 'g',\n    '\\u0260': 'g',\n    '\\uA7A1': 'g',\n    '\\u1D79': 'g',\n    '\\uA77F': 'g',\n    '\\u24D7': 'h',\n    '\\uFF48': 'h',\n    '\\u0125': 'h',\n    '\\u1E23': 'h',\n    '\\u1E27': 'h',\n    '\\u021F': 'h',\n    '\\u1E25': 'h',\n    '\\u1E29': 'h',\n    '\\u1E2B': 'h',\n    '\\u1E96': 'h',\n    '\\u0127': 'h',\n    '\\u2C68': 'h',\n    '\\u2C76': 'h',\n    '\\u0265': 'h',\n    '\\u0195': 'hv',\n    '\\u24D8': 'i',\n    '\\uFF49': 'i',\n    '\\u00EC': 'i',\n    '\\u00ED': 'i',\n    '\\u00EE': 'i',\n    '\\u0129': 'i',\n    '\\u012B': 'i',\n    '\\u012D': 'i',\n    '\\u00EF': 'i',\n    '\\u1E2F': 'i',\n    '\\u1EC9': 'i',\n    '\\u01D0': 'i',\n    '\\u0209': 'i',\n    '\\u020B': 'i',\n    '\\u1ECB': 'i',\n    '\\u012F': 'i',\n    '\\u1E2D': 'i',\n    '\\u0268': 'i',\n    '\\u0131': 'i',\n    '\\u24D9': 'j',\n    '\\uFF4A': 'j',\n    '\\u0135': 'j',\n    '\\u01F0': 'j',\n    '\\u0249': 'j',\n    '\\u24DA': 'k',\n    '\\uFF4B': 'k',\n    '\\u1E31': 'k',\n    '\\u01E9': 'k',\n    '\\u1E33': 'k',\n    '\\u0137': 'k',\n    '\\u1E35': 'k',\n    '\\u0199': 'k',\n    '\\u2C6A': 'k',\n    '\\uA741': 'k',\n    '\\uA743': 'k',\n    '\\uA745': 'k',\n    '\\uA7A3': 'k',\n    '\\u24DB': 'l',\n    '\\uFF4C': 'l',\n    '\\u0140': 'l',\n    '\\u013A': 'l',\n    '\\u013E': 'l',\n    '\\u1E37': 'l',\n    '\\u1E39': 'l',\n    '\\u013C': 'l',\n    '\\u1E3D': 'l',\n    '\\u1E3B': 'l',\n    '\\u017F': 'l',\n    '\\u0142': 'l',\n    '\\u019A': 'l',\n    '\\u026B': 'l',\n    '\\u2C61': 'l',\n    '\\uA749': 'l',\n    '\\uA781': 'l',\n    '\\uA747': 'l',\n    '\\u01C9': 'lj',\n    '\\u24DC': 'm',\n    '\\uFF4D': 'm',\n    '\\u1E3F': 'm',\n    '\\u1E41': 'm',\n    '\\u1E43': 'm',\n    '\\u0271': 'm',\n    '\\u026F': 'm',\n    '\\u24DD': 'n',\n    '\\uFF4E': 'n',\n    '\\u01F9': 'n',\n    '\\u0144': 'n',\n    '\\u00F1': 'n',\n    '\\u1E45': 'n',\n    '\\u0148': 'n',\n    '\\u1E47': 'n',\n    '\\u0146': 'n',\n    '\\u1E4B': 'n',\n    '\\u1E49': 'n',\n    '\\u019E': 'n',\n    '\\u0272': 'n',\n    '\\u0149': 'n',\n    '\\uA791': 'n',\n    '\\uA7A5': 'n',\n    '\\u01CC': 'nj',\n    '\\u24DE': 'o',\n    '\\uFF4F': 'o',\n    '\\u00F2': 'o',\n    '\\u00F3': 'o',\n    '\\u00F4': 'o',\n    '\\u1ED3': 'o',\n    '\\u1ED1': 'o',\n    '\\u1ED7': 'o',\n    '\\u1ED5': 'o',\n    '\\u00F5': 'o',\n    '\\u1E4D': 'o',\n    '\\u022D': 'o',\n    '\\u1E4F': 'o',\n    '\\u014D': 'o',\n    '\\u1E51': 'o',\n    '\\u1E53': 'o',\n    '\\u014F': 'o',\n    '\\u022F': 'o',\n    '\\u0231': 'o',\n    '\\u00F6': 'o',\n    '\\u022B': 'o',\n    '\\u1ECF': 'o',\n    '\\u0151': 'o',\n    '\\u01D2': 'o',\n    '\\u020D': 'o',\n    '\\u020F': 'o',\n    '\\u01A1': 'o',\n    '\\u1EDD': 'o',\n    '\\u1EDB': 'o',\n    '\\u1EE1': 'o',\n    '\\u1EDF': 'o',\n    '\\u1EE3': 'o',\n    '\\u1ECD': 'o',\n    '\\u1ED9': 'o',\n    '\\u01EB': 'o',\n    '\\u01ED': 'o',\n    '\\u00F8': 'o',\n    '\\u01FF': 'o',\n    '\\u0254': 'o',\n    '\\uA74B': 'o',\n    '\\uA74D': 'o',\n    '\\u0275': 'o',\n    '\\u01A3': 'oi',\n    '\\u0223': 'ou',\n    '\\uA74F': 'oo',\n    '\\u24DF': 'p',\n    '\\uFF50': 'p',\n    '\\u1E55': 'p',\n    '\\u1E57': 'p',\n    '\\u01A5': 'p',\n    '\\u1D7D': 'p',\n    '\\uA751': 'p',\n    '\\uA753': 'p',\n    '\\uA755': 'p',\n    '\\u24E0': 'q',\n    '\\uFF51': 'q',\n    '\\u024B': 'q',\n    '\\uA757': 'q',\n    '\\uA759': 'q',\n    '\\u24E1': 'r',\n    '\\uFF52': 'r',\n    '\\u0155': 'r',\n    '\\u1E59': 'r',\n    '\\u0159': 'r',\n    '\\u0211': 'r',\n    '\\u0213': 'r',\n    '\\u1E5B': 'r',\n    '\\u1E5D': 'r',\n    '\\u0157': 'r',\n    '\\u1E5F': 'r',\n    '\\u024D': 'r',\n    '\\u027D': 'r',\n    '\\uA75B': 'r',\n    '\\uA7A7': 'r',\n    '\\uA783': 'r',\n    '\\u24E2': 's',\n    '\\uFF53': 's',\n    '\\u00DF': 's',\n    '\\u015B': 's',\n    '\\u1E65': 's',\n    '\\u015D': 's',\n    '\\u1E61': 's',\n    '\\u0161': 's',\n    '\\u1E67': 's',\n    '\\u1E63': 's',\n    '\\u1E69': 's',\n    '\\u0219': 's',\n    '\\u015F': 's',\n    '\\u023F': 's',\n    '\\uA7A9': 's',\n    '\\uA785': 's',\n    '\\u1E9B': 's',\n    '\\u24E3': 't',\n    '\\uFF54': 't',\n    '\\u1E6B': 't',\n    '\\u1E97': 't',\n    '\\u0165': 't',\n    '\\u1E6D': 't',\n    '\\u021B': 't',\n    '\\u0163': 't',\n    '\\u1E71': 't',\n    '\\u1E6F': 't',\n    '\\u0167': 't',\n    '\\u01AD': 't',\n    '\\u0288': 't',\n    '\\u2C66': 't',\n    '\\uA787': 't',\n    '\\uA729': 'tz',\n    '\\u24E4': 'u',\n    '\\uFF55': 'u',\n    '\\u00F9': 'u',\n    '\\u00FA': 'u',\n    '\\u00FB': 'u',\n    '\\u0169': 'u',\n    '\\u1E79': 'u',\n    '\\u016B': 'u',\n    '\\u1E7B': 'u',\n    '\\u016D': 'u',\n    '\\u00FC': 'u',\n    '\\u01DC': 'u',\n    '\\u01D8': 'u',\n    '\\u01D6': 'u',\n    '\\u01DA': 'u',\n    '\\u1EE7': 'u',\n    '\\u016F': 'u',\n    '\\u0171': 'u',\n    '\\u01D4': 'u',\n    '\\u0215': 'u',\n    '\\u0217': 'u',\n    '\\u01B0': 'u',\n    '\\u1EEB': 'u',\n    '\\u1EE9': 'u',\n    '\\u1EEF': 'u',\n    '\\u1EED': 'u',\n    '\\u1EF1': 'u',\n    '\\u1EE5': 'u',\n    '\\u1E73': 'u',\n    '\\u0173': 'u',\n    '\\u1E77': 'u',\n    '\\u1E75': 'u',\n    '\\u0289': 'u',\n    '\\u24E5': 'v',\n    '\\uFF56': 'v',\n    '\\u1E7D': 'v',\n    '\\u1E7F': 'v',\n    '\\u028B': 'v',\n    '\\uA75F': 'v',\n    '\\u028C': 'v',\n    '\\uA761': 'vy',\n    '\\u24E6': 'w',\n    '\\uFF57': 'w',\n    '\\u1E81': 'w',\n    '\\u1E83': 'w',\n    '\\u0175': 'w',\n    '\\u1E87': 'w',\n    '\\u1E85': 'w',\n    '\\u1E98': 'w',\n    '\\u1E89': 'w',\n    '\\u2C73': 'w',\n    '\\u24E7': 'x',\n    '\\uFF58': 'x',\n    '\\u1E8B': 'x',\n    '\\u1E8D': 'x',\n    '\\u24E8': 'y',\n    '\\uFF59': 'y',\n    '\\u1EF3': 'y',\n    '\\u00FD': 'y',\n    '\\u0177': 'y',\n    '\\u1EF9': 'y',\n    '\\u0233': 'y',\n    '\\u1E8F': 'y',\n    '\\u00FF': 'y',\n    '\\u1EF7': 'y',\n    '\\u1E99': 'y',\n    '\\u1EF5': 'y',\n    '\\u01B4': 'y',\n    '\\u024F': 'y',\n    '\\u1EFF': 'y',\n    '\\u24E9': 'z',\n    '\\uFF5A': 'z',\n    '\\u017A': 'z',\n    '\\u1E91': 'z',\n    '\\u017C': 'z',\n    '\\u017E': 'z',\n    '\\u1E93': 'z',\n    '\\u1E95': 'z',\n    '\\u01B6': 'z',\n    '\\u0225': 'z',\n    '\\u0240': 'z',\n    '\\u2C6C': 'z',\n    '\\uA763': 'z',\n    '\\u0386': '\\u0391',\n    '\\u0388': '\\u0395',\n    '\\u0389': '\\u0397',\n    '\\u038A': '\\u0399',\n    '\\u03AA': '\\u0399',\n    '\\u038C': '\\u039F',\n    '\\u038E': '\\u03A5',\n    '\\u03AB': '\\u03A5',\n    '\\u038F': '\\u03A9',\n    '\\u03AC': '\\u03B1',\n    '\\u03AD': '\\u03B5',\n    '\\u03AE': '\\u03B7',\n    '\\u03AF': '\\u03B9',\n    '\\u03CA': '\\u03B9',\n    '\\u0390': '\\u03B9',\n    '\\u03CC': '\\u03BF',\n    '\\u03CD': '\\u03C5',\n    '\\u03CB': '\\u03C5',\n    '\\u03B0': '\\u03C5',\n    '\\u03C9': '\\u03C9',\n    '\\u03C2': '\\u03C3'\n  };\n\n  return diacritics;\n});\n\nS2.define('select2/data/base',[\n  '../utils'\n], function (Utils) {\n  function BaseAdapter ($element, options) {\n    BaseAdapter.__super__.constructor.call(this);\n  }\n\n  Utils.Extend(BaseAdapter, Utils.Observable);\n\n  BaseAdapter.prototype.current = function (callback) {\n    throw new Error('The `current` method must be defined in child classes.');\n  };\n\n  BaseAdapter.prototype.query = function (params, callback) {\n    throw new Error('The `query` method must be defined in child classes.');\n  };\n\n  BaseAdapter.prototype.bind = function (container, $container) {\n    // Can be implemented in subclasses\n  };\n\n  BaseAdapter.prototype.destroy = function () {\n    // Can be implemented in subclasses\n  };\n\n  BaseAdapter.prototype.generateResultId = function (container, data) {\n    var id = container.id + '-result-';\n\n    id += Utils.generateChars(4);\n\n    if (data.id != null) {\n      id += '-' + data.id.toString();\n    } else {\n      id += '-' + Utils.generateChars(4);\n    }\n    return id;\n  };\n\n  return BaseAdapter;\n});\n\nS2.define('select2/data/select',[\n  './base',\n  '../utils',\n  'jquery'\n], function (BaseAdapter, Utils, $) {\n  function SelectAdapter ($element, options) {\n    this.$element = $element;\n    this.options = options;\n\n    SelectAdapter.__super__.constructor.call(this);\n  }\n\n  Utils.Extend(SelectAdapter, BaseAdapter);\n\n  SelectAdapter.prototype.current = function (callback) {\n    var data = [];\n    var self = this;\n\n    this.$element.find(':selected').each(function () {\n      var $option = $(this);\n\n      var option = self.item($option);\n\n      data.push(option);\n    });\n\n    callback(data);\n  };\n\n  SelectAdapter.prototype.select = function (data) {\n    var self = this;\n\n    data.selected = true;\n\n    // If data.element is a DOM node, use it instead\n    if ($(data.element).is('option')) {\n      data.element.selected = true;\n\n      this.$element.trigger('change');\n\n      return;\n    }\n\n    if (this.$element.prop('multiple')) {\n      this.current(function (currentData) {\n        var val = [];\n\n        data = [data];\n        data.push.apply(data, currentData);\n\n        for (var d = 0; d < data.length; d++) {\n          var id = data[d].id;\n\n          if ($.inArray(id, val) === -1) {\n            val.push(id);\n          }\n        }\n\n        self.$element.val(val);\n        self.$element.trigger('change');\n      });\n    } else {\n      var val = data.id;\n\n      this.$element.val(val);\n      this.$element.trigger('change');\n    }\n  };\n\n  SelectAdapter.prototype.unselect = function (data) {\n    var self = this;\n\n    if (!this.$element.prop('multiple')) {\n      return;\n    }\n\n    data.selected = false;\n\n    if ($(data.element).is('option')) {\n      data.element.selected = false;\n\n      this.$element.trigger('change');\n\n      return;\n    }\n\n    this.current(function (currentData) {\n      var val = [];\n\n      for (var d = 0; d < currentData.length; d++) {\n        var id = currentData[d].id;\n\n        if (id !== data.id && $.inArray(id, val) === -1) {\n          val.push(id);\n        }\n      }\n\n      self.$element.val(val);\n\n      self.$element.trigger('change');\n    });\n  };\n\n  SelectAdapter.prototype.bind = function (container, $container) {\n    var self = this;\n\n    this.container = container;\n\n    container.on('select', function (params) {\n      self.select(params.data);\n    });\n\n    container.on('unselect', function (params) {\n      self.unselect(params.data);\n    });\n  };\n\n  SelectAdapter.prototype.destroy = function () {\n    // Remove anything added to child elements\n    this.$element.find('*').each(function () {\n      // Remove any custom data set by Select2\n      $.removeData(this, 'data');\n    });\n  };\n\n  SelectAdapter.prototype.query = function (params, callback) {\n    var data = [];\n    var self = this;\n\n    var $options = this.$element.children();\n\n    $options.each(function () {\n      var $option = $(this);\n\n      if (!$option.is('option') && !$option.is('optgroup')) {\n        return;\n      }\n\n      var option = self.item($option);\n\n      var matches = self.matches(params, option);\n\n      if (matches !== null) {\n        data.push(matches);\n      }\n    });\n\n    callback({\n      results: data\n    });\n  };\n\n  SelectAdapter.prototype.addOptions = function ($options) {\n    Utils.appendMany(this.$element, $options);\n  };\n\n  SelectAdapter.prototype.option = function (data) {\n    var option;\n\n    if (data.children) {\n      option = document.createElement('optgroup');\n      option.label = data.text;\n    } else {\n      option = document.createElement('option');\n\n      if (option.textContent !== undefined) {\n        option.textContent = data.text;\n      } else {\n        option.innerText = data.text;\n      }\n    }\n\n    if (data.id !== undefined) {\n      option.value = data.id;\n    }\n\n    if (data.disabled) {\n      option.disabled = true;\n    }\n\n    if (data.selected) {\n      option.selected = true;\n    }\n\n    if (data.title) {\n      option.title = data.title;\n    }\n\n    var $option = $(option);\n\n    var normalizedData = this._normalizeItem(data);\n    normalizedData.element = option;\n\n    // Override the option's data with the combined data\n    $.data(option, 'data', normalizedData);\n\n    return $option;\n  };\n\n  SelectAdapter.prototype.item = function ($option) {\n    var data = {};\n\n    data = $.data($option[0], 'data');\n\n    if (data != null) {\n      return data;\n    }\n\n    if ($option.is('option')) {\n      data = {\n        id: $option.val(),\n        text: $option.text(),\n        disabled: $option.prop('disabled'),\n        selected: $option.prop('selected'),\n        title: $option.prop('title')\n      };\n    } else if ($option.is('optgroup')) {\n      data = {\n        text: $option.prop('label'),\n        children: [],\n        title: $option.prop('title')\n      };\n\n      var $children = $option.children('option');\n      var children = [];\n\n      for (var c = 0; c < $children.length; c++) {\n        var $child = $($children[c]);\n\n        var child = this.item($child);\n\n        children.push(child);\n      }\n\n      data.children = children;\n    }\n\n    data = this._normalizeItem(data);\n    data.element = $option[0];\n\n    $.data($option[0], 'data', data);\n\n    return data;\n  };\n\n  SelectAdapter.prototype._normalizeItem = function (item) {\n    if (!$.isPlainObject(item)) {\n      item = {\n        id: item,\n        text: item\n      };\n    }\n\n    item = $.extend({}, {\n      text: ''\n    }, item);\n\n    var defaults = {\n      selected: false,\n      disabled: false\n    };\n\n    if (item.id != null) {\n      item.id = item.id.toString();\n    }\n\n    if (item.text != null) {\n      item.text = item.text.toString();\n    }\n\n    if (item._resultId == null && item.id && this.container != null) {\n      item._resultId = this.generateResultId(this.container, item);\n    }\n\n    return $.extend({}, defaults, item);\n  };\n\n  SelectAdapter.prototype.matches = function (params, data) {\n    var matcher = this.options.get('matcher');\n\n    return matcher(params, data);\n  };\n\n  return SelectAdapter;\n});\n\nS2.define('select2/data/array',[\n  './select',\n  '../utils',\n  'jquery'\n], function (SelectAdapter, Utils, $) {\n  function ArrayAdapter ($element, options) {\n    var data = options.get('data') || [];\n\n    ArrayAdapter.__super__.constructor.call(this, $element, options);\n\n    this.addOptions(this.convertToOptions(data));\n  }\n\n  Utils.Extend(ArrayAdapter, SelectAdapter);\n\n  ArrayAdapter.prototype.select = function (data) {\n    var $option = this.$element.find('option').filter(function (i, elm) {\n      return elm.value == data.id.toString();\n    });\n\n    if ($option.length === 0) {\n      $option = this.option(data);\n\n      this.addOptions($option);\n    }\n\n    ArrayAdapter.__super__.select.call(this, data);\n  };\n\n  ArrayAdapter.prototype.convertToOptions = function (data) {\n    var self = this;\n\n    var $existing = this.$element.find('option');\n    var existingIds = $existing.map(function () {\n      return self.item($(this)).id;\n    }).get();\n\n    var $options = [];\n\n    // Filter out all items except for the one passed in the argument\n    function onlyItem (item) {\n      return function () {\n        return $(this).val() == item.id;\n      };\n    }\n\n    for (var d = 0; d < data.length; d++) {\n      var item = this._normalizeItem(data[d]);\n\n      // Skip items which were pre-loaded, only merge the data\n      if ($.inArray(item.id, existingIds) >= 0) {\n        var $existingOption = $existing.filter(onlyItem(item));\n\n        var existingData = this.item($existingOption);\n        var newData = $.extend(true, {}, item, existingData);\n\n        var $newOption = this.option(newData);\n\n        $existingOption.replaceWith($newOption);\n\n        continue;\n      }\n\n      var $option = this.option(item);\n\n      if (item.children) {\n        var $children = this.convertToOptions(item.children);\n\n        Utils.appendMany($option, $children);\n      }\n\n      $options.push($option);\n    }\n\n    return $options;\n  };\n\n  return ArrayAdapter;\n});\n\nS2.define('select2/data/ajax',[\n  './array',\n  '../utils',\n  'jquery'\n], function (ArrayAdapter, Utils, $) {\n  function AjaxAdapter ($element, options) {\n    this.ajaxOptions = this._applyDefaults(options.get('ajax'));\n\n    if (this.ajaxOptions.processResults != null) {\n      this.processResults = this.ajaxOptions.processResults;\n    }\n\n    AjaxAdapter.__super__.constructor.call(this, $element, options);\n  }\n\n  Utils.Extend(AjaxAdapter, ArrayAdapter);\n\n  AjaxAdapter.prototype._applyDefaults = function (options) {\n    var defaults = {\n      data: function (params) {\n        return $.extend({}, params, {\n          q: params.term\n        });\n      },\n      transport: function (params, success, failure) {\n        var $request = $.ajax(params);\n\n        $request.then(success);\n        $request.fail(failure);\n\n        return $request;\n      }\n    };\n\n    return $.extend({}, defaults, options, true);\n  };\n\n  AjaxAdapter.prototype.processResults = function (results) {\n    return results;\n  };\n\n  AjaxAdapter.prototype.query = function (params, callback) {\n    var matches = [];\n    var self = this;\n\n    if (this._request != null) {\n      // JSONP requests cannot always be aborted\n      if ($.isFunction(this._request.abort)) {\n        this._request.abort();\n      }\n\n      this._request = null;\n    }\n\n    var options = $.extend({\n      type: 'GET'\n    }, this.ajaxOptions);\n\n    if (typeof options.url === 'function') {\n      options.url = options.url.call(this.$element, params);\n    }\n\n    if (typeof options.data === 'function') {\n      options.data = options.data.call(this.$element, params);\n    }\n\n    function request () {\n      var $request = options.transport(options, function (data) {\n        var results = self.processResults(data, params);\n\n        if (self.options.get('debug') && window.console && console.error) {\n          // Check to make sure that the response included a `results` key.\n          if (!results || !results.results || !$.isArray(results.results)) {\n            console.error(\n              'Select2: The AJAX results did not return an array in the ' +\n              '`results` key of the response.'\n            );\n          }\n        }\n\n        callback(results);\n      }, function () {\n        // Attempt to detect if a request was aborted\n        // Only works if the transport exposes a status property\n        if ($request.status && $request.status === '0') {\n          return;\n        }\n\n        self.trigger('results:message', {\n          message: 'errorLoading'\n        });\n      });\n\n      self._request = $request;\n    }\n\n    if (this.ajaxOptions.delay && params.term != null) {\n      if (this._queryTimeout) {\n        window.clearTimeout(this._queryTimeout);\n      }\n\n      this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);\n    } else {\n      request();\n    }\n  };\n\n  return AjaxAdapter;\n});\n\nS2.define('select2/data/tags',[\n  'jquery'\n], function ($) {\n  function Tags (decorated, $element, options) {\n    var tags = options.get('tags');\n\n    var createTag = options.get('createTag');\n\n    if (createTag !== undefined) {\n      this.createTag = createTag;\n    }\n\n    var insertTag = options.get('insertTag');\n\n    if (insertTag !== undefined) {\n        this.insertTag = insertTag;\n    }\n\n    decorated.call(this, $element, options);\n\n    if ($.isArray(tags)) {\n      for (var t = 0; t < tags.length; t++) {\n        var tag = tags[t];\n        var item = this._normalizeItem(tag);\n\n        var $option = this.option(item);\n\n        this.$element.append($option);\n      }\n    }\n  }\n\n  Tags.prototype.query = function (decorated, params, callback) {\n    var self = this;\n\n    this._removeOldTags();\n\n    if (params.term == null || params.page != null) {\n      decorated.call(this, params, callback);\n      return;\n    }\n\n    function wrapper (obj, child) {\n      var data = obj.results;\n\n      for (var i = 0; i < data.length; i++) {\n        var option = data[i];\n\n        var checkChildren = (\n          option.children != null &&\n          !wrapper({\n            results: option.children\n          }, true)\n        );\n\n        var optionText = (option.text || '').toUpperCase();\n        var paramsTerm = (params.term || '').toUpperCase();\n\n        var checkText = optionText === paramsTerm;\n\n        if (checkText || checkChildren) {\n          if (child) {\n            return false;\n          }\n\n          obj.data = data;\n          callback(obj);\n\n          return;\n        }\n      }\n\n      if (child) {\n        return true;\n      }\n\n      var tag = self.createTag(params);\n\n      if (tag != null) {\n        var $option = self.option(tag);\n        $option.attr('data-select2-tag', true);\n\n        self.addOptions([$option]);\n\n        self.insertTag(data, tag);\n      }\n\n      obj.results = data;\n\n      callback(obj);\n    }\n\n    decorated.call(this, params, wrapper);\n  };\n\n  Tags.prototype.createTag = function (decorated, params) {\n    var term = $.trim(params.term);\n\n    if (term === '') {\n      return null;\n    }\n\n    return {\n      id: term,\n      text: term\n    };\n  };\n\n  Tags.prototype.insertTag = function (_, data, tag) {\n    data.unshift(tag);\n  };\n\n  Tags.prototype._removeOldTags = function (_) {\n    var tag = this._lastTag;\n\n    var $options = this.$element.find('option[data-select2-tag]');\n\n    $options.each(function () {\n      if (this.selected) {\n        return;\n      }\n\n      $(this).remove();\n    });\n  };\n\n  return Tags;\n});\n\nS2.define('select2/data/tokenizer',[\n  'jquery'\n], function ($) {\n  function Tokenizer (decorated, $element, options) {\n    var tokenizer = options.get('tokenizer');\n\n    if (tokenizer !== undefined) {\n      this.tokenizer = tokenizer;\n    }\n\n    decorated.call(this, $element, options);\n  }\n\n  Tokenizer.prototype.bind = function (decorated, container, $container) {\n    decorated.call(this, container, $container);\n\n    this.$search =  container.dropdown.$search || container.selection.$search ||\n      $container.find('.select2-search__field');\n  };\n\n  Tokenizer.prototype.query = function (decorated, params, callback) {\n    var self = this;\n\n    function createAndSelect (data) {\n      // Normalize the data object so we can use it for checks\n      var item = self._normalizeItem(data);\n\n      // Check if the data object already exists as a tag\n      // Select it if it doesn't\n      var $existingOptions = self.$element.find('option').filter(function () {\n        return $(this).val() === item.id;\n      });\n\n      // If an existing option wasn't found for it, create the option\n      if (!$existingOptions.length) {\n        var $option = self.option(item);\n        $option.attr('data-select2-tag', true);\n\n        self._removeOldTags();\n        self.addOptions([$option]);\n      }\n\n      // Select the item, now that we know there is an option for it\n      select(item);\n    }\n\n    function select (data) {\n      self.trigger('select', {\n        data: data\n      });\n    }\n\n    params.term = params.term || '';\n\n    var tokenData = this.tokenizer(params, this.options, createAndSelect);\n\n    if (tokenData.term !== params.term) {\n      // Replace the search term if we have the search box\n      if (this.$search.length) {\n        this.$search.val(tokenData.term);\n        this.$search.focus();\n      }\n\n      params.term = tokenData.term;\n    }\n\n    decorated.call(this, params, callback);\n  };\n\n  Tokenizer.prototype.tokenizer = function (_, params, options, callback) {\n    var separators = options.get('tokenSeparators') || [];\n    var term = params.term;\n    var i = 0;\n\n    var createTag = this.createTag || function (params) {\n      return {\n        id: params.term,\n        text: params.term\n      };\n    };\n\n    while (i < term.length) {\n      var termChar = term[i];\n\n      if ($.inArray(termChar, separators) === -1) {\n        i++;\n\n        continue;\n      }\n\n      var part = term.substr(0, i);\n      var partParams = $.extend({}, params, {\n        term: part\n      });\n\n      var data = createTag(partParams);\n\n      if (data == null) {\n        i++;\n        continue;\n      }\n\n      callback(data);\n\n      // Reset the term to not include the tokenized portion\n      term = term.substr(i + 1) || '';\n      i = 0;\n    }\n\n    return {\n      term: term\n    };\n  };\n\n  return Tokenizer;\n});\n\nS2.define('select2/data/minimumInputLength',[\n\n], function () {\n  function MinimumInputLength (decorated, $e, options) {\n    this.minimumInputLength = options.get('minimumInputLength');\n\n    decorated.call(this, $e, options);\n  }\n\n  MinimumInputLength.prototype.query = function (decorated, params, callback) {\n    params.term = params.term || '';\n\n    if (params.term.length < this.minimumInputLength) {\n      this.trigger('results:message', {\n        message: 'inputTooShort',\n        args: {\n          minimum: this.minimumInputLength,\n          input: params.term,\n          params: params\n        }\n      });\n\n      return;\n    }\n\n    decorated.call(this, params, callback);\n  };\n\n  return MinimumInputLength;\n});\n\nS2.define('select2/data/maximumInputLength',[\n\n], function () {\n  function MaximumInputLength (decorated, $e, options) {\n    this.maximumInputLength = options.get('maximumInputLength');\n\n    decorated.call(this, $e, options);\n  }\n\n  MaximumInputLength.prototype.query = function (decorated, params, callback) {\n    params.term = params.term || '';\n\n    if (this.maximumInputLength > 0 &&\n        params.term.length > this.maximumInputLength) {\n      this.trigger('results:message', {\n        message: 'inputTooLong',\n        args: {\n          maximum: this.maximumInputLength,\n          input: params.term,\n          params: params\n        }\n      });\n\n      return;\n    }\n\n    decorated.call(this, params, callback);\n  };\n\n  return MaximumInputLength;\n});\n\nS2.define('select2/data/maximumSelectionLength',[\n\n], function (){\n  function MaximumSelectionLength (decorated, $e, options) {\n    this.maximumSelectionLength = options.get('maximumSelectionLength');\n\n    decorated.call(this, $e, options);\n  }\n\n  MaximumSelectionLength.prototype.query =\n    function (decorated, params, callback) {\n      var self = this;\n\n      this.current(function (currentData) {\n        var count = currentData != null ? currentData.length : 0;\n        if (self.maximumSelectionLength > 0 &&\n          count >= self.maximumSelectionLength) {\n          self.trigger('results:message', {\n            message: 'maximumSelected',\n            args: {\n              maximum: self.maximumSelectionLength\n            }\n          });\n          return;\n        }\n        decorated.call(self, params, callback);\n      });\n  };\n\n  return MaximumSelectionLength;\n});\n\nS2.define('select2/dropdown',[\n  'jquery',\n  './utils'\n], function ($, Utils) {\n  function Dropdown ($element, options) {\n    this.$element = $element;\n    this.options = options;\n\n    Dropdown.__super__.constructor.call(this);\n  }\n\n  Utils.Extend(Dropdown, Utils.Observable);\n\n  Dropdown.prototype.render = function () {\n    var $dropdown = $(\n      '<span class=\"select2-dropdown\">' +\n        '<span class=\"select2-results\"></span>' +\n      '</span>'\n    );\n\n    $dropdown.attr('dir', this.options.get('dir'));\n\n    this.$dropdown = $dropdown;\n\n    return $dropdown;\n  };\n\n  Dropdown.prototype.bind = function () {\n    // Should be implemented in subclasses\n  };\n\n  Dropdown.prototype.position = function ($dropdown, $container) {\n    // Should be implmented in subclasses\n  };\n\n  Dropdown.prototype.destroy = function () {\n    // Remove the dropdown from the DOM\n    this.$dropdown.remove();\n  };\n\n  return Dropdown;\n});\n\nS2.define('select2/dropdown/search',[\n  'jquery',\n  '../utils'\n], function ($, Utils) {\n  function Search () { }\n\n  Search.prototype.render = function (decorated) {\n    var $rendered = decorated.call(this);\n\n    var $search = $(\n      '<span class=\"select2-search select2-search--dropdown\">' +\n        '<input class=\"select2-search__field\" type=\"search\" tabindex=\"-1\"' +\n        ' autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\"' +\n        ' spellcheck=\"false\" role=\"textbox\" />' +\n      '</span>'\n    );\n\n    this.$searchContainer = $search;\n    this.$search = $search.find('input');\n\n    $rendered.prepend($search);\n\n    return $rendered;\n  };\n\n  Search.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    decorated.call(this, container, $container);\n\n    this.$search.on('keydown', function (evt) {\n      self.trigger('keypress', evt);\n\n      self._keyUpPrevented = evt.isDefaultPrevented();\n    });\n\n    // Workaround for browsers which do not support the `input` event\n    // This will prevent double-triggering of events for browsers which support\n    // both the `keyup` and `input` events.\n    this.$search.on('input', function (evt) {\n      // Unbind the duplicated `keyup` event\n      $(this).off('keyup');\n    });\n\n    this.$search.on('keyup input', function (evt) {\n      self.handleSearch(evt);\n    });\n\n    container.on('open', function () {\n      self.$search.attr('tabindex', 0);\n\n      self.$search.focus();\n\n      window.setTimeout(function () {\n        self.$search.focus();\n      }, 0);\n    });\n\n    container.on('close', function () {\n      self.$search.attr('tabindex', -1);\n\n      self.$search.val('');\n    });\n\n    container.on('focus', function () {\n      if (!container.isOpen()) {\n        self.$search.focus();\n      }\n    });\n\n    container.on('results:all', function (params) {\n      if (params.query.term == null || params.query.term === '') {\n        var showSearch = self.showSearch(params);\n\n        if (showSearch) {\n          self.$searchContainer.removeClass('select2-search--hide');\n        } else {\n          self.$searchContainer.addClass('select2-search--hide');\n        }\n      }\n    });\n  };\n\n  Search.prototype.handleSearch = function (evt) {\n    if (!this._keyUpPrevented) {\n      var input = this.$search.val();\n\n      this.trigger('query', {\n        term: input\n      });\n    }\n\n    this._keyUpPrevented = false;\n  };\n\n  Search.prototype.showSearch = function (_, params) {\n    return true;\n  };\n\n  return Search;\n});\n\nS2.define('select2/dropdown/hidePlaceholder',[\n\n], function () {\n  function HidePlaceholder (decorated, $element, options, dataAdapter) {\n    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));\n\n    decorated.call(this, $element, options, dataAdapter);\n  }\n\n  HidePlaceholder.prototype.append = function (decorated, data) {\n    data.results = this.removePlaceholder(data.results);\n\n    decorated.call(this, data);\n  };\n\n  HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {\n    if (typeof placeholder === 'string') {\n      placeholder = {\n        id: '',\n        text: placeholder\n      };\n    }\n\n    return placeholder;\n  };\n\n  HidePlaceholder.prototype.removePlaceholder = function (_, data) {\n    var modifiedData = data.slice(0);\n\n    for (var d = data.length - 1; d >= 0; d--) {\n      var item = data[d];\n\n      if (this.placeholder.id === item.id) {\n        modifiedData.splice(d, 1);\n      }\n    }\n\n    return modifiedData;\n  };\n\n  return HidePlaceholder;\n});\n\nS2.define('select2/dropdown/infiniteScroll',[\n  'jquery'\n], function ($) {\n  function InfiniteScroll (decorated, $element, options, dataAdapter) {\n    this.lastParams = {};\n\n    decorated.call(this, $element, options, dataAdapter);\n\n    this.$loadingMore = this.createLoadingMore();\n    this.loading = false;\n  }\n\n  InfiniteScroll.prototype.append = function (decorated, data) {\n    this.$loadingMore.remove();\n    this.loading = false;\n\n    decorated.call(this, data);\n\n    if (this.showLoadingMore(data)) {\n      this.$results.append(this.$loadingMore);\n    }\n  };\n\n  InfiniteScroll.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    decorated.call(this, container, $container);\n\n    container.on('query', function (params) {\n      self.lastParams = params;\n      self.loading = true;\n    });\n\n    container.on('query:append', function (params) {\n      self.lastParams = params;\n      self.loading = true;\n    });\n\n    this.$results.on('scroll', function () {\n      var isLoadMoreVisible = $.contains(\n        document.documentElement,\n        self.$loadingMore[0]\n      );\n\n      if (self.loading || !isLoadMoreVisible) {\n        return;\n      }\n\n      var currentOffset = self.$results.offset().top +\n        self.$results.outerHeight(false);\n      var loadingMoreOffset = self.$loadingMore.offset().top +\n        self.$loadingMore.outerHeight(false);\n\n      if (currentOffset + 50 >= loadingMoreOffset) {\n        self.loadMore();\n      }\n    });\n  };\n\n  InfiniteScroll.prototype.loadMore = function () {\n    this.loading = true;\n\n    var params = $.extend({}, {page: 1}, this.lastParams);\n\n    params.page++;\n\n    this.trigger('query:append', params);\n  };\n\n  InfiniteScroll.prototype.showLoadingMore = function (_, data) {\n    return data.pagination && data.pagination.more;\n  };\n\n  InfiniteScroll.prototype.createLoadingMore = function () {\n    var $option = $(\n      '<li ' +\n      'class=\"select2-results__option select2-results__option--load-more\"' +\n      'role=\"treeitem\" aria-disabled=\"true\"></li>'\n    );\n\n    var message = this.options.get('translations').get('loadingMore');\n\n    $option.html(message(this.lastParams));\n\n    return $option;\n  };\n\n  return InfiniteScroll;\n});\n\nS2.define('select2/dropdown/attachBody',[\n  'jquery',\n  '../utils'\n], function ($, Utils) {\n  function AttachBody (decorated, $element, options) {\n    this.$dropdownParent = options.get('dropdownParent') || $(document.body);\n\n    decorated.call(this, $element, options);\n  }\n\n  AttachBody.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    var setupResultsEvents = false;\n\n    decorated.call(this, container, $container);\n\n    container.on('open', function () {\n      self._showDropdown();\n      self._attachPositioningHandler(container);\n\n      if (!setupResultsEvents) {\n        setupResultsEvents = true;\n\n        container.on('results:all', function () {\n          self._positionDropdown();\n          self._resizeDropdown();\n        });\n\n        container.on('results:append', function () {\n          self._positionDropdown();\n          self._resizeDropdown();\n        });\n      }\n    });\n\n    container.on('close', function () {\n      self._hideDropdown();\n      self._detachPositioningHandler(container);\n    });\n\n    this.$dropdownContainer.on('mousedown', function (evt) {\n      evt.stopPropagation();\n    });\n  };\n\n  AttachBody.prototype.destroy = function (decorated) {\n    decorated.call(this);\n\n    this.$dropdownContainer.remove();\n  };\n\n  AttachBody.prototype.position = function (decorated, $dropdown, $container) {\n    // Clone all of the container classes\n    $dropdown.attr('class', $container.attr('class'));\n\n    $dropdown.removeClass('select2');\n    $dropdown.addClass('select2-container--open');\n\n    $dropdown.css({\n      position: 'absolute',\n      top: -999999\n    });\n\n    this.$container = $container;\n  };\n\n  AttachBody.prototype.render = function (decorated) {\n    var $container = $('<span></span>');\n\n    var $dropdown = decorated.call(this);\n    $container.append($dropdown);\n\n    this.$dropdownContainer = $container;\n\n    return $container;\n  };\n\n  AttachBody.prototype._hideDropdown = function (decorated) {\n    this.$dropdownContainer.detach();\n  };\n\n  AttachBody.prototype._attachPositioningHandler =\n      function (decorated, container) {\n    var self = this;\n\n    var scrollEvent = 'scroll.select2.' + container.id;\n    var resizeEvent = 'resize.select2.' + container.id;\n    var orientationEvent = 'orientationchange.select2.' + container.id;\n\n    var $watchers = this.$container.parents().filter(Utils.hasScroll);\n    $watchers.each(function () {\n      $(this).data('select2-scroll-position', {\n        x: $(this).scrollLeft(),\n        y: $(this).scrollTop()\n      });\n    });\n\n    $watchers.on(scrollEvent, function (ev) {\n      var position = $(this).data('select2-scroll-position');\n      $(this).scrollTop(position.y);\n    });\n\n    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,\n      function (e) {\n      self._positionDropdown();\n      self._resizeDropdown();\n    });\n  };\n\n  AttachBody.prototype._detachPositioningHandler =\n      function (decorated, container) {\n    var scrollEvent = 'scroll.select2.' + container.id;\n    var resizeEvent = 'resize.select2.' + container.id;\n    var orientationEvent = 'orientationchange.select2.' + container.id;\n\n    var $watchers = this.$container.parents().filter(Utils.hasScroll);\n    $watchers.off(scrollEvent);\n\n    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);\n  };\n\n  AttachBody.prototype._positionDropdown = function () {\n    var $window = $(window);\n\n    var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');\n    var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');\n\n    var newDirection = null;\n\n    var offset = this.$container.offset();\n\n    offset.bottom = offset.top + this.$container.outerHeight(false);\n\n    var container = {\n      height: this.$container.outerHeight(false)\n    };\n\n    container.top = offset.top;\n    container.bottom = offset.top + container.height;\n\n    var dropdown = {\n      height: this.$dropdown.outerHeight(false)\n    };\n\n    var viewport = {\n      top: $window.scrollTop(),\n      bottom: $window.scrollTop() + $window.height()\n    };\n\n    var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);\n    var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);\n\n    var css = {\n      left: offset.left,\n      top: container.bottom\n    };\n\n    // Determine what the parent element is to use for calciulating the offset\n    var $offsetParent = this.$dropdownParent;\n\n    // For statically positoned elements, we need to get the element\n    // that is determining the offset\n    if ($offsetParent.css('position') === 'static') {\n      $offsetParent = $offsetParent.offsetParent();\n    }\n\n    var parentOffset = $offsetParent.offset();\n\n    css.top -= parentOffset.top;\n    css.left -= parentOffset.left;\n\n    if (!isCurrentlyAbove && !isCurrentlyBelow) {\n      newDirection = 'below';\n    }\n\n    if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {\n      newDirection = 'above';\n    } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {\n      newDirection = 'below';\n    }\n\n    if (newDirection == 'above' ||\n      (isCurrentlyAbove && newDirection !== 'below')) {\n      css.top = container.top - parentOffset.top - dropdown.height;\n    }\n\n    if (newDirection != null) {\n      this.$dropdown\n        .removeClass('select2-dropdown--below select2-dropdown--above')\n        .addClass('select2-dropdown--' + newDirection);\n      this.$container\n        .removeClass('select2-container--below select2-container--above')\n        .addClass('select2-container--' + newDirection);\n    }\n\n    this.$dropdownContainer.css(css);\n  };\n\n  AttachBody.prototype._resizeDropdown = function () {\n    var css = {\n      width: this.$container.outerWidth(false) + 'px'\n    };\n\n    if (this.options.get('dropdownAutoWidth')) {\n      css.minWidth = css.width;\n      css.position = 'relative';\n      css.width = 'auto';\n    }\n\n    this.$dropdown.css(css);\n  };\n\n  AttachBody.prototype._showDropdown = function (decorated) {\n    this.$dropdownContainer.appendTo(this.$dropdownParent);\n\n    this._positionDropdown();\n    this._resizeDropdown();\n  };\n\n  return AttachBody;\n});\n\nS2.define('select2/dropdown/minimumResultsForSearch',[\n\n], function () {\n  function countResults (data) {\n    var count = 0;\n\n    for (var d = 0; d < data.length; d++) {\n      var item = data[d];\n\n      if (item.children) {\n        count += countResults(item.children);\n      } else {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {\n    this.minimumResultsForSearch = options.get('minimumResultsForSearch');\n\n    if (this.minimumResultsForSearch < 0) {\n      this.minimumResultsForSearch = Infinity;\n    }\n\n    decorated.call(this, $element, options, dataAdapter);\n  }\n\n  MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {\n    if (countResults(params.data.results) < this.minimumResultsForSearch) {\n      return false;\n    }\n\n    return decorated.call(this, params);\n  };\n\n  return MinimumResultsForSearch;\n});\n\nS2.define('select2/dropdown/selectOnClose',[\n\n], function () {\n  function SelectOnClose () { }\n\n  SelectOnClose.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    decorated.call(this, container, $container);\n\n    container.on('close', function (params) {\n      self._handleSelectOnClose(params);\n    });\n  };\n\n  SelectOnClose.prototype._handleSelectOnClose = function (_, params) {\n    if (params && params.originalSelect2Event != null) {\n      var event = params.originalSelect2Event;\n\n      // Don't select an item if the close event was triggered from a select or\n      // unselect event\n      if (event._type === 'select' || event._type === 'unselect') {\n        return;\n      }\n    }\n\n    var $highlightedResults = this.getHighlightedResults();\n\n    // Only select highlighted results\n    if ($highlightedResults.length < 1) {\n      return;\n    }\n\n    var data = $highlightedResults.data('data');\n\n    // Don't re-select already selected resulte\n    if (\n      (data.element != null && data.element.selected) ||\n      (data.element == null && data.selected)\n    ) {\n      return;\n    }\n\n    this.trigger('select', {\n        data: data\n    });\n  };\n\n  return SelectOnClose;\n});\n\nS2.define('select2/dropdown/closeOnSelect',[\n\n], function () {\n  function CloseOnSelect () { }\n\n  CloseOnSelect.prototype.bind = function (decorated, container, $container) {\n    var self = this;\n\n    decorated.call(this, container, $container);\n\n    container.on('select', function (evt) {\n      self._selectTriggered(evt);\n    });\n\n    container.on('unselect', function (evt) {\n      self._selectTriggered(evt);\n    });\n  };\n\n  CloseOnSelect.prototype._selectTriggered = function (_, evt) {\n    var originalEvent = evt.originalEvent;\n\n    // Don't close if the control key is being held\n    if (originalEvent && originalEvent.ctrlKey) {\n      return;\n    }\n\n    this.trigger('close', {\n      originalEvent: originalEvent,\n      originalSelect2Event: evt\n    });\n  };\n\n  return CloseOnSelect;\n});\n\nS2.define('select2/i18n/en',[],function () {\n  // English\n  return {\n    errorLoading: function () {\n      return 'The results could not be loaded.';\n    },\n    inputTooLong: function (args) {\n      var overChars = args.input.length - args.maximum;\n\n      var message = 'Please delete ' + overChars + ' character';\n\n      if (overChars != 1) {\n        message += 's';\n      }\n\n      return message;\n    },\n    inputTooShort: function (args) {\n      var remainingChars = args.minimum - args.input.length;\n\n      var message = 'Please enter ' + remainingChars + ' or more characters';\n\n      return message;\n    },\n    loadingMore: function () {\n      return 'Loading more results…';\n    },\n    maximumSelected: function (args) {\n      var message = 'You can only select ' + args.maximum + ' item';\n\n      if (args.maximum != 1) {\n        message += 's';\n      }\n\n      return message;\n    },\n    noResults: function () {\n      return 'No results found';\n    },\n    searching: function () {\n      return 'Searching…';\n    }\n  };\n});\n\nS2.define('select2/defaults',[\n  'jquery',\n  'require',\n\n  './results',\n\n  './selection/single',\n  './selection/multiple',\n  './selection/placeholder',\n  './selection/allowClear',\n  './selection/search',\n  './selection/eventRelay',\n\n  './utils',\n  './translation',\n  './diacritics',\n\n  './data/select',\n  './data/array',\n  './data/ajax',\n  './data/tags',\n  './data/tokenizer',\n  './data/minimumInputLength',\n  './data/maximumInputLength',\n  './data/maximumSelectionLength',\n\n  './dropdown',\n  './dropdown/search',\n  './dropdown/hidePlaceholder',\n  './dropdown/infiniteScroll',\n  './dropdown/attachBody',\n  './dropdown/minimumResultsForSearch',\n  './dropdown/selectOnClose',\n  './dropdown/closeOnSelect',\n\n  './i18n/en'\n], function ($, require,\n\n             ResultsList,\n\n             SingleSelection, MultipleSelection, Placeholder, AllowClear,\n             SelectionSearch, EventRelay,\n\n             Utils, Translation, DIACRITICS,\n\n             SelectData, ArrayData, AjaxData, Tags, Tokenizer,\n             MinimumInputLength, MaximumInputLength, MaximumSelectionLength,\n\n             Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,\n             AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,\n\n             EnglishTranslation) {\n  function Defaults () {\n    this.reset();\n  }\n\n  Defaults.prototype.apply = function (options) {\n    options = $.extend(true, {}, this.defaults, options);\n\n    if (options.dataAdapter == null) {\n      if (options.ajax != null) {\n        options.dataAdapter = AjaxData;\n      } else if (options.data != null) {\n        options.dataAdapter = ArrayData;\n      } else {\n        options.dataAdapter = SelectData;\n      }\n\n      if (options.minimumInputLength > 0) {\n        options.dataAdapter = Utils.Decorate(\n          options.dataAdapter,\n          MinimumInputLength\n        );\n      }\n\n      if (options.maximumInputLength > 0) {\n        options.dataAdapter = Utils.Decorate(\n          options.dataAdapter,\n          MaximumInputLength\n        );\n      }\n\n      if (options.maximumSelectionLength > 0) {\n        options.dataAdapter = Utils.Decorate(\n          options.dataAdapter,\n          MaximumSelectionLength\n        );\n      }\n\n      if (options.tags) {\n        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);\n      }\n\n      if (options.tokenSeparators != null || options.tokenizer != null) {\n        options.dataAdapter = Utils.Decorate(\n          options.dataAdapter,\n          Tokenizer\n        );\n      }\n\n      if (options.query != null) {\n        var Query = require(options.amdBase + 'compat/query');\n\n        options.dataAdapter = Utils.Decorate(\n          options.dataAdapter,\n          Query\n        );\n      }\n\n      if (options.initSelection != null) {\n        var InitSelection = require(options.amdBase + 'compat/initSelection');\n\n        options.dataAdapter = Utils.Decorate(\n          options.dataAdapter,\n          InitSelection\n        );\n      }\n    }\n\n    if (options.resultsAdapter == null) {\n      options.resultsAdapter = ResultsList;\n\n      if (options.ajax != null) {\n        options.resultsAdapter = Utils.Decorate(\n          options.resultsAdapter,\n          InfiniteScroll\n        );\n      }\n\n      if (options.placeholder != null) {\n        options.resultsAdapter = Utils.Decorate(\n          options.resultsAdapter,\n          HidePlaceholder\n        );\n      }\n\n      if (options.selectOnClose) {\n        options.resultsAdapter = Utils.Decorate(\n          options.resultsAdapter,\n          SelectOnClose\n        );\n      }\n    }\n\n    if (options.dropdownAdapter == null) {\n      if (options.multiple) {\n        options.dropdownAdapter = Dropdown;\n      } else {\n        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);\n\n        options.dropdownAdapter = SearchableDropdown;\n      }\n\n      if (options.minimumResultsForSearch !== 0) {\n        options.dropdownAdapter = Utils.Decorate(\n          options.dropdownAdapter,\n          MinimumResultsForSearch\n        );\n      }\n\n      if (options.closeOnSelect) {\n        options.dropdownAdapter = Utils.Decorate(\n          options.dropdownAdapter,\n          CloseOnSelect\n        );\n      }\n\n      if (\n        options.dropdownCssClass != null ||\n        options.dropdownCss != null ||\n        options.adaptDropdownCssClass != null\n      ) {\n        var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');\n\n        options.dropdownAdapter = Utils.Decorate(\n          options.dropdownAdapter,\n          DropdownCSS\n        );\n      }\n\n      options.dropdownAdapter = Utils.Decorate(\n        options.dropdownAdapter,\n        AttachBody\n      );\n    }\n\n    if (options.selectionAdapter == null) {\n      if (options.multiple) {\n        options.selectionAdapter = MultipleSelection;\n      } else {\n        options.selectionAdapter = SingleSelection;\n      }\n\n      // Add the placeholder mixin if a placeholder was specified\n      if (options.placeholder != null) {\n        options.selectionAdapter = Utils.Decorate(\n          options.selectionAdapter,\n          Placeholder\n        );\n      }\n\n      if (options.allowClear) {\n        options.selectionAdapter = Utils.Decorate(\n          options.selectionAdapter,\n          AllowClear\n        );\n      }\n\n      if (options.multiple) {\n        options.selectionAdapter = Utils.Decorate(\n          options.selectionAdapter,\n          SelectionSearch\n        );\n      }\n\n      if (\n        options.containerCssClass != null ||\n        options.containerCss != null ||\n        options.adaptContainerCssClass != null\n      ) {\n        var ContainerCSS = require(options.amdBase + 'compat/containerCss');\n\n        options.selectionAdapter = Utils.Decorate(\n          options.selectionAdapter,\n          ContainerCSS\n        );\n      }\n\n      options.selectionAdapter = Utils.Decorate(\n        options.selectionAdapter,\n        EventRelay\n      );\n    }\n\n    if (typeof options.language === 'string') {\n      // Check if the language is specified with a region\n      if (options.language.indexOf('-') > 0) {\n        // Extract the region information if it is included\n        var languageParts = options.language.split('-');\n        var baseLanguage = languageParts[0];\n\n        options.language = [options.language, baseLanguage];\n      } else {\n        options.language = [options.language];\n      }\n    }\n\n    if ($.isArray(options.language)) {\n      var languages = new Translation();\n      options.language.push('en');\n\n      var languageNames = options.language;\n\n      for (var l = 0; l < languageNames.length; l++) {\n        var name = languageNames[l];\n        var language = {};\n\n        try {\n          // Try to load it with the original name\n          language = Translation.loadPath(name);\n        } catch (e) {\n          try {\n            // If we couldn't load it, check if it wasn't the full path\n            name = this.defaults.amdLanguageBase + name;\n            language = Translation.loadPath(name);\n          } catch (ex) {\n            // The translation could not be loaded at all. Sometimes this is\n            // because of a configuration problem, other times this can be\n            // because of how Select2 helps load all possible translation files.\n            if (options.debug && window.console && console.warn) {\n              console.warn(\n                'Select2: The language file for \"' + name + '\" could not be ' +\n                'automatically loaded. A fallback will be used instead.'\n              );\n            }\n\n            continue;\n          }\n        }\n\n        languages.extend(language);\n      }\n\n      options.translations = languages;\n    } else {\n      var baseTranslation = Translation.loadPath(\n        this.defaults.amdLanguageBase + 'en'\n      );\n      var customTranslation = new Translation(options.language);\n\n      customTranslation.extend(baseTranslation);\n\n      options.translations = customTranslation;\n    }\n\n    return options;\n  };\n\n  Defaults.prototype.reset = function () {\n    function stripDiacritics (text) {\n      // Used 'uni range + named function' from http://jsperf.com/diacritics/18\n      function match(a) {\n        return DIACRITICS[a] || a;\n      }\n\n      return text.replace(/[^\\u0000-\\u007E]/g, match);\n    }\n\n    function matcher (params, data) {\n      // Always return the object if there is nothing to compare\n      if ($.trim(params.term) === '') {\n        return data;\n      }\n\n      // Do a recursive check for options with children\n      if (data.children && data.children.length > 0) {\n        // Clone the data object if there are children\n        // This is required as we modify the object to remove any non-matches\n        var match = $.extend(true, {}, data);\n\n        // Check each child of the option\n        for (var c = data.children.length - 1; c >= 0; c--) {\n          var child = data.children[c];\n\n          var matches = matcher(params, child);\n\n          // If there wasn't a match, remove the object in the array\n          if (matches == null) {\n            match.children.splice(c, 1);\n          }\n        }\n\n        // If any children matched, return the new object\n        if (match.children.length > 0) {\n          return match;\n        }\n\n        // If there were no matching children, check just the plain object\n        return matcher(params, match);\n      }\n\n      var original = stripDiacritics(data.text).toUpperCase();\n      var term = stripDiacritics(params.term).toUpperCase();\n\n      // Check if the text contains the term\n      if (original.indexOf(term) > -1) {\n        return data;\n      }\n\n      // If it doesn't contain the term, don't return anything\n      return null;\n    }\n\n    this.defaults = {\n      amdBase: './',\n      amdLanguageBase: './i18n/',\n      closeOnSelect: true,\n      debug: false,\n      dropdownAutoWidth: false,\n      escapeMarkup: Utils.escapeMarkup,\n      language: EnglishTranslation,\n      matcher: matcher,\n      minimumInputLength: 0,\n      maximumInputLength: 0,\n      maximumSelectionLength: 0,\n      minimumResultsForSearch: 0,\n      selectOnClose: false,\n      sorter: function (data) {\n        return data;\n      },\n      templateResult: function (result) {\n        return result.text;\n      },\n      templateSelection: function (selection) {\n        return selection.text;\n      },\n      theme: 'default',\n      width: 'resolve'\n    };\n  };\n\n  Defaults.prototype.set = function (key, value) {\n    var camelKey = $.camelCase(key);\n\n    var data = {};\n    data[camelKey] = value;\n\n    var convertedData = Utils._convertData(data);\n\n    $.extend(this.defaults, convertedData);\n  };\n\n  var defaults = new Defaults();\n\n  return defaults;\n});\n\nS2.define('select2/options',[\n  'require',\n  'jquery',\n  './defaults',\n  './utils'\n], function (require, $, Defaults, Utils) {\n  function Options (options, $element) {\n    this.options = options;\n\n    if ($element != null) {\n      this.fromElement($element);\n    }\n\n    this.options = Defaults.apply(this.options);\n\n    if ($element && $element.is('input')) {\n      var InputCompat = require(this.get('amdBase') + 'compat/inputData');\n\n      this.options.dataAdapter = Utils.Decorate(\n        this.options.dataAdapter,\n        InputCompat\n      );\n    }\n  }\n\n  Options.prototype.fromElement = function ($e) {\n    var excludedData = ['select2'];\n\n    if (this.options.multiple == null) {\n      this.options.multiple = $e.prop('multiple');\n    }\n\n    if (this.options.disabled == null) {\n      this.options.disabled = $e.prop('disabled');\n    }\n\n    if (this.options.language == null) {\n      if ($e.prop('lang')) {\n        this.options.language = $e.prop('lang').toLowerCase();\n      } else if ($e.closest('[lang]').prop('lang')) {\n        this.options.language = $e.closest('[lang]').prop('lang');\n      }\n    }\n\n    if (this.options.dir == null) {\n      if ($e.prop('dir')) {\n        this.options.dir = $e.prop('dir');\n      } else if ($e.closest('[dir]').prop('dir')) {\n        this.options.dir = $e.closest('[dir]').prop('dir');\n      } else {\n        this.options.dir = 'ltr';\n      }\n    }\n\n    $e.prop('disabled', this.options.disabled);\n    $e.prop('multiple', this.options.multiple);\n\n    if ($e.data('select2Tags')) {\n      if (this.options.debug && window.console && console.warn) {\n        console.warn(\n          'Select2: The `data-select2-tags` attribute has been changed to ' +\n          'use the `data-data` and `data-tags=\"true\"` attributes and will be ' +\n          'removed in future versions of Select2.'\n        );\n      }\n\n      $e.data('data', $e.data('select2Tags'));\n      $e.data('tags', true);\n    }\n\n    if ($e.data('ajaxUrl')) {\n      if (this.options.debug && window.console && console.warn) {\n        console.warn(\n          'Select2: The `data-ajax-url` attribute has been changed to ' +\n          '`data-ajax--url` and support for the old attribute will be removed' +\n          ' in future versions of Select2.'\n        );\n      }\n\n      $e.attr('ajax--url', $e.data('ajaxUrl'));\n      $e.data('ajax--url', $e.data('ajaxUrl'));\n    }\n\n    var dataset = {};\n\n    // Prefer the element's `dataset` attribute if it exists\n    // jQuery 1.x does not correctly handle data attributes with multiple dashes\n    if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {\n      dataset = $.extend(true, {}, $e[0].dataset, $e.data());\n    } else {\n      dataset = $e.data();\n    }\n\n    var data = $.extend(true, {}, dataset);\n\n    data = Utils._convertData(data);\n\n    for (var key in data) {\n      if ($.inArray(key, excludedData) > -1) {\n        continue;\n      }\n\n      if ($.isPlainObject(this.options[key])) {\n        $.extend(this.options[key], data[key]);\n      } else {\n        this.options[key] = data[key];\n      }\n    }\n\n    return this;\n  };\n\n  Options.prototype.get = function (key) {\n    return this.options[key];\n  };\n\n  Options.prototype.set = function (key, val) {\n    this.options[key] = val;\n  };\n\n  return Options;\n});\n\nS2.define('select2/core',[\n  'jquery',\n  './options',\n  './utils',\n  './keys'\n], function ($, Options, Utils, KEYS) {\n  var Select2 = function ($element, options) {\n    if ($element.data('select2') != null) {\n      $element.data('select2').destroy();\n    }\n\n    this.$element = $element;\n\n    this.id = this._generateId($element);\n\n    options = options || {};\n\n    this.options = new Options(options, $element);\n\n    Select2.__super__.constructor.call(this);\n\n    // Set up the tabindex\n\n    var tabindex = $element.attr('tabindex') || 0;\n    $element.data('old-tabindex', tabindex);\n    $element.attr('tabindex', '-1');\n\n    // Set up containers and adapters\n\n    var DataAdapter = this.options.get('dataAdapter');\n    this.dataAdapter = new DataAdapter($element, this.options);\n\n    var $container = this.render();\n\n    this._placeContainer($container);\n\n    var SelectionAdapter = this.options.get('selectionAdapter');\n    this.selection = new SelectionAdapter($element, this.options);\n    this.$selection = this.selection.render();\n\n    this.selection.position(this.$selection, $container);\n\n    var DropdownAdapter = this.options.get('dropdownAdapter');\n    this.dropdown = new DropdownAdapter($element, this.options);\n    this.$dropdown = this.dropdown.render();\n\n    this.dropdown.position(this.$dropdown, $container);\n\n    var ResultsAdapter = this.options.get('resultsAdapter');\n    this.results = new ResultsAdapter($element, this.options, this.dataAdapter);\n    this.$results = this.results.render();\n\n    this.results.position(this.$results, this.$dropdown);\n\n    // Bind events\n\n    var self = this;\n\n    // Bind the container to all of the adapters\n    this._bindAdapters();\n\n    // Register any DOM event handlers\n    this._registerDomEvents();\n\n    // Register any internal event handlers\n    this._registerDataEvents();\n    this._registerSelectionEvents();\n    this._registerDropdownEvents();\n    this._registerResultsEvents();\n    this._registerEvents();\n\n    // Set the initial state\n    this.dataAdapter.current(function (initialData) {\n      self.trigger('selection:update', {\n        data: initialData\n      });\n    });\n\n    // Hide the original select\n    $element.addClass('select2-hidden-accessible');\n    $element.attr('aria-hidden', 'true');\n\n    // Synchronize any monitored attributes\n    this._syncAttributes();\n\n    $element.data('select2', this);\n  };\n\n  Utils.Extend(Select2, Utils.Observable);\n\n  Select2.prototype._generateId = function ($element) {\n    var id = '';\n\n    if ($element.attr('id') != null) {\n      id = $element.attr('id');\n    } else if ($element.attr('name') != null) {\n      id = $element.attr('name') + '-' + Utils.generateChars(2);\n    } else {\n      id = Utils.generateChars(4);\n    }\n\n    id = id.replace(/(:|\\.|\\[|\\]|,)/g, '');\n    id = 'select2-' + id;\n\n    return id;\n  };\n\n  Select2.prototype._placeContainer = function ($container) {\n    $container.insertAfter(this.$element);\n\n    var width = this._resolveWidth(this.$element, this.options.get('width'));\n\n    if (width != null) {\n      $container.css('width', width);\n    }\n  };\n\n  Select2.prototype._resolveWidth = function ($element, method) {\n    var WIDTH = /^width:(([-+]?([0-9]*\\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;\n\n    if (method == 'resolve') {\n      var styleWidth = this._resolveWidth($element, 'style');\n\n      if (styleWidth != null) {\n        return styleWidth;\n      }\n\n      return this._resolveWidth($element, 'element');\n    }\n\n    if (method == 'element') {\n      var elementWidth = $element.outerWidth(false);\n\n      if (elementWidth <= 0) {\n        return 'auto';\n      }\n\n      return elementWidth + 'px';\n    }\n\n    if (method == 'style') {\n      var style = $element.attr('style');\n\n      if (typeof(style) !== 'string') {\n        return null;\n      }\n\n      var attrs = style.split(';');\n\n      for (var i = 0, l = attrs.length; i < l; i = i + 1) {\n        var attr = attrs[i].replace(/\\s/g, '');\n        var matches = attr.match(WIDTH);\n\n        if (matches !== null && matches.length >= 1) {\n          return matches[1];\n        }\n      }\n\n      return null;\n    }\n\n    return method;\n  };\n\n  Select2.prototype._bindAdapters = function () {\n    this.dataAdapter.bind(this, this.$container);\n    this.selection.bind(this, this.$container);\n\n    this.dropdown.bind(this, this.$container);\n    this.results.bind(this, this.$container);\n  };\n\n  Select2.prototype._registerDomEvents = function () {\n    var self = this;\n\n    this.$element.on('change.select2', function () {\n      self.dataAdapter.current(function (data) {\n        self.trigger('selection:update', {\n          data: data\n        });\n      });\n    });\n\n    this.$element.on('focus.select2', function (evt) {\n      self.trigger('focus', evt);\n    });\n\n    this._syncA = Utils.bind(this._syncAttributes, this);\n    this._syncS = Utils.bind(this._syncSubtree, this);\n\n    if (this.$element[0].attachEvent) {\n      this.$element[0].attachEvent('onpropertychange', this._syncA);\n    }\n\n    var observer = window.MutationObserver ||\n      window.WebKitMutationObserver ||\n      window.MozMutationObserver\n    ;\n\n    if (observer != null) {\n      this._observer = new observer(function (mutations) {\n        $.each(mutations, self._syncA);\n        $.each(mutations, self._syncS);\n      });\n      this._observer.observe(this.$element[0], {\n        attributes: true,\n        childList: true,\n        subtree: false\n      });\n    } else if (this.$element[0].addEventListener) {\n      this.$element[0].addEventListener(\n        'DOMAttrModified',\n        self._syncA,\n        false\n      );\n      this.$element[0].addEventListener(\n        'DOMNodeInserted',\n        self._syncS,\n        false\n      );\n      this.$element[0].addEventListener(\n        'DOMNodeRemoved',\n        self._syncS,\n        false\n      );\n    }\n  };\n\n  Select2.prototype._registerDataEvents = function () {\n    var self = this;\n\n    this.dataAdapter.on('*', function (name, params) {\n      self.trigger(name, params);\n    });\n  };\n\n  Select2.prototype._registerSelectionEvents = function () {\n    var self = this;\n    var nonRelayEvents = ['toggle', 'focus'];\n\n    this.selection.on('toggle', function () {\n      self.toggleDropdown();\n    });\n\n    this.selection.on('focus', function (params) {\n      self.focus(params);\n    });\n\n    this.selection.on('*', function (name, params) {\n      if ($.inArray(name, nonRelayEvents) !== -1) {\n        return;\n      }\n\n      self.trigger(name, params);\n    });\n  };\n\n  Select2.prototype._registerDropdownEvents = function () {\n    var self = this;\n\n    this.dropdown.on('*', function (name, params) {\n      self.trigger(name, params);\n    });\n  };\n\n  Select2.prototype._registerResultsEvents = function () {\n    var self = this;\n\n    this.results.on('*', function (name, params) {\n      self.trigger(name, params);\n    });\n  };\n\n  Select2.prototype._registerEvents = function () {\n    var self = this;\n\n    this.on('open', function () {\n      self.$container.addClass('select2-container--open');\n    });\n\n    this.on('close', function () {\n      self.$container.removeClass('select2-container--open');\n    });\n\n    this.on('enable', function () {\n      self.$container.removeClass('select2-container--disabled');\n    });\n\n    this.on('disable', function () {\n      self.$container.addClass('select2-container--disabled');\n    });\n\n    this.on('blur', function () {\n      self.$container.removeClass('select2-container--focus');\n    });\n\n    this.on('query', function (params) {\n      if (!self.isOpen()) {\n        self.trigger('open', {});\n      }\n\n      this.dataAdapter.query(params, function (data) {\n        self.trigger('results:all', {\n          data: data,\n          query: params\n        });\n      });\n    });\n\n    this.on('query:append', function (params) {\n      this.dataAdapter.query(params, function (data) {\n        self.trigger('results:append', {\n          data: data,\n          query: params\n        });\n      });\n    });\n\n    this.on('keypress', function (evt) {\n      var key = evt.which;\n\n      if (self.isOpen()) {\n        if (key === KEYS.ESC || key === KEYS.TAB ||\n            (key === KEYS.UP && evt.altKey)) {\n          self.close();\n\n          evt.preventDefault();\n        } else if (key === KEYS.ENTER) {\n          self.trigger('results:select', {});\n\n          evt.preventDefault();\n        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {\n          self.trigger('results:toggle', {});\n\n          evt.preventDefault();\n        } else if (key === KEYS.UP) {\n          self.trigger('results:previous', {});\n\n          evt.preventDefault();\n        } else if (key === KEYS.DOWN) {\n          self.trigger('results:next', {});\n\n          evt.preventDefault();\n        }\n      } else {\n        if (key === KEYS.ENTER || key === KEYS.SPACE ||\n            (key === KEYS.DOWN && evt.altKey)) {\n          self.open();\n\n          evt.preventDefault();\n        }\n      }\n    });\n  };\n\n  Select2.prototype._syncAttributes = function () {\n    this.options.set('disabled', this.$element.prop('disabled'));\n\n    if (this.options.get('disabled')) {\n      if (this.isOpen()) {\n        this.close();\n      }\n\n      this.trigger('disable', {});\n    } else {\n      this.trigger('enable', {});\n    }\n  };\n\n  Select2.prototype._syncSubtree = function (evt, mutations) {\n    var changed = false;\n    var self = this;\n\n    // Ignore any mutation events raised for elements that aren't options or\n    // optgroups. This handles the case when the select element is destroyed\n    if (\n      evt && evt.target && (\n        evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'\n      )\n    ) {\n      return;\n    }\n\n    if (!mutations) {\n      // If mutation events aren't supported, then we can only assume that the\n      // change affected the selections\n      changed = true;\n    } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {\n      for (var n = 0; n < mutations.addedNodes.length; n++) {\n        var node = mutations.addedNodes[n];\n\n        if (node.selected) {\n          changed = true;\n        }\n      }\n    } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {\n      changed = true;\n    }\n\n    // Only re-pull the data if we think there is a change\n    if (changed) {\n      this.dataAdapter.current(function (currentData) {\n        self.trigger('selection:update', {\n          data: currentData\n        });\n      });\n    }\n  };\n\n  /**\n   * Override the trigger method to automatically trigger pre-events when\n   * there are events that can be prevented.\n   */\n  Select2.prototype.trigger = function (name, args) {\n    var actualTrigger = Select2.__super__.trigger;\n    var preTriggerMap = {\n      'open': 'opening',\n      'close': 'closing',\n      'select': 'selecting',\n      'unselect': 'unselecting'\n    };\n\n    if (args === undefined) {\n      args = {};\n    }\n\n    if (name in preTriggerMap) {\n      var preTriggerName = preTriggerMap[name];\n      var preTriggerArgs = {\n        prevented: false,\n        name: name,\n        args: args\n      };\n\n      actualTrigger.call(this, preTriggerName, preTriggerArgs);\n\n      if (preTriggerArgs.prevented) {\n        args.prevented = true;\n\n        return;\n      }\n    }\n\n    actualTrigger.call(this, name, args);\n  };\n\n  Select2.prototype.toggleDropdown = function () {\n    if (this.options.get('disabled')) {\n      return;\n    }\n\n    if (this.isOpen()) {\n      this.close();\n    } else {\n      this.open();\n    }\n  };\n\n  Select2.prototype.open = function () {\n    if (this.isOpen()) {\n      return;\n    }\n\n    this.trigger('query', {});\n  };\n\n  Select2.prototype.close = function () {\n    if (!this.isOpen()) {\n      return;\n    }\n\n    this.trigger('close', {});\n  };\n\n  Select2.prototype.isOpen = function () {\n    return this.$container.hasClass('select2-container--open');\n  };\n\n  Select2.prototype.hasFocus = function () {\n    return this.$container.hasClass('select2-container--focus');\n  };\n\n  Select2.prototype.focus = function (data) {\n    // No need to re-trigger focus events if we are already focused\n    if (this.hasFocus()) {\n      return;\n    }\n\n    this.$container.addClass('select2-container--focus');\n    this.trigger('focus', {});\n  };\n\n  Select2.prototype.enable = function (args) {\n    if (this.options.get('debug') && window.console && console.warn) {\n      console.warn(\n        'Select2: The `select2(\"enable\")` method has been deprecated and will' +\n        ' be removed in later Select2 versions. Use $element.prop(\"disabled\")' +\n        ' instead.'\n      );\n    }\n\n    if (args == null || args.length === 0) {\n      args = [true];\n    }\n\n    var disabled = !args[0];\n\n    this.$element.prop('disabled', disabled);\n  };\n\n  Select2.prototype.data = function () {\n    if (this.options.get('debug') &&\n        arguments.length > 0 && window.console && console.warn) {\n      console.warn(\n        'Select2: Data can no longer be set using `select2(\"data\")`. You ' +\n        'should consider setting the value instead using `$element.val()`.'\n      );\n    }\n\n    var data = [];\n\n    this.dataAdapter.current(function (currentData) {\n      data = currentData;\n    });\n\n    return data;\n  };\n\n  Select2.prototype.val = function (args) {\n    if (this.options.get('debug') && window.console && console.warn) {\n      console.warn(\n        'Select2: The `select2(\"val\")` method has been deprecated and will be' +\n        ' removed in later Select2 versions. Use $element.val() instead.'\n      );\n    }\n\n    if (args == null || args.length === 0) {\n      return this.$element.val();\n    }\n\n    var newVal = args[0];\n\n    if ($.isArray(newVal)) {\n      newVal = $.map(newVal, function (obj) {\n        return obj.toString();\n      });\n    }\n\n    this.$element.val(newVal).trigger('change');\n  };\n\n  Select2.prototype.destroy = function () {\n    this.$container.remove();\n\n    if (this.$element[0].detachEvent) {\n      this.$element[0].detachEvent('onpropertychange', this._syncA);\n    }\n\n    if (this._observer != null) {\n      this._observer.disconnect();\n      this._observer = null;\n    } else if (this.$element[0].removeEventListener) {\n      this.$element[0]\n        .removeEventListener('DOMAttrModified', this._syncA, false);\n      this.$element[0]\n        .removeEventListener('DOMNodeInserted', this._syncS, false);\n      this.$element[0]\n        .removeEventListener('DOMNodeRemoved', this._syncS, false);\n    }\n\n    this._syncA = null;\n    this._syncS = null;\n\n    this.$element.off('.select2');\n    this.$element.attr('tabindex', this.$element.data('old-tabindex'));\n\n    this.$element.removeClass('select2-hidden-accessible');\n    this.$element.attr('aria-hidden', 'false');\n    this.$element.removeData('select2');\n\n    this.dataAdapter.destroy();\n    this.selection.destroy();\n    this.dropdown.destroy();\n    this.results.destroy();\n\n    this.dataAdapter = null;\n    this.selection = null;\n    this.dropdown = null;\n    this.results = null;\n  };\n\n  Select2.prototype.render = function () {\n    var $container = $(\n      '<span class=\"select2 select2-container\">' +\n        '<span class=\"selection\"></span>' +\n        '<span class=\"dropdown-wrapper\" aria-hidden=\"true\"></span>' +\n      '</span>'\n    );\n\n    $container.attr('dir', this.options.get('dir'));\n\n    this.$container = $container;\n\n    this.$container.addClass('select2-container--' + this.options.get('theme'));\n\n    $container.data('element', this.$element);\n\n    return $container;\n  };\n\n  return Select2;\n});\n\nS2.define('jquery-mousewheel',[\n  'jquery'\n], function ($) {\n  // Used to shim jQuery.mousewheel for non-full builds.\n  return $;\n});\n\nS2.define('jquery.select2',[\n  'jquery',\n  'jquery-mousewheel',\n\n  './select2/core',\n  './select2/defaults'\n], function ($, _, Select2, Defaults) {\n  if ($.fn.select2 == null) {\n    // All methods that should return the element\n    var thisMethods = ['open', 'close', 'destroy'];\n\n    $.fn.select2 = function (options) {\n      options = options || {};\n\n      if (typeof options === 'object') {\n        this.each(function () {\n          var instanceOptions = $.extend(true, {}, options);\n\n          var instance = new Select2($(this), instanceOptions);\n        });\n\n        return this;\n      } else if (typeof options === 'string') {\n        var ret;\n        var args = Array.prototype.slice.call(arguments, 1);\n\n        this.each(function () {\n          var instance = $(this).data('select2');\n\n          if (instance == null && window.console && console.error) {\n            console.error(\n              'The select2(\\'' + options + '\\') method was called on an ' +\n              'element that is not using Select2.'\n            );\n          }\n\n          ret = instance[options].apply(instance, args);\n        });\n\n        // Check if we should be returning `this`\n        if ($.inArray(options, thisMethods) > -1) {\n          return this;\n        }\n\n        return ret;\n      } else {\n        throw new Error('Invalid arguments for Select2: ' + options);\n      }\n    };\n  }\n\n  if ($.fn.select2.defaults == null) {\n    $.fn.select2.defaults = Defaults;\n  }\n\n  return Select2;\n});\n\n  // Return the AMD loader configuration so it can be used outside of this file\n  return {\n    define: S2.define,\n    require: S2.require\n  };\n}());\n\n  // Autoload the jQuery bindings\n  // We know that all of the modules exist above this, so we're safe\n  var select2 = S2.require('jquery.select2');\n\n  // Hold the AMD module references on the jQuery function that was just loaded\n  // This allows Select2 to use the internal loader outside of this file, such\n  // as in the language files.\n  jQuery.fn.select2.amd = S2;\n\n  // Return the Select2 instance for anyone who is importing it.\n  return select2;\n}));\n","\n; jQuery = global.jQuery = require(\"jquery\");\n; var __browserify_shim_require__=require;(function browserifyShim(module, define, require) {\n/*! simpleWeather v3.1.0 - http://simpleweatherjs.com */\n(function($) {\n  'use strict';\n\n  function getAltTemp(unit, temp) {\n    if(unit === 'f') {\n      return Math.round((5.0/9.0)*(temp-32.0));\n    } else {\n      return Math.round((9.0/5.0)*temp+32.0);\n    }\n  }\n\n  $.extend({\n    simpleWeather: function(options){\n      options = $.extend({\n        location: '',\n        woeid: '',\n        unit: 'f',\n        success: function(weather){},\n        error: function(message){}\n      }, options);\n\n      var now = new Date();\n      var weatherUrl = 'https://query.yahooapis.com/v1/public/yql?format=json&rnd=' + now.getFullYear() + now.getMonth() + now.getDay() + now.getHours() + '&diagnostics=true&callback=?&q=';\n\n      if(options.location !== '') {\n        /* If latitude/longitude coordinates, need to format a little different. */\n        var location = '';\n        if(/^(\\-?\\d+(\\.\\d+)?),\\s*(\\-?\\d+(\\.\\d+)?)$/.test(options.location)) {\n          location = '(' + options.location + ')';\n        } else {\n          location = options.location;\n        }\n\n        weatherUrl += 'select * from weather.forecast where woeid in (select woeid from geo.places(1) where text=\"' + location + '\") and u=\"' + options.unit + '\"';\n      } else if(options.woeid !== '') {\n        weatherUrl += 'select * from weather.forecast where woeid=' + options.woeid + ' and u=\"' + options.unit + '\"';\n      } else {\n        options.error('Could not retrieve weather due to an invalid location.');\n        return false;\n      }\n\n      $.getJSON(\n        encodeURI(weatherUrl),\n        function(data) {\n          if(data !== null && data.query !== null && data.query.results !== null && data.query.results.channel.description !== 'Yahoo! Weather Error') {\n            var result = data.query.results.channel,\n                weather = {},\n                forecast,\n                compass = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'],\n                image404 = 'https://s.yimg.com/os/mit/media/m/weather/images/icons/l/44d-100567.png';\n\n            weather.title = result.item.title;\n            weather.temp = result.item.condition.temp;\n            weather.code = result.item.condition.code;\n            weather.todayCode = result.item.forecast[0].code;\n            weather.currently = result.item.condition.text;\n            weather.high = result.item.forecast[0].high;\n            weather.low = result.item.forecast[0].low;\n            weather.text = result.item.forecast[0].text;\n            weather.humidity = result.atmosphere.humidity;\n            weather.pressure = result.atmosphere.pressure;\n            weather.rising = result.atmosphere.rising;\n            weather.visibility = result.atmosphere.visibility;\n            weather.sunrise = result.astronomy.sunrise;\n            weather.sunset = result.astronomy.sunset;\n            weather.description = result.item.description;\n            weather.city = result.location.city;\n            weather.country = result.location.country;\n            weather.region = result.location.region;\n            weather.updated = result.item.pubDate;\n            weather.link = result.item.link;\n            weather.units = {temp: result.units.temperature, distance: result.units.distance, pressure: result.units.pressure, speed: result.units.speed};\n            weather.wind = {chill: result.wind.chill, direction: compass[Math.round(result.wind.direction / 22.5)], speed: result.wind.speed};\n\n            if(result.item.condition.temp < 80 && result.atmosphere.humidity < 40) {\n              weather.heatindex = -42.379+2.04901523*result.item.condition.temp+10.14333127*result.atmosphere.humidity-0.22475541*result.item.condition.temp*result.atmosphere.humidity-6.83783*(Math.pow(10, -3))*(Math.pow(result.item.condition.temp, 2))-5.481717*(Math.pow(10, -2))*(Math.pow(result.atmosphere.humidity, 2))+1.22874*(Math.pow(10, -3))*(Math.pow(result.item.condition.temp, 2))*result.atmosphere.humidity+8.5282*(Math.pow(10, -4))*result.item.condition.temp*(Math.pow(result.atmosphere.humidity, 2))-1.99*(Math.pow(10, -6))*(Math.pow(result.item.condition.temp, 2))*(Math.pow(result.atmosphere.humidity,2));\n            } else {\n              weather.heatindex = result.item.condition.temp;\n            }\n\n            if(result.item.condition.code == '3200') {\n              weather.thumbnail = image404;\n              weather.image = image404;\n            } else {\n              weather.thumbnail = 'https://s.yimg.com/zz/combo?a/i/us/nws/weather/gr/' + result.item.condition.code + 'ds.png';\n              weather.image = 'https://s.yimg.com/zz/combo?a/i/us/nws/weather/gr/' + result.item.condition.code + 'd.png';\n            }\n\n            weather.alt = {temp: getAltTemp(options.unit, result.item.condition.temp), high: getAltTemp(options.unit, result.item.forecast[0].high), low: getAltTemp(options.unit, result.item.forecast[0].low)};\n            if(options.unit === 'f') {\n              weather.alt.unit = 'c';\n            } else {\n              weather.alt.unit = 'f';\n            }\n\n            weather.forecast = [];\n            for(var i=0;i<result.item.forecast.length;i++) {\n              forecast = result.item.forecast[i];\n              forecast.alt = {high: getAltTemp(options.unit, result.item.forecast[i].high), low: getAltTemp(options.unit, result.item.forecast[i].low)};\n\n              if(result.item.forecast[i].code == \"3200\") {\n                forecast.thumbnail = image404;\n                forecast.image = image404;\n              } else {\n                forecast.thumbnail = 'https://s.yimg.com/zz/combo?a/i/us/nws/weather/gr/' + result.item.forecast[i].code + 'ds.png';\n                forecast.image = 'https://s.yimg.com/zz/combo?a/i/us/nws/weather/gr/' + result.item.forecast[i].code + 'd.png';\n              }\n\n              weather.forecast.push(forecast);\n            }\n\n            options.success(weather);\n          } else {\n            options.error('There was a problem retrieving the latest weather information.');\n          }\n        }\n      );\n      return this;\n    }\n  });\n})(jQuery);\n\n}).call(global, module, undefined, undefined);\n","import $ from 'jquery'\n\nexport default class BrokerageFilters {\n  constructor() {\n    this.grid = $('#yacht-grid')\n    this.form = $('#filters-form')\n\n    if (this.form.length > 0) {\n      this.init()\n    }\n  }\n\n  init() {\n    if (this.form.attr('data-post') === 'true') {\n      $('.filters-submit').on('click', (e) => {\n        e.preventDefault()\n        this.form.submit()\n      })\n    } else {\n      this.$filterModel = $('#filter-model')\n      this.$filterModelOther = $('#filter-model-other')\n      this.$filterotherType = $('#filter-oyster-type-non')\n      this.$filterPrice = $('#filter-price')\n      this.$filterLocation = $('#filter-location')\n      this.$filterStatus = $('#filter-status')\n\n      this.form.find('.filters-submit').on('click', (e) => {\n        e.preventDefault()\n\n        this.doFilter()\n      })\n\n      this.doFilter()\n\n      $('input[name=oyster-yacht-or-not]').change(function () {\n        if (this.value === 'true') {\n          $('.filter-model').show()\n          $('.filter-model-other').hide()\n        } else {\n          $('.filter-model').hide()\n          $('.filter-model-other').show()\n        }\n      })\n\n      window.onpopstate = (event) => {\n        this.filter(\n          event.state.model,\n          event.state.otherType,\n          event.state.price,\n          event.state.location,\n          event.state.status\n        )\n\n        event.state.otherType ? this.$filterModelOther.val(event.state.model).trigger('change') : this.$filterModel.val(event.state.model).trigger('change')\n        this.$filterotherType.prop('checked', event.state.otherType).trigger('change')\n        this.$filterPrice.val(event.state.price).trigger('change')\n        this.$filterLocation.val(event.state.location).trigger('change')\n        this.$filterStatus.val(event.state.status).trigger('change')\n\n        if (event.state.otherType) {\n          $('filter-model').hide()\n          $('filter-model-other').show()\n        } else {\n          $('filter-model').show()\n          $('filter-model-other').hide()\n        }\n      }\n    }\n  }\n\n  filter(model, otherType, price, location, status) {\n    this.grid.find('li').removeClass('hide')\n\n    if (otherType === true) {\n      this.grid.find('li').addClass('hide')\n      this.grid.find(\"li[data-non-oyster='true']\").removeClass('hide')\n    } else {\n      this.grid.find(\"li[data-non-oyster='true']\").addClass('hide')\n    }\n\n    // filter price\n    if (price !== '') {\n      const priceRange = price.split('-')\n\n      priceRange[0] = parseInt(priceRange[0])\n      priceRange[1] = parseInt(priceRange[1])\n\n      if (priceRange[0] > 0) {\n        this.grid.find('li').filter(() => parseInt($(this).data('price')) < priceRange[0]).addClass('hide')\n      }\n\n      if (priceRange[1] > 0) {\n        this.grid.find('li').filter(() => parseInt($(this).data('price')) > priceRange[1]).addClass('hide')\n      }\n    }\n\n    // filter model\n    if (model !== '') {\n      this.grid.find(\"li[data-model!='\" + model + \"']\").addClass('hide')\n    }\n\n    // filter location\n    if (location !== '') {\n      const locationList = location.split('|')\n\n      $.each(locationList, (i, loc) => {\n        this.grid.find('li').not(\"[data-location*='\" + loc + \"']\").addClass('hide')\n      })\n    }\n\n    // filter status\n    if (status !== '') {\n      this.grid.find(\"li[data-status!='\" + status + \"']\").addClass('hide')\n    }\n\n    if (this.grid.find('li').length === this.grid.find('li.hide').length) {\n      this.grid.find('.no-results').addClass('no-results--show')\n    } else {\n      this.grid.find('.no-results').removeClass('no-results--show')\n    }\n  }\n\n  doFilter() {\n    this.filter(\n      this.$filterotherType.prop('checked') ? this.$filterModelOther.val() : this.$filterModel.val(),\n      this.$filterotherType.prop('checked'),\n      this.$filterPrice.val(),\n      this.$filterLocation.val(),\n      this.$filterStatus.val()\n    )\n\n    this.queryString(\n      this.$filterotherType.prop('checked') ? this.$filterModelOther.val() : this.$filterModel.val(),\n      this.$filterotherType.prop('checked'),\n      this.$filterPrice.val(),\n      this.$filterLocation.val(),\n      this.$filterStatus.val()\n    )\n  }\n\n  queryString(model, otherType, price, location, status) {\n    if (history.pushState) {\n      const query = []\n      if (model !== '') {\n        query.push('model=' + encodeURIComponent(model))\n      }\n      if (otherType !== '') {\n        query.push('otherType=' + encodeURIComponent(otherType))\n      }\n      if (price !== '') {\n        query.push('price=' + encodeURIComponent(price))\n      }\n      if (location !== '') {\n        query.push('location=' + encodeURIComponent(location))\n      }\n      if (status !== '') {\n        query.push('status=' + encodeURIComponent(status))\n      }\n\n      if (query.length > 0) {\n        const qs = \"?\" + query.join('&').replace(/%20/g, '+')\n\n        const newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + qs\n        window.history.pushState({\n          model, otherType, price, location, status,\n        },'',newurl)\n      }\n    }\n  }\n}\n\n","import { addClass, removeClass, hasClass } from '../../_scripts/helper-functions'\n\nexport default class Burger {\n  constructor(button, navControls) {\n    this.button = button\n    this.burgerPiece = button.querySelector('.burger__wrapper')\n    console.log('this.burgerPiece', this.burgerPiece)\n    this.navControls = navControls\n    this.buttonTrans = 'close'\n\n    this.events()\n  }\n\n  events() {\n    this.button.addEventListener('click', () => {\n      if (hasClass(this.button, 'open')) {\n        this.navControls.close()\n        this.close()\n      } else {\n        this.navControls.open()\n        this.open()\n      }\n    })\n\n    this.burgerPiece.addEventListener('transitionend', () => {\n      const action = this.buttonTrans === 'close' ? 'closing' : 'opening'\n      if (hasClass(this.button, action)) {\n        removeClass(this.button, action)\n        addClass(this.button, this.buttonTrans)\n      }\n    })\n  }\n\n  close() {\n    this.buttonTrans = 'close'\n    if (hasClass(this.button, 'open')) {\n      removeClass(this.button, 'open')\n      addClass(this.button, 'closing')\n    }\n  }\n\n  open() {\n    this.buttonTrans = 'open'\n    if (!hasClass(this.button, 'open') && !hasClass(this.button, 'opening') && !hasClass(this.button, 'closing')) {\n      removeClass(this.button, 'close')\n      addClass(this.button, 'opening')\n    }\n  }\n}\n","import $ from 'jquery'\n\nexport default class CharterFilters {\n  constructor() {\n    this.grid = $('#yacht-grid')\n    this.form = $('#filters-form')\n\n    if (this.form.length > 0) {\n      this.init()\n    }\n  }\n\n  init() {\n    if (this.form.attr('data-post') === \"true\") {\n      $('.filters-submit').on('click', function (e) {\n        e.preventDefault()\n\n        this.form.submit()\n      })\n    } else {\n      this.filterModel = $('#filter-model')\n      this.filterGuests = $('#filter-guests')\n      this.filterSeason = $('#filter-season')\n      this.filterDestination = $('#filter-destination')\n\n      this.form.find('.filters-submit').on('click', (e) => {\n        e.preventDefault()\n        this.doFilter()\n      })\n    }\n  }\n\n  filter(model, guests, season, destination) {\n    this.grid.find('li').removeClass('hide')\n\n    // filter model\n    if (model !== '') {\n      this.grid.find(\"li[data-model!='\" + model + \"']\").addClass('hide')\n    }\n\n    // filter guests\n    if (guests !== '') {\n      //this.grid.find(\"li[data-guests!='\" + guests + \"']\").addClass('hide')\n      this.grid.find('li').filter(yacht => parseInt($(yacht).data('guests')) < parseInt(guests)).addClass('hide')\n    }\n\n    // filter season\n    if (season !== '') {\n      this.grid.find(\"li[data-\" + season + \"='']\").addClass('hide')\n    }\n\n    // filter destination\n    if (destination !== '') {\n      if (season !== '') {\n        this.grid.find(\"li[data-\" + season + \"!='\" + destination + \"']\").addClass('hide')\n      } else {\n        this.grid.find(\"li[data-summer!='\" + destination + \"'][data-winter!='\" + destination + \"']\").addClass('hide')\n      }\n    }\n\n    if (this.grid.find('li').length === this.grid.find('li.hide').length) {\n      this.grid.find('.no-results').addClass('no-results--show')\n    } else {\n      this.grid.find('.no-results').removeClass('no-results--show')\n    }\n  }\n\n  doFilter() {\n    this.filter(this.filterModel.val(), this.filterGuests.val(), this.filterSeason.val(), this.filterDestination.val())\n  }\n}\n","import { addClass, removeClass, getElemDistance } from '../../_scripts/helper-functions'\nimport BreakPoints from '../../_scripts/breakpoints'\n\nexport default class Filters {\n  constructor() {\n    this.filterBar = document.getElementById('global-page-filters')\n\n    this.activeBar = false\n    this.stickyBar = false\n\n    this.topBarHeight = 0\n    this.fixedHeight = 0\n\n    if (this.filterBar) {\n      this.fetchSizes()\n      this.distFromTop = getElemDistance(this.filterBar)\n    }\n  }\n\n  fetchSizes() {\n    this.fixedHeight = this.filterBar.getBoundingClientRect().height\n  }\n\n  snapPointCheck(reactiveScrollProps) {\n    if (this.filterBar) {\n      const { filterBar } = this\n      const { lastKnownScrollPosition, fixedTopValue } = reactiveScrollProps\n\n      const snapPoint = this.distFromTop - (fixedTopValue)\n\n      if (lastKnownScrollPosition > snapPoint && !this.activeBar) {\n        removeClass(filterBar, `${filterBar.className.split(' ')[0]}--unstuck`)\n\n        this.activeBar = true\n        this.fixedHeight = 0\n      } else if (lastKnownScrollPosition < snapPoint && this.activeBar) {\n        addClass(filterBar, `${filterBar.className.split(' ')[0]}--unstuck`)\n\n        this.activeBar = false\n\n        this.topBarHeight = 0\n        filterBar.style.transform = ''\n\n        this.fixedHeight = filterBar.getBoundingClientRect().height\n      }\n\n      if (fixedTopValue !== this.topBarHeight && this.activeBar) {\n        filterBar.style.transform = `translateY(${fixedTopValue}px)`\n        this.topBarHeight = fixedTopValue\n      } else if (fixedTopValue === 0) {\n        this.topBarHeight = 0\n\n        filterBar.style.transform = ''\n      }\n    }\n\n    return this.fixedHeight\n  }\n}\n","import $ from 'jquery'\n\nfunction validateEmail(email) {\n  const re = /\\S+@\\S+\\.\\S+/\n  return re.test(email)\n}\n\nexport default class GlobalFooter {\n  constructor() {\n    this.init()\n  }\n\n  init() {\n    $('.sign-up-btn').on('click', () => {\n      let nope = false\n\n      $('.new-sign-up :input[required]').each((input) => {\n        if (!$(input).val()) {\n          nope = true\n          $(input).parent('.field').addClass('error')\n          $('.new-sign-up .form-error').addClass('visible')\n        } else {\n          $(input).parent('.field').removeClass('error')\n          $('.new-sign-up .form-error').removeClass('visible')\n        }\n      })\n\n      if (!validateEmail($('.new-sign-up :input[type=\"email\"]').val())) {\n        nope = true\n\n        $('.new-sign-up :input[type=\"email\"]').parent('.field').addClass('error')\n        $('.new-sign-up .form-error').addClass('visible')\n      } else {\n        $('.new-sign-up :input[type=\"email\"]').parent('.field').removeClass('error')\n        $('.new-sign-up .form-error').removeClass('visible')\n      }\n\n      if (!nope) {\n        $('.sign-up-btn').addClass('is-loading')\n        const $form = $('#signup-home-footer')\n\n        $.ajax({\n          url: '/newsletter/signup.php',\n          dataType: 'json',\n          type: 'POST',\n          data: {\n            email: $form.find('.newsletter-email').val(),\n            fname: $form.find('.newsletter-fname').val(),\n            sname: $form.find('.newsletter-sname').val(),\n            country: $form.find('.newsletter-country').val(),\n          },\n        }).done((data) => {\n          if (data.status === 'success') {\n            $('.sign-up').addClass('is-complete')\n          }\n        })\n      }\n    })\n\n    $('#signup-home-footer').submit((e) => {\n      e.preventDefault()\n    })\n  }\n}\n","import $ from 'jquery'\n\nexport default class FormValidation {\n  constructor() {\n    this.init()\n  }\n\n  init() {\n    $.validator.addMethod('phoneno', (phone_number, element) => {\n      phone_number = phone_number.replace(/\\s+/g, '')\n      return this.optional(element) || phone_number.length > 9 && phone_number.match(/^((\\+[1-9]{1,4}[ \\-]*)|(\\([0-9]{2,3}\\)[ \\-]*)|([0-9]{2,4})[ \\-]*)*?[0-9]{3,4}?[ \\-]*[0-9]{3,4}?$/)\n    }, 'Please specify a valid phone number')\n\n    $('.address-fill-out').on('click', '.add-address-line', function() {\n      const thisAddressContainer = $(this).parents('.address-fill-out')\n      const addressLineLength = $('.address-line', thisAddressContainer).length\n      const newAddressLineNum = addressLineLength + 1\n\n      console.log('this', this)\n\n      console.log('newAddressLineNum', newAddressLineNum)\n\n      if (addressLineLength < 5) {\n        const $lastLine = $('.address-line:last', thisAddressContainer)\n\n        const newClone = $lastLine.clone()\n\n        newClone.find('label').attr({ for: `member_address_line_${newAddressLineNum}` })\n\n        newClone.find('input').attr({\n          name: `member_address_line_${newAddressLineNum}`,\n          id: `member_address_line_${newAddressLineNum}`,\n          placeholder: `Address Line ${newAddressLineNum}`,\n          value: '',\n        })\n\n        if (addressLineLength === 4) {\n          newClone.find('button').hide()\n        }\n\n        newClone.insertAfter($lastLine)\n\n        $lastLine.find('button').hide()\n      }\n    })\n\n    // signup-home-footer is handled differently.\n    $('form').not('#signup-home-footer').each((index, element) => {\n\n      const formId = $(element).attr('id')\n      const currentForm = $(element)\n\n      if ($('[type=\"submit\"][data-form-id=\"' + formId + '\"]').length) {\n        $('[type=\"submit\"][data-form-id=\"' + formId + '\"]').on('click', () => {\n          $(element).submit()\n        })\n      } else {\n        $(currentForm).parent().parent().find('[type=\"submit\"]')\n          .not('[data-form-id]')\n          .click(() => {\n            $(element).submit()\n          })\n      }\n\n      let errorContainer\n      if ($(`.form-error[data-form-id=\"${formId}\"]`).length) {\n        errorContainer = $(`.form-error[data-form-id=\"${formId}\"]`)\n      } else {\n        errorContainer = $('.form-error', element)[0]\n      }\n\n      $(element).validate({\n        errorLabelContainer: $('.error-messages', errorContainer),\n        ignore: '.ignore',\n        showErrors: function(errorMap, errorList) {\n          if (this.numberOfInvalids() === 0) {\n            $('.form-error', currentForm).removeClass('visible')\n            $('li', currentForm).removeClass('error')\n          } else {\n            $('.form-error', currentForm).addClass('visible')\n            $('.form-error > span', currentForm).html('Your form contains ' + this.numberOfInvalids() + ' errors, see highlighted fields below.')\n            this.defaultShowErrors()\n\n            // console.log('errorList', errorList)\n          }\n        },\n        highlight: (element, errorClass, validClass) => {\n          let addErrorClassTo\n\n          if ($(element).parents('.required-input').length >= 1) {\n            addErrorClassTo = $(element).parents('.required-input')\n          } else if ($(element).parent('li').length >= 1) {\n            addErrorClassTo = $(element).parent('li')\n          }\n\n          addErrorClassTo.addClass('error').removeClass(validClass)\n          $(element.form).find(\"label[for=\" + element.id + \"]\").not('.checkbox-label').addClass(errorClass)\n        },\n        unhighlight: (element, errorClass, validClass) => {\n          let addErrorClassTo\n\n          if ($(element).parents('.required-input').length >= 1) {\n            addErrorClassTo = $(element).parents('.required-input')\n          } else if ($(element).parent('li').length >= 1) {\n            addErrorClassTo = $(element).parent('li')\n          }\n\n          addErrorClassTo.removeClass('error').addClass(validClass)\n          $(element.form).find(\"label[for=\" + element.id + \"]\").removeClass(errorClass)\n        },\n        submitHandler: function submitHandler(form) {\n          if ($(form).is('form')) {\n            form.submit()\n          } else {\n            form = $(form).find('form')\n            form.submit()\n          }\n        },\n        rules: {\n          rules: {\n            maxlength: 800,\n          },\n          email: {\n            required: true,\n            email: true,\n          },\n          tel: {\n            maxlength: 15,\n            phoneno: true,\n          },\n          'current-yacht-make': {\n            maxlength: 300,\n          },\n          'current-yacht-model': {\n            maxlength: 300,\n          },\n          postcode: {\n            maxlength: 100,\n          },\n          'oyster-model[]': {\n            required: true,\n          },\n          'models_interested_in[]': {\n            required: true,\n          },\n          captcha: {\n            required: true,\n          },\n          hiddenRecaptcha: {\n            required: () => {\n              if (grecaptcha.getResponse() === '') {\n                return true\n              } else {\n                return false\n              }\n            },\n          },\n        },\n      })\n\n      $('select', element).change(function() {\n        if ($(this).find(':selected').data('available-times')) {\n          console.log($(this).find(':selected').data('available-times'))\n          limitTimesBasedOnDay($(this).find(':selected').data('available-times'))\n        }\n        $(this).valid()\n      })\n\n      function limitTimesBasedOnDay(selectedTimes) {\n        $('#viewing-time').empty()\n        $(\"<option value=''>Select</option>\").appendTo('#viewing-time')\n        $.each(selectedTimes, (key, element) => {\n          const addAsOption = \"<option value='\" + element + \"'>\" + element + \"</option>\"\n          $(addAsOption).appendTo('#viewing-time')\n        })\n      }\n    })\n  }\n}\n","import $ from 'jquery'\nimport 'lightgallery'\nimport 'lightgallery/modules/lg-zoom'\nimport 'lightgallery/modules/lg-pager'\nimport 'lightgallery/modules/lg-thumbnail'\n// import 'lightgallery/modules/lg-share'\nimport 'lightgallery/modules/lg-fullscreen'\nimport 'lightgallery/modules/lg-hash'\n\nimport { addClass, removeClass, hasClass } from '../../_scripts/helper-functions'\nimport BreakPoints from '../../_scripts/breakpoints'\n\nexport default class GalleryModal {\n  constructor(modal, globalHeader) {\n    if (modal) {\n      this.breakpoints = new BreakPoints()\n\n      this.modal = modal\n      this.header = this.modal.querySelector('.galleries__header')\n      this.globalHeader = globalHeader\n      this.closeBtn = this.header.querySelector('.galleries__close')\n      this.footer = this.modal.querySelector('.galleries__footer')\n      this.thumbnailBar = this.modal.querySelector('.galleries__footer')\n      this.gallerySwitchers = this.modal.querySelector('.galleries__nav')\n      this.index = this.modal.querySelector('.galleries__index')\n      this.galleryBtns = this.gallerySwitchers.querySelectorAll('button[data-gallery]')\n\n      this.activeBar = document.querySelector('.galleries__header')\n\n      this.activeThumbnailBar = false\n      this.switchingGaleries = false\n      this.currentGallery = {}\n      this.currentGalleryName = ''\n\n      this.topBarHeight = 0\n\n      this.init()\n    }\n  }\n\n  init() {\n    $('.gallery-content').each((i, el) => {\n      $('.btn-gallery').on('click', (e) => {\n        e.preventDefault()\n        const gallery = $(e.currentTarget).attr('data-gallery')\n        this.currentGalleryName = gallery\n        $(`.gallery-content[data-gallery=\"${gallery}\"] a:first`).trigger('click')\n      })\n\n      // this.setEvents($(el))\n\n      $(el)\n        // .on('onBeforeOpen.lg', () => this.open())\n        .on('onAfterOpen.lg', () => {\n          this.open($(el))\n          this.currentGallery = $(el)\n        })\n        .on('onBeforeClose.lg', () => this.close())\n        .on('onCloseAfter.lg', () => this.afterClose())\n\n      $(el).lightGallery({\n        appendCounterTo: '.galleries__index',\n        backdropDuration: 0,\n        closable: false,\n        galleryId: (i + 1),\n        hash: true,\n        loadVimeoThumbnail: true,\n        share: false,\n        showThumbByDefault: false,\n        thumbContHeight: 136,\n        thumbMargin: 14,\n        thumbnail: true,\n        thumbWidth: 197,\n        toogleThumb: false,\n        videoMaxWidth: '100%',\n        vimeoThumbSize: 'thumbnail_medium',\n        vimeoPlayerParams: {\n          byline: 0,\n          portrait: 0,\n          color: '003145',\n        },\n      })\n    })\n\n    this.globalGalleryEvents()\n  }\n\n  snapPointCheck(reactiveScrollProps) {\n    if (this.activeBar) {\n      const { activeBar } = this\n\n      const lastModuleHeight = [...reactiveScrollProps.topValues].pop()\n      const fixedTopValue = reactiveScrollProps.fixedTopValue - (this.breakpoints.atLeast('medium') ? lastModuleHeight : 0)\n\n      if (fixedTopValue !== this.topBarHeight && this.activeBar) {\n        activeBar.style.transform = `translateY(${fixedTopValue}px)`\n        this.closeBtn.style.transform = !this.breakpoints.atLeast('medium') ? `translateY(-${lastModuleHeight}px)` : ''\n\n        this.topBarHeight = fixedTopValue\n      } else if (fixedTopValue === 0) {\n        this.topBarHeight = 0\n\n        this.closeBtn.style.transform = ''\n        activeBar.style.transform = ''\n      }\n    }\n\n    // return this.fixedHeight\n    // So nothing can go under this\n    return 0\n  }\n\n  globalGalleryEvents() {\n    this.closeBtn.addEventListener('click', () => {\n      this.currentGallery.data('lightGallery').destroy()\n    })\n\n    this.footer.addEventListener('click', () => {\n      // This gets created via the plugin later, so needs to be addressed here.\n      const thumbnailContainer = document.querySelector('.lg-thumb-outer')\n\n      if (this.activeThumbnailBar) {\n        removeClass(thumbnailContainer, 'active')\n        removeClass(this.thumbnailBar, 'galleries__footer--active')\n        this.activeThumbnailBar = false\n      } else {\n        addClass(thumbnailContainer, 'active')\n        addClass(this.thumbnailBar, 'galleries__footer--active')\n        this.activeThumbnailBar = true\n      }\n    })\n\n    $('button[data-gallery]').on('click', (e) => {\n      this.switchingGaleries = true\n      this.currentGalleryName = $(e.target).attr('data-gallery')\n      this.currentGallery.data('lightGallery').destroy()\n    })\n  }\n\n  setEvents($gallery) {\n    const galleryType = $gallery.attr('data-gallery')\n    // const galleryTrigger = this.gallerySwitchers.querySelector(`button[data-gallery=\"${galleryType}\"]`)\n\n    // trigger first slide to open in gallery\n  }\n\n  close() {\n    $(this.index).empty()\n\n    if (!this.switchingGaleries) {\n      this.currentGallery = {}\n      console.log('GalleryModal, close')\n      removeClass(document.body, 'locked')\n      removeClass(this.modal, 'galleries--active')\n      this.globalHeader.fullScreenMode({ on: false })\n    }\n  }\n\n  afterClose() {\n    if (this.switchingGaleries) {\n      $(`.gallery-content[data-gallery=\"${this.currentGalleryName}\"] a:first-child`).click()\n      this.switchingGaleries = false\n    }\n  }\n\n  open($gallery) {\n    const galleryType = $gallery.attr('data-gallery')\n    const activeGalleryBtn = this.gallerySwitchers.querySelector(`button[data-gallery=\"${galleryType}\"]`)\n\n    $(this.galleryBtns).removeClass('button-clear-invert')\n    $(activeGalleryBtn).addClass('button-clear-invert')\n\n    console.log('GalleryModal, open, galleryType: ', galleryType)\n    console.log('$gallery', $gallery)\n\n    $(document.body).addClass('locked')\n    $(this.modal).addClass('galleries--active')\n    this.globalHeader.fullScreenMode()\n  }\n}\n","import { addClass, removeClass } from '../../_scripts/helper-functions'\n\nexport default class GlobalNav {\n  constructor(nav, button, body) {\n    this.body = body\n    this.button = button\n    this.nav = nav\n    this.topBarHeight = 0\n  }\n\n  open() {\n    addClass(this.nav, 'open')\n    addClass(this.body, 'locked')\n    this.nav.style.transform = `translateY(${this.topBarHeight}px)`\n  }\n\n  close() {\n    removeClass(this.nav, 'open')\n    removeClass(this.body, 'locked')\n    this.nav.style.transform = ''\n  }\n\n  snapPointCheck(reactiveScrollProps) {\n    if (this.nav) {\n      const { fixedTopValue } = reactiveScrollProps\n      const { nav } = this\n\n      if (fixedTopValue !== this.topBarHeight) {\n        this.topBarHeight = fixedTopValue\n      } else if (fixedTopValue === 0) {\n        nav.style.transform = ''\n      }\n    }\n\n    return 0\n  }\n}\n","import $ from 'jquery'\n\nimport { addClass, removeClass, hasClass } from '../../_scripts/helper-functions'\nimport BreakPoints from '../../_scripts/breakpoints'\n\nexport default class GlobalHeader {\n  constructor() {\n    this.breakpoints = new BreakPoints()\n\n    this.topBarHeight = 0\n    this.fixedTopValue = 0\n    this.fixedHeight = this.breakpoints.atLeast('medium') ? 70 : 50\n    this.header = document.querySelector('.main-header')\n    this.title = document.querySelector('.main-header__title')\n\n    this.headerDependencies = [\n      this.header,\n      this.header.querySelector('.logo'),\n      this.header.querySelector('.main-header__menu'),\n    ]\n\n    this.largeHeaderActive = true\n\n\n    // this.legacy()\n    // this.snapPointCheck()\n  }\n\n  legacy() {\n\n    // OVVERIDE MOBILE ACCORDION TEXT TO BE LINKS\n    $('#global-navigation-modal a.accordion-title span').on('click', (evt) => {\n      evt.preventDefault()\n      location.href = $(evt.currentTarget).parent().attr('href')\n      return false\n    })\n\n    $('.site-menu').on('click', (e) => {\n      $(e.currentTarget).toggleClass('active-burger')\n    })\n\n    // Toggle follow oyster social buttons\n    const navFooter = $('#global-navigation-modal .nav-footer-modal')\n    const followHeader = $('.global-header .follow')\n\n    $('.nav-footer-modal .follow-btn').on('click', () => {\n      navFooter.addClass('follow-oyster-social-btns')\n    })\n\n    $('.nav-footer-modal .social-links .back-btn').on('click', () => {\n      navFooter.removeClass('follow-oyster-social-btns')\n    })\n\n    $('.global-header .follow-oyster').on('click', () => {\n      followHeader.toggleClass('follow-on')\n    })\n\n    $('.global-header .back-btn').on('click', () => {\n      followHeader.removeClass('follow-on')\n    })\n\n    // close foundation modal\n    $('.global-modals .close-button-wrapper a.site-search-close').on('click', () => {\n      // if a modal is full screen and has the combination of \".close-button-wrapper a.site-search-close\", manually close it\n      $('.global-modals.full').foundation('close')\n    })\n\n    //  ---- GLOBAL MAIN FIXED HEADER SEARCH BAR TOGGLE SEARCH ICON -----  //\n    const siteSearchOpen = $('.global-header-top-nav-large .site-search')\n\n    // site search open\n    siteSearchOpen.on('click', (e) => {\n      e.preventDefault()\n\n      $('.global-header-top-nav-large').toggleClass('search-bar-open')\n\n      if ($('.global-header-top-nav-large').hasClass('search-bar-open')) {\n        $('.search-bar input').focus()\n      }\n    })\n  }\n\n  // snapPointCheck(lastKnownScrollPosition = window.scrollY) {\n  //   return this.styleExpanded(lastKnownScrollPosition)\n  // }\n\n  snapPointCheck(reactiveScrollProps) {\n    const { lastKnownScrollPosition, headerSnapPoint } = reactiveScrollProps\n\n    this.fixedTopValue = reactiveScrollProps.fixedTopValue\n\n    if (lastKnownScrollPosition > headerSnapPoint && this.largeHeaderActive) {\n      this.size()\n    } else if (lastKnownScrollPosition < headerSnapPoint && !this.largeHeaderActive) {\n      this.size(true)\n    }\n\n    this.topPosition()\n\n    return this.fixedHeight\n  }\n\n  size(large) {\n    if (large) {\n      for (let i = 0; i < this.headerDependencies.length; i += 1) {\n        if (this.headerDependencies[i]) {\n          addClass(this.headerDependencies[i], `${this.headerDependencies[i].className.split(' ')[0]}--large`)\n        }\n      }\n      this.topBarHeight = 0\n      // this.header.style.transform = ''\n\n      this.largeHeaderActive = true\n\n      this.fixedHeight = this.breakpoints.atLeast('medium') ? 70 : 50\n    } else {\n      for (let i = 0; i < this.headerDependencies.length; i += 1) {\n        if (this.headerDependencies[i]) {\n          removeClass(this.headerDependencies[i], `${this.headerDependencies[i].className.split(' ')[0]}--large`)\n        }\n      }\n\n      // this.topBarHeight = fixedTopValue\n      this.largeHeaderActive = false\n\n      this.fixedHeight = 50\n    }\n  }\n\n  topPosition() {\n    if (this.fixedTopValue !== this.topBarHeight) {\n      this.header.style.transform = `translateY(${this.fixedTopValue}px)`\n      this.topBarHeight = this.fixedTopValue\n    } else if (this.fixedTopValue === 0) {\n      this.topBarHeight = 0\n\n      this.header.style.transform = ''\n    }\n  }\n\n  fullScreenMode(options) {\n    const config = {\n      on: true,\n      ...options,\n    }\n\n    if (config.on) {\n      addClass(this.header, 'main-header--full-screen')\n      this.size()\n    } else {\n      removeClass(this.header, 'main-header--full-screen')\n      this.size(true)\n    }\n  }\n}\n\n","import $ from 'jquery'\nimport BreakPoints from '../../_scripts/breakpoints'\n\n// PAGINATION BUTTONS CLICK HANDLER FOR SECTIONS 3 AND 4. \\\\\n\nlet nextSlide = 0\nlet previousSlide = null\nlet timeoutName = null\nconst caroselLength = $('.carosel__link').length\n\nconst timeoutManager = (flag, func, time) => {\n  if (flag) {\n    timeoutName = setTimeout(func, time)\n  } else {\n    clearTimeout(timeoutName)\n  }\n}\n\nconst automateSlidshow = () => {\n  timeoutManager(true, () => {\n    $('.carosel__link')[nextSlide].click()\n  }, 7000)\n}\n\nconst handlePaninationButtonClick = (e) => {\n// GET THE INDEX OF THE SLIDE RELATED TO THE PAGINATION LINK CLICKED \\\\\n  const idx = parseInt($(e.currentTarget).attr('data-index'), 10)\n// ADD THE reverse-dash CSS ANIMATION TO THE CURRENTLY ACTIVE PAGINATION BUTTON \\\\\n  $('.carosel__link.active').addClass('reverse-dash')\n// DEACTIVATE THE CURRENTLY ACTIVATED SLIDE AND TEXT \\\\\n  $('.carosel__image-wrap, .text-wrapper').removeClass('active')\n// ACTIVATE THE NEW SLIDE \\\\\n  $(`.carosel__image-wrap[data-index=\"${idx}\"]`).addClass('active')\n// WAIT 0.8 SECONDS FOR THE reverse-dash ANIMATION TO COMPLETE \\\\\n  setTimeout(() => {\n// REMOVE THE ALL ANAMATION CLASSES FROM THE DEACTIVATED PAGINATION LINK \\\\\n    $('.carosel__link').removeClass('active reverse-dash')\n// ACTIVATE THE TEXT IN THE CURRENT SLIDE \\\\\n    $(`.carosel__image-wrap[data-index=\"${idx}\"]`).find('.text-wrapper').addClass('active')\n// ACTIVATE THE CURRENT PAGINATION BUTTON AND ADD THE reverse-dash CSS ANIMATION AFTER THE FIRST ANIMATION COMPLETES \\\\\n    $(`.carosel__link[data-index=\"${idx}\"]`).addClass('active').on('webkitAnimationEnd animationend oanimationend MSAnimationEnd', (el) => {\n      $(el.currentTarget).addClass('reverse-dash')\n    })\n  }, 800)\n}\n\n// SWIPE EVENTS DETECTOR FUNCTION \\\\\nconst detectswipe = (el, func) => {\n  let swipe_det = {}\n  swipe_det.sX = 0\n  swipe_det.sY = 0\n  swipe_det.eX = 0\n  swipe_det.eY = 0\n  let min_x = 30\n  let max_x = 30\n  let min_y = 50\n  let max_y = 60\n  let direc = ''\n  let ele = document.getElementById(el)\n  ele.addEventListener('touchstart', (e) => {\n    let t = e.touches[0]\n    swipe_det.sX = t.screenX\n    swipe_det.sY = t.screenY\n  }, false)\n  ele.addEventListener('touchmove', (e) => {\n    let t = e.touches[0]\n    swipe_det.eX = t.screenX\n    swipe_det.eY = t.screenY\n  }, false)\n  ele.addEventListener('touchend', (e) => {\n// HORIZONTAL DETECTION \\\\\n    if ((((swipe_det.eX - min_x > swipe_det.sX) || (swipe_det.eX + min_x < swipe_det.sX)) && ((swipe_det.eY < swipe_det.sY + max_y) && (swipe_det.sY > swipe_det.eY - max_y) && (swipe_det.eX > 0)))) {\n      if (swipe_det.eX > swipe_det.sX) direc = 'r'\n      else direc = 'l'\n    }\n// VERTICAL DETECTION \\\\\n    else if ((((swipe_det.eY - min_y > swipe_det.sY) || (swipe_det.eY + min_y < swipe_det.sY)) && ((swipe_det.eX < swipe_det.sX + max_x) && (swipe_det.sX > swipe_det.eX - max_x) && (swipe_det.eY > 0)))) {\n      if (swipe_det.eY > swipe_det.sY) direc = 'd'\n      else direc = 'u'\n    }\n\n    if (direc !== '') {\n      if (typeof func === 'function') func(direc)\n    }\n\n    swipe_det.sX = 0\n    swipe_det.sY = 0\n    swipe_det.eX = 0\n    swipe_det.eY = 0\n  }, false)\n}\n\n// CLICK THE RELEVANT SLIDE PAGINATION BUTTON ON SWIPE \\\\\n\nconst swipeController = (direction) => {\n  if (direction === 'l') {\n    $('.carosel__link')[previousSlide].click()\n  }\n  if (direction === 'r') {\n    $('.carosel__link')[nextSlide].click()\n  }\n}\n\nexport default class Homepage {\n  constructor() {\n    this.breakpoints = new BreakPoints()\n// ADD click  EVENT LISTENER TO THE PAGINATION BUTTONS \\\\\n    $('.carosel__link').click((e) => {\n      if (!$(e.currentTarget).hasClass('active')) {\n        const currentSlide = parseInt($(e.currentTarget).attr('data-index'), 10)\n// SET THE nextSlide TO 0 IF currentSlide IS THE LAST SLIDE \\\\\n        if (currentSlide === caroselLength - 1) {\n          nextSlide = 0\n          previousSlide = currentSlide - 1\n        }\n// INCREMENT NEXT nextSlide IF currentSlide IS NOT THE LAST SLIDE \\\\\n        if (currentSlide < caroselLength - 1) {\n          nextSlide = currentSlide + 1\n\n          if (currentSlide === 0) {\n            previousSlide = caroselLength - 1\n          } else {\n            previousSlide = currentSlide - 1\n          }\n        }\n// CLEAR ANY EXISTING TIMEOUTS \\\\\n        timeoutManager(false)\n// AUTOMATE THE CAROSEL AFTER 7 SECONDS (ONCE THE FIRST SLIDE ANIMATION COMPLETES) \\\\\n        automateSlidshow()\n// CALL THE CLICK HANDLER \\\\\n        handlePaninationButtonClick(e)\n      }\n    })\n// click() THE FIRST PAGINATION BUTTON ON LOAD TO SHOW THE FIRST SLIDE \\\\\n    $('.carosel__link')[nextSlide].click()\n// INITIATE SWIPE DETECTION ON HOMEPAGE \\\\\n    detectswipe('homepage', swipeController)\n  }\n}\n","import $ from 'jquery'\n\nimport FormValidation from '../form-validation/form-validation'\n\nexport default class OwnersArea {\n  constructor() {\n    this.init()\n    this.checkForTabs()\n  }\n\n  init() {\n    $('.owners-area-text').on('click', (event) => {\n      event.preventDefault()\n      if ($('#login-page').length !== 0) {\n        $('#login-page').foundation('open')\n      } else {\n        $.ajax('/owners-area/login').done((resp) => {\n          $('body').prepend(resp)\n          $('#login-page').foundation()\n          $('select').select2({ minimumResultsForSearch: -1 })\n          new FormValidation()\n          $('#login-page').foundation('open')\n\n          this.slidingTabs()\n\n          $('#login-page .close-button, #login-page [data-close=\"data-close\"]').on('click', () => {\n            $('#login-page').foundation('close')\n          })\n        })\n      }\n    })\n  }\n\n  checkForTabs() {\n    if ($('.sliding-tabs').length >= 1) {\n      this.slidingTabs()\n      $('.sliding-tabs').each((index, element) => {\n        this.slidingTabs(element)\n      })\n    }\n  }\n\n  slidingTabs(tabSet) {\n    const tabs = $(tabSet).find('li')\n    const numOfTabs = $(tabs).length\n    const tabWidth = 100 / numOfTabs + '%'\n    const tabContainer = $(tabSet).find('.tab-slider-container')\n    const tabSlider = $(tabSet).find('.tab-slider')\n\n    let positionUnderTab\n    let firstPositionUnderTab\n\n    $(tabSlider).css({ width: '' })\n    $(tabContainer).css({ width: '' })\n    $(tabSet).find('ul').css({ width: '' })\n\n    $(tabSlider).css({ width: tabWidth })\n    $(tabContainer).css({ width: $(tabs).width() * $(tabs).length })\n    $(tabSet).find('ul').css({ width: $(tabs).width() * $(tabs).length })\n\n    $(tabs).each((index, element) => {\n      positionUnderTab = `${100 * index}%`\n      $(element).data('transform-pos', positionUnderTab)\n      if ($(element).hasClass('is-active')) {\n        if (index !== 0) {\n          firstPositionUnderTab = positionUnderTab\n        } else {\n          firstPositionUnderTab = '0%'\n        }\n      }\n    })\n\n    $(tabSlider).css({ transform: `translateX(${firstPositionUnderTab})` })\n\n    $(tabs).on('click', (e) => {\n      const clickedTab = e.currentTarget\n      const moveHere = $(clickedTab).data('transform-pos')\n      $(tabSlider).css({ transform: `translateX(${moveHere})` })\n      $(clickedTab).data('transform-pos')\n    })\n  }\n}\n","import $ from 'jquery'\nimport 'jquery.cycle2'\n\nexport function quoteTestimonials() {\n  $('.quote-testimonials').cycle({\n    autoHeight: 'calc',\n    pager: '.nav-points',\n    pagerActiveClass: 'active',\n    pagerTemplate: '<div class=\"nav-point\"></div>',\n    slides: '> blockquote',\n    log: false,\n    timeout: 4000,\n  })\n}\n","import $ from 'jquery'\n\nexport default class Shortlist {\n  constructor() {\n    this.init()\n  }\n\n  init() {\n    //  ---- SHORTLIST LOGIC -----  //\n\n    let shortlistYachts = []\n\n    function removeNowClosedYachts() {\n      $.each(shortlistYachts, (key, yachtOnList) => {\n        console.log($.inArray(yachtOnList.yachtid, currentYachts))\n        if ($.inArray(yachtOnList.yachtid, currentYachts) === -1) {\n          removeFromList(yachtOnList.yachtid)\n        }\n      })\n    }\n\n    // Pull the info, check it and put it in the object if it's not already\n    function addToShortlist(item) {\n      let yachtContainer = $(item).parents('[data-yachtid]')\n\n      if (yachtContainer.length < 1) {\n        yachtContainer = $('[data-yachtid]')\n      }\n\n      var yachtId = $(yachtContainer).data('yachtid'),\n        yachtImage = yachtContainer[0].querySelector('.yacht-listing-photo'),\n        yachtModal = $(yachtContainer).find('.yacht-list-modal').eq(0).text(),\n        yachtName = $(yachtContainer).find('.yacht-list-name').eq(0).text(),\n        yachtSection = $(yachtContainer).data('yachtsection'),\n        yachtSpec = $(yachtContainer).data('spec')\n\n      if ($(' > img', yachtImage).length > 0) {\n        yachtImage = $(' > img', yachtImage)[0].currentSrc\n      } else {\n        yachtImage = ripBgUrl(yachtImage)\n      }\n\n      if (yachtImage === undefined) {\n        yachtImage = yachtContainer[0].querySelector('.yacht-listing-photo img').src\n      }\n\n      checkIfYachtShortlist(yachtId, yachtImage, yachtModal, yachtName, yachtSection, yachtSpec)\n      // Now add the items emptied from the DOM onto the list\n      displayOnShortlist()\n\n      // console.log('yachtImage src', yachtImage)\n    }\n\n    function checkIfYachtShortlist(yachtId, yachtImage, yachtModal, yachtName, yachtSection, yachtSpec) {\n      // console.log('checkIfYachtShortlist, shortlistYachts: ' , shortlistYachts)\n\n      // Check if this yacht is on the shortlist already\n      const shortlistCheck = $.grep(shortlistYachts, e => e.yachtid === yachtId)\n\n      if (shortlistCheck.length) {\n        // This is already on the shortlist\n      } else {\n        // Push the yacht details into the shortlist array.\n        // Now push it to the dom.\n        shortlistYachts.push({\n          yachtId,\n          yachtImage,\n          yachtModal,\n          yachtName,\n          yachtSection,\n          yachtSpec,\n        })\n      }\n    }\n\n    function ripBgUrl(container) {\n      const bgCss = $(container).css('background-image')\n      return bgCss.replace('url(', '').replace(')', '').replace(/['\"]+/g, '')\n    }\n\n    // Display the yachts saved in the shortlist array into a list in the DOM\n    function displayOnShortlist() {\n      // Empty what might be there\n      $('#shortlistModal .yachts-shortlist').empty()\n\n      // console.log('shortlistYachts', shortlistYachts)\n\n      $.each(shortlistYachts, (key, yachtOnList) => {\n        console.log('yachtOnList', yachtOnList)\n        const { yachtId, yachtImage, yachtModal, yachtName, yachtSection } = yachtOnList\n        // Check if the yacht image is defined, if not, remove the yacht..\n        const yachtImage2 = yachtImage.toString().replace('__blur', '')\n        const backgroundImage = `<div class=\"yacht-listing-photo\" style=\"background-image: url(${yachtImage2})\"></div>`\n        const removeButton = '<button class=\"remove-button\"></button>'\n        const completeYachtList = '<li class=\"column medium-6 small-12\"><div data-yachtid=' + yachtId + ' data-yachtsection=' + yachtSection + ' class=\"yacht-list-item\"><a href=\"\">' + backgroundImage + '<div class=\"yacht-listing-title\"><span class=\"yacht-list-modal\">' + yachtModal + '</span><span class=\"yacht-list-name double-slash\">' + yachtName + '</span></div></a>' + removeButton + '</div></li>'\n        $('#shortlistModal .yachts-shortlist').append(completeYachtList)\n      })\n\n      addYachtsToFreeform()\n      toggleEmptyShortlistMessage(shortlistYachts)\n      enableRemoveFromList()\n      window.lazySizesConfig = window.lazySizesConfig || {}\n    }\n\n\n    function addYachtsToFreeform() {\n      console.log(shortlistYachts)\n      // alert('hello')\n      // Remove all existing images from the shortlist form\n      $('.ff_yacht_image,.ff_yacht_name,.ff_yacht_link,.ff_yacht_spec').remove()\n\n      let shortListCounter = 0\n\n      $.each(shortlistYachts, (key, yachtOnList) => {\n        const yachtImage = yachtOnList.yachtImage.toString().replace('__blur', '')\n\n        // Add to shortlist form\n        $('<input>').attr({\n          type: 'hidden',\n          id: 'yacht_image_' + shortListCounter,\n          name: 'yacht_image_' + shortListCounter,\n          value: yachtImage,\n          class: 'ff_yacht_image',\n        }).appendTo('#spec-form')\n\n        $('<input>').attr({\n          type: 'hidden',\n          id: 'yacht_name_' + shortListCounter,\n          name: 'yacht_name_' + shortListCounter,\n          value: yachtOnList.yachtmodal + ' // ' + yachtOnList.name,\n          class: 'ff_yacht_name',\n        }).appendTo('#spec-form')\n\n        $('<input>').attr({\n          type: 'hidden',\n          id: 'yacht_link_' + shortListCounter,\n          name: 'yacht_link_' + shortListCounter,\n          value: 'http://' + window.location.hostname + '/brokerage/fleet/' + yachtOnList.yachtid,\n          class: 'ff_yacht_link',\n        }).appendTo('#spec-form')\n\n        $('<input>').attr({\n          type: 'hidden',\n          id: 'yacht_spec_' + shortListCounter,\n          name: 'yacht_spec_' + shortListCounter,\n          value: yachtOnList.yachtSpec,\n          class: 'ff_yacht_spec',\n        }).appendTo('#spec-form')\n\n        shortListCounter++\n      })\n    }\n\n    function enableRemoveFromList() {\n      $('.yachts-shortlist').on('click', '.remove-button', function(e) {\n        e.preventDefault()\n        const yachtToRemoveId = $(this).parents('[data-yachtid]').data('yachtid')\n        removeFromList(yachtToRemoveId)\n      })\n    }\n\n    function removeFromList(yachtToRemoveId) {\n      const yachtToRemove = $('.yachts-shortlist [data-yachtid=\"' + yachtToRemoveId + '\"]')\n\n      const refinedList = $.grep(shortlistYachts, e => e.yachtid !== yachtToRemoveId)\n\n      shortlistYachts = refinedList\n\n      localStorage.setItem('localShortlist', JSON.stringify(shortlistYachts))\n\n      toggleEmptyShortlistMessage(shortlistYachts)\n\n      console.log('yachtToRemove', yachtToRemove)\n\n      $(yachtToRemove).parent('.column').css('display', 'none')\n      // $(yachtToRemove).parent().html('test')\n      addYachtsToFreeform()\n    }\n\n    function toggleEmptyShortlistMessage(shortlistYachts) {\n      const shortlistCont = 'user-shortlist'\n      const hiddenClass = '--hide-message'\n      const el = document.getElementsByClassName(shortlistCont)[0]\n      const requestBtn = document.querySelector('#shortlistModal .request-spec-button')\n\n      if (shortlistYachts.length === 0) {\n        el.classList.remove(shortlistCont + hiddenClass)\n\n        requestBtn.setAttribute('disabled', 'true')\n        requestBtn.style.opacity = 0.1\n      } else {\n        el.classList.add(shortlistCont + hiddenClass)\n\n        requestBtn.removeAttribute('disabled')\n        requestBtn.style.opacity = 1\n      }\n    }\n\n    $('.add-to-shortlist').on('click', (e) => {\n      const chosenYacht = e.currentTarget\n      const localStorageSl = JSON.parse(localStorage.getItem('localShortlist'))\n      // Is there a local storage list?\n\n      if (localStorageSl != null && localStorageSl.length > 0) {\n        shortlistYachts = localStorageSl\n\n        if (typeof currentYachts !== 'undefined') {\n          removeNowClosedYachts()\n        }\n      }\n\n      addToShortlist(chosenYacht)\n\n      if ($(shortlistYachts).length > 0) {\n        localStorage.setItem('localShortlist', JSON.stringify(shortlistYachts))\n      }\n    })\n  }\n}\n","import { addClass, removeClass, getElemDistance } from '../../_scripts/helper-functions'\nimport BreakPoints from '../../_scripts/breakpoints'\n\nexport default class SubBar {\n  constructor(element) {\n    this.filterBar = element\n\n    this.activeBar = false\n\n    this.topBarHeight = 0\n    this.fixedHeight = 0\n\n    if (this.filterBar) {\n      this.fetchSizes()\n      this.distFromTop = getElemDistance(this.filterBar)\n    }\n  }\n\n  fetchSizes() {\n    this.fixedHeight = this.filterBar.getBoundingClientRect().height\n  }\n\n  snapPointCheck(reactiveScrollProps) {\n    if (this.filterBar) {\n      const {\n        lastKnownScrollPosition,\n        fixedTopValue,\n        headerSnapPoint,\n      } = reactiveScrollProps\n\n      const { filterBar } = this\n\n      if (lastKnownScrollPosition > headerSnapPoint && !this.activeBar) {\n        removeClass(filterBar, `${filterBar.className.split(' ')[0]}--large`)\n\n        this.activeBar = true\n      } else if (lastKnownScrollPosition < headerSnapPoint && this.activeBar) {\n        addClass(filterBar, `${filterBar.className.split(' ')[0]}--large`)\n\n        this.activeBar = false\n\n        // this.topBarHeight = 0\n        // filterBar.style.transform = ''\n\n        this.fixedHeight = filterBar.getBoundingClientRect().height\n      }\n\n      if (fixedTopValue !== this.topBarHeight) {\n        filterBar.style.transform = `translateY(${fixedTopValue}px)`\n        this.topBarHeight = fixedTopValue\n      } else if (fixedTopValue === 0) {\n        this.topBarHeight = 0\n\n        filterBar.style.transform = ''\n      }\n    }\n\n    return this.fixedHeight\n  }\n}\n","import $ from 'jquery'\n\nimport { addClass, removeClass, getElemDistance } from '../../_scripts/helper-functions'\nimport BreakPoints from '../../_scripts/breakpoints'\n\nexport default class TopMessageBar {\n  constructor(element, reposistion) {\n    this.filterBar = element\n\n    this.activeBar = true\n    this.stickyBar = false\n\n    this.topBarHeight = 0\n    this.fixedHeight = 0\n\n    if (this.filterBar) {\n      this.fetchSizes()\n      this.distFromTop = getElemDistance(this.filterBar)\n      this.cookieMessage(reposistion)\n    }\n  }\n\n  fetchSizes() {\n    this.fixedHeight = $(this.filterBar).outerHeight(true)\n  }\n\n  snapPointCheck(reactiveScrollProps) {\n    if (this.filterBar) {\n      const { filterBar } = this\n\n      if (reactiveScrollProps.fixedTopValue !== this.topBarHeight && this.activeBar) {\n        filterBar.style.transform = `translateY(${reactiveScrollProps.fixedTopValue}px)`\n        this.topBarHeight = reactiveScrollProps.fixedTopValue\n      } else if (reactiveScrollProps.fixedTopValue === 0) {\n        this.topBarHeight = 0\n\n        filterBar.style.transform = ''\n      }\n    }\n\n    return this.activeBar ? this.fixedHeight : 0\n  }\n\n  cookieMessage(reposistion) {\n    const retrievedCookieMessage = JSON.parse(localStorage.getItem('oysterYachtsCookie'))\n    const oysterYachtsCookie = { value: JSON.stringify('true'), timestamp: new Date().getTime() + 31556926000 }\n\n    if ($(retrievedCookieMessage).length > 0) {\n      if (retrievedCookieMessage.timestamp < new Date().getTime()) {\n        // expired\n        this.activeBar = true\n        $('body').addClass('fixed-message-showing')\n      } else {\n        this.activeBar = false\n        $('body').removeClass('fixed-message-showing')\n      }\n    } else {\n      this.activeBar = true\n      $('body').addClass('fixed-message-showing')\n    }\n\n\n    $('.accept-message').on('click', () => {\n      this.activeBar = false\n      reposistion()\n      $('body').removeClass('fixed-message-showing')\n      // cookieMessage = 'true'\n      localStorage.setItem('oysterYachtsCookie', JSON.stringify(oysterYachtsCookie))\n    })\n  }\n}\n","export const climateMonths = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n]\n\nexport const averageClimate = {\n  britishVirginIslands: {\n    January: { AvgTemp: '25', Rainfall: '74.2' },\n    February: { AvgTemp: '25', Rainfall: '63.2' },\n    March: { AvgTemp: '25', Rainfall: '55.4' },\n    April: { AvgTemp: '26', Rainfall: '84.6' },\n    May: { AvgTemp: '27', Rainfall: '116.6' },\n    June: { AvgTemp: '27.5', Rainfall: '70.6' },\n    July: { AvgTemp: '28', Rainfall: '83.1' },\n    August: { AvgTemp: '28', Rainfall: '112' },\n    September: { AvgTemp: '28', Rainfall: '156' },\n    October: { AvgTemp: '27.5', Rainfall: '133.4' },\n    November: { AvgTemp: '27', Rainfall: '176.8' },\n    December: { AvgTemp: '25.5', Rainfall: '112' },\n  },\n  leewardIslands: {\n    January: { AvgTemp: '26', Rainfall: '470' },\n    February: { AvgTemp: '26', Rainfall: '260' },\n    March: { AvgTemp: '26', Rainfall: '120' },\n    April: { AvgTemp: '26', Rainfall: '210' },\n    May: { AvgTemp: '26', Rainfall: '30' },\n    June: { AvgTemp: '25', Rainfall: '40' },\n    July: { AvgTemp: '24', Rainfall: '200' },\n    August: { AvgTemp: '25', Rainfall: '50' },\n    September: { AvgTemp: '25', Rainfall: '190' },\n    October: { AvgTemp: '26', Rainfall: '60' },\n    November: { AvgTemp: '26', Rainfall: '180' },\n    December: { AvgTemp: '26', Rainfall: '390' },\n  },\n  windwardIslands: {\n    January: { AvgTemp: '27', Rainfall: '300' },\n    February: { AvgTemp: '27', Rainfall: '230' },\n    March: { AvgTemp: '27', Rainfall: '170' },\n    April: { AvgTemp: '27', Rainfall: '130' },\n    May: { AvgTemp: '26', Rainfall: '100' },\n    June: { AvgTemp: '25', Rainfall: '60' },\n    July: { AvgTemp: '25', Rainfall: '50' },\n    August: { AvgTemp: '24', Rainfall: '40' },\n    September: { AvgTemp: '25', Rainfall: '60' },\n    October: { AvgTemp: '25', Rainfall: '80' },\n    November: { AvgTemp: '25', Rainfall: '150' },\n    December: { AvgTemp: '26', Rainfall: '260' },\n  },\n  westMediterranean: {\n    January: { AvgTemp: '12.5', Rainfall: '71.6' },\n    February: { AvgTemp: '12.6', Rainfall: '65.4' },\n    March: { AvgTemp: '13.5', Rainfall: '59.5' },\n    April: { AvgTemp: '15.7', Rainfall: '44.1' },\n    May: { AvgTemp: '18.9', Rainfall: '25.5' },\n    June: { AvgTemp: '22.4', Rainfall: '12.2' },\n    July: { AvgTemp: '25.6', Rainfall: '5.1' },\n    August: { AvgTemp: '26.2', Rainfall: '13.3' },\n    September: { AvgTemp: '24.1', Rainfall: '41.5' },\n    October: { AvgTemp: '20.4', Rainfall: '98' },\n    November: { AvgTemp: '16.8', Rainfall: '94.3' },\n    December: { AvgTemp: '13.8', Rainfall: '80' },\n  },\n  eastMediterranean: {\n    January: { AvgTemp: '7', Rainfall: '139' },\n    February: { AvgTemp: '8', Rainfall: '125' },\n    March: { AvgTemp: '10', Rainfall: '104' },\n    April: { AvgTemp: '13', Rainfall: '104' },\n    May: { AvgTemp: '17', Rainfall: '75' },\n    June: { AvgTemp: '21', Rainfall: '48' },\n    July: { AvgTemp: '24', Rainfall: '26' },\n    August: { AvgTemp: '24', Rainfall: '38' },\n    September: { AvgTemp: '21', Rainfall: '101' },\n    October: { AvgTemp: '17', Rainfall: '162' },\n    November: { AvgTemp: '12', Rainfall: '198' },\n    December: { AvgTemp: '9', Rainfall: '178' },\n  },\n  maine: {\n    January: { AvgTemp: '-5.5', Rainfall: '95' },\n    February: { AvgTemp: '-4.4', Rainfall: '92' },\n    March: { AvgTemp: '0.4', Rainfall: '102' },\n    April: { AvgTemp: '6.2', Rainfall: '102' },\n    May: { AvgTemp: '11.8', Rainfall: '90' },\n    June: { AvgTemp: '17.1', Rainfall: '86' },\n    July: { AvgTemp: '20.3', Rainfall: '78' },\n    August: { AvgTemp: '19.6', Rainfall: '73' },\n    September: { AvgTemp: '15.3', Rainfall: '85' },\n    October: { AvgTemp: '9.5', Rainfall: '98' },\n    November: { AvgTemp: '3.9', Rainfall: '115' },\n    December: { AvgTemp: '-2.7', Rainfall: '105' },\n  },\n  newport: {\n    January: { AvgTemp: '-0.7', Rainfall: '94' },\n    February: { AvgTemp: '0.2', Rainfall: '88.9' },\n    March: { AvgTemp: '3.5', Rainfall: '137.2' },\n    April: { AvgTemp: '8.3', Rainfall: '116.8' },\n    May: { AvgTemp: '13.4', Rainfall: '91.4' },\n    June: { AvgTemp: '18.5', Rainfall: '88.9' },\n    July: { AvgTemp: '21.9', Rainfall: '86.4' },\n    August: { AvgTemp: '21.7', Rainfall: '96.5' },\n    September: { AvgTemp: '18.5', Rainfall: '101.6' },\n    October: { AvgTemp: '12.8', Rainfall: '104.1' },\n    November: { AvgTemp: '7.8', Rainfall: '114.3' },\n    December: { AvgTemp: '2.4', Rainfall: '111.8' },\n  },\n}\n","// Taken from here: http://codepen.io/juan/pen/eDwKo\n\nexport const weatherIcon = {\n  Sun: \"<svg version='1.1' id='sun' class='climacon climacon_sun' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'    x='0px'    y='0px'    viewBox='15 15 70 70'    enable-background='new 15 15 70 70'    xml:space='preserve'> <clipPath id='sunFillClip'> <path d='M0,0v100h100V0H0z M50.001,57.999c-4.417,0-8-3.582-8-7.999c0-4.418,3.582-7.999,8-7.999s7.998,3.581,7.998,7.999C57.999,54.417,54.418,57.999,50.001,57.999z'        />    </clipPath>    <g class='climacon_iconWrap climacon_iconWrap-sun'>        <g class='climacon_componentWrap climacon_componentWrap-sun'>            <g class='climacon_componentWrap climacon_componentWrap-sunSpoke'>                <path                class='climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-east'                d='M72.03,51.999h-3.998c-1.105,0-2-0.896-2-1.999s0.895-2,2-2h3.998c1.104,0,2,0.896,2,2S73.136,51.999,72.03,51.999z'                />                <path                class='climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-northEast'                d='M64.175,38.688c-0.781,0.781-2.049,0.781-2.828,0c-0.781-0.781-0.781-2.047,0-2.828l2.828-2.828c0.779-0.781,2.047-0.781,2.828,0c0.779,0.781,0.779,2.047,0,2.828L64.175,38.688z'                />                <path                class='climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north'                d='M50.034,34.002c-1.105,0-2-0.896-2-2v-3.999c0-1.104,0.895-2,2-2c1.104,0,2,0.896,2,2v3.999C52.034,33.106,51.136,34.002,50.034,34.002z'                />                <path                class='climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-northWest'                d='M35.893,38.688l-2.827-2.828c-0.781-0.781-0.781-2.047,0-2.828c0.78-0.781,2.047-0.781,2.827,0l2.827,2.828c0.781,0.781,0.781,2.047,0,2.828C37.94,39.469,36.674,39.469,35.893,38.688z'                />                <path                class='climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-west'                d='M34.034,50c0,1.104-0.896,1.999-2,1.999h-4c-1.104,0-1.998-0.896-1.998-1.999s0.896-2,1.998-2h4C33.14,48,34.034,48.896,34.034,50z'                />                <path                class='climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-southWest'                d='M35.893,61.312c0.781-0.78,2.048-0.78,2.827,0c0.781,0.78,0.781,2.047,0,2.828l-2.827,2.827c-0.78,0.781-2.047,0.781-2.827,0c-0.781-0.78-0.781-2.047,0-2.827L35.893,61.312z'                />                <path                class='climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-south'                d='M50.034,65.998c1.104,0,2,0.895,2,1.999v4c0,1.104-0.896,2-2,2c-1.105,0-2-0.896-2-2v-4C48.034,66.893,48.929,65.998,50.034,65.998z'                />                <path                class='climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-southEast'                d='M64.175,61.312l2.828,2.828c0.779,0.78,0.779,2.047,0,2.827c-0.781,0.781-2.049,0.781-2.828,0l-2.828-2.827c-0.781-0.781-0.781-2.048,0-2.828C62.126,60.531,63.392,60.531,64.175,61.312z'                />            </g>            <g class='climacon_componentWrap climacon_componentWrap_sunBody' clip-path='url(#sunFillClip)'>                <circle                class='climacon_component climacon_component-stroke climacon_component-stroke_sunBody'                cx='50.034'                cy='50'                r='11.999'                />            </g>        </g>    </g></svg>\",\n  Moon: '<svg version=\"1.1\" id=\"moon\" class=\"climacon climacon_moon\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"    x=\"0px\"    y=\"0px\"    viewBox=\"15 15 70 70\"    enable-background=\"new 15 15 70 70\"    xml:space=\"preserve\"> <clipPath id=\"moonFillClip\"> <path d=\"M15,15v70h70V15H15z M50,57.999c-4.418,0-7.999-3.582-7.999-7.999c0-3.803,2.655-6.979,6.211-7.792c0.903,4.854,4.726,8.676,9.579,9.58C56.979,55.344,53.802,57.999,50,57.999z\"/>    </clipPath>    <g class=\"climacon_iconWrap climacon_iconWrap-moon\">        <g class=\"climacon_componentWrap climacon_componentWrap-moon\" clip-path=\"url(#moonFillClip)\">            <path            class=\"climacon_component climacon_component-stroke climacon_component-stroke_moon\"            d=\"M50,61.998c-6.627,0-11.999-5.372-11.999-11.998c0-6.627,5.372-11.999,11.999-11.999c0.755,0,1.491,0.078,2.207,0.212c-0.132,0.576-0.208,1.173-0.208,1.788c0,4.418,3.582,7.999,8,7.999c0.614,0,1.212-0.076,1.788-0.208c0.133,0.717,0.211,1.452,0.211,2.208C61.998,56.626,56.626,61.998,50,61.998z\"/>        </g>    </g></svg>',\n  Clouds: '<svg version=\"1.1\" id=\"cloud\" class=\"climacon climacon_cloud\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\"> <clipPath id=\"cloudFillClip\"> <path d=\"M15,15v70h70V15H15z M59.943,61.639c-3.02,0-12.381,0-15.999,0c-6.626,0-11.998-5.371-11.998-11.998c0-6.627,5.372-11.999,11.998-11.999c5.691,0,10.434,3.974,11.665,9.29c1.252-0.81,2.733-1.291,4.334-1.291c4.418,0,8,3.582,8,8C67.943,58.057,64.361,61.639,59.943,61.639z\"/> </clipPath> <g class=\"climacon_iconWrap climacon_iconWrap-cloud\"> <g class=\"climacon_componentWrap climacon_componentWrap_cloud\" clip-path=\"url(#cloudFillClip)\">  <path  class=\"climacon_component climacon_component-stroke climacon_component-stroke_cloud\"  d=\"M43.945,65.639c-8.835,0-15.998-7.162-15.998-15.998c0-8.836,7.163-15.998,15.998-15.998c6.004,0,11.229,3.312,13.965,8.203c0.664-0.113,1.338-0.205,2.033-0.205c6.627,0,11.998,5.373,11.998,12c0,6.625-5.371,11.998-11.998,11.998C57.168,65.639,47.143,65.639,43.945,65.639z\"/> </g> </g></svg>',\n  CloudsDay: '<svg version=\"1.1\" id=\"cloudSun\" class=\"climacon climacon_cloudSun\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\"> <clipPath id=\"cloudFillClip\"> <path d=\"M15,15v70h70V15H15z M59.943,61.639c-3.02,0-12.381,0-15.999,0c-6.626,0-11.998-5.371-11.998-11.998c0-6.627,5.372-11.999,11.998-11.999c5.691,0,10.434,3.974,11.665,9.29c1.252-0.81,2.733-1.291,4.334-1.291c4.418,0,8,3.582,8,8C67.943,58.057,64.361,61.639,59.943,61.639z\"></path> </clipPath> <clipPath id=\"sunCloudFillClip\"> <path d=\"M15,15v70h70V15H15z M57.945,49.641c-4.417,0-8-3.582-8-7.999c0-4.418,3.582-7.999,8-7.999s7.998,3.581,7.998,7.999C65.943,46.059,62.362,49.641,57.945,49.641z\"></path> </clipPath> <g class=\"climacon_iconWrap climacon_cloudSun-iconWrap\"> <g clip-path=\"url(#cloudFillClip)\"> <g class=\"climacon_componentWrap climacon_componentWrap-sun climacon_componentWrap-sun_cloud\"> <g class=\"climacon_componentWrap climacon_componentWrap_sunSpoke\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-orth\" d=\"M80.029,43.611h-3.998c-1.105,0-2-0.896-2-1.999s0.895-2,2-2h3.998c1.104,0,2,0.896,2,2S81.135,43.611,80.029,43.611z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M72.174,30.3c-0.781,0.781-2.049,0.781-2.828,0c-0.781-0.781-0.781-2.047,0-2.828l2.828-2.828c0.779-0.781,2.047-0.781,2.828,0c0.779,0.781,0.779,2.047,0,2.828L72.174,30.3z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M58.033,25.614c-1.105,0-2-0.896-2-2v-3.999c0-1.104,0.895-2,2-2c1.104,0,2,0.896,2,2v3.999C60.033,24.718,59.135,25.614,58.033,25.614z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M43.892,30.3l-2.827-2.828c-0.781-0.781-0.781-2.047,0-2.828c0.78-0.781,2.047-0.781,2.827,0l2.827,2.828c0.781,0.781,0.781,2.047,0,2.828C45.939,31.081,44.673,31.081,43.892,30.3z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M42.033,41.612c0,1.104-0.896,1.999-2,1.999h-4c-1.104,0-1.998-0.896-1.998-1.999s0.896-2,1.998-2h4C41.139,39.612,42.033,40.509,42.033,41.612z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M43.892,52.925c0.781-0.78,2.048-0.78,2.827,0c0.781,0.78,0.781,2.047,0,2.828l-2.827,2.827c-0.78,0.781-2.047,0.781-2.827,0c-0.781-0.78-0.781-2.047,0-2.827L43.892,52.925z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M58.033,57.61c1.104,0,2,0.895,2,1.999v4c0,1.104-0.896,2-2,2c-1.105,0-2-0.896-2-2v-4C56.033,58.505,56.928,57.61,58.033,57.61z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M72.174,52.925l2.828,2.828c0.779,0.78,0.779,2.047,0,2.827c-0.781,0.781-2.049,0.781-2.828,0l-2.828-2.827c-0.781-0.781-0.781-2.048,0-2.828C70.125,52.144,71.391,52.144,72.174,52.925z\"></path> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-sunBody\" clip-path=\"url(#sunCloudFillClip)\"> <circle class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunBody\" cx=\"58.033\" cy=\"41.612\" r=\"11.999\"></circle> </g> </g> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-cloud\" clip-path=\"url(#cloudFillClip)\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_cloud\" d=\"M44.033,65.641c-8.836,0-15.999-7.162-15.999-15.998c0-8.835,7.163-15.998,15.999-15.998c6.006,0,11.233,3.312,13.969,8.203c0.664-0.113,1.338-0.205,2.033-0.205c6.627,0,11.998,5.373,11.998,12c0,6.625-5.371,11.998-11.998,11.998C57.26,65.641,47.23,65.641,44.033,65.641z\"></path> </g> </g> </svg>',\n  CloudsNight: '<svg version=\"1.1\" id=\"cloudMoon\" class=\"climacon climacon_cloudMoon\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\"> <clipPath id=\"cloudFillClip\"> <path d=\"M15,15v70h70V15H15z M59.943,61.639c-3.02,0-12.381,0-15.999,0c-6.626,0-11.998-5.371-11.998-11.998c0-6.627,5.372-11.999,11.998-11.999c5.691,0,10.434,3.974,11.665,9.29c1.252-0.81,2.733-1.291,4.334-1.291c4.418,0,8,3.582,8,8C67.943,58.057,64.361,61.639,59.943,61.639z\"></path> </clipPath> <clipPath id=\"moonCloudFillClip\"> <path d=\"M0,0v100h100V0H0z M60.943,46.641c-4.418,0-7.999-3.582-7.999-7.999c0-3.803,2.655-6.979,6.211-7.792c0.903,4.854,4.726,8.676,9.579,9.58C67.922,43.986,64.745,46.641,60.943,46.641z\"></path> </clipPath> <g class=\"climacon_iconWrap climacon_iconWrap-cloudMoon\"> <g clip-path=\"url(#cloudFillClip)\"> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-moon climacon_componentWrap-moon_cloud\" clip-path=\"url(#moonCloudFillClip)\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_moon\" d=\"M61.023,50.641c-6.627,0-11.999-5.372-11.999-11.998c0-6.627,5.372-11.999,11.999-11.999c0.755,0,1.491,0.078,2.207,0.212c-0.132,0.576-0.208,1.173-0.208,1.788c0,4.418,3.582,7.999,8,7.999c0.614,0,1.212-0.076,1.788-0.208c0.133,0.717,0.211,1.452,0.211,2.208C73.021,45.269,67.649,50.641,61.023,50.641z\"></path> </g> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-cloud\" clip-path=\"url(#cloudFillClip)\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_cloud\" d=\"M44.033,65.641c-8.836,0-15.999-7.162-15.999-15.998c0-8.835,7.163-15.998,15.999-15.998c6.006,0,11.233,3.312,13.969,8.203c0.664-0.113,1.338-0.205,2.033-0.205c6.627,0,11.998,5.373,11.998,12c0,6.625-5.371,11.998-11.998,11.998C57.26,65.641,47.23,65.641,44.033,65.641z\"></path> </g> </g> </svg>',\n  Rain: '<svg version=\"1.1\" id=\"cloudDrizzleAlt\" class=\"climacon climacon_cloudDrizzleAlt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\"> <g class=\"climacon_iconWrap climacon_iconWrap-cloudDrizzleAlt\"> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-drizzle\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_drizzle climacon_component-stroke_drizzle-left\" id=\"Drizzle-Left_1_\" d=\"M56.969,57.672l-2.121,2.121c-1.172,1.172-1.172,3.072,0,4.242c1.17,1.172,3.07,1.172,4.24,0c1.172-1.17,1.172-3.07,0-4.242L56.969,57.672z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_drizzle climacon_component-stroke_drizzle-middle\" d=\"M50.088,57.672l-2.119,2.121c-1.174,1.172-1.174,3.07,0,4.242c1.17,1.172,3.068,1.172,4.24,0s1.172-3.07,0-4.242L50.088,57.672z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_drizzle climacon_component-stroke_drizzle-right\" d=\"M43.033,57.672l-2.121,2.121c-1.172,1.172-1.172,3.07,0,4.242s3.07,1.172,4.244,0c1.172-1.172,1.172-3.07,0-4.242L43.033,57.672z\"></path> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-cloud\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_cloud\" d=\"M59.943,41.642c-0.696,0-1.369,0.092-2.033,0.205c-2.736-4.892-7.961-8.203-13.965-8.203c-8.835,0-15.998,7.162-15.998,15.997c0,5.992,3.3,11.207,8.177,13.947c0.276-1.262,0.892-2.465,1.873-3.445l0.057-0.057c-3.644-2.061-6.106-5.963-6.106-10.445c0-6.626,5.372-11.998,11.998-11.998c5.691,0,10.433,3.974,11.666,9.29c1.25-0.81,2.732-1.291,4.332-1.291c4.418,0,8,3.581,8,7.999c0,3.443-2.182,6.371-5.235,7.498c0.788,1.146,1.194,2.471,1.222,3.807c4.666-1.645,8.014-6.077,8.014-11.305C71.941,47.014,66.57,41.642,59.943,41.642z\"></path> </g> </g> </svg>',\n  RainDay: '<svg version=\"1.1\" id=\"cloudDrizzleSun\" class=\"climacon climacon_cloudDrizzleSun\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\"> <clipPath id=\"cloudFillClip\"> <path d=\"M15,15v70h70V15H15z M59.943,61.639c-3.02,0-12.381,0-15.999,0c-6.626,0-11.998-5.371-11.998-11.998c0-6.627,5.372-11.999,11.998-11.999c5.691,0,10.434,3.974,11.665,9.29c1.252-0.81,2.733-1.291,4.334-1.291c4.418,0,8,3.582,8,8C67.943,58.057,64.361,61.639,59.943,61.639z\"></path> </clipPath> <clipPath id=\"sunCloudFillClip\"> <path d=\"M15,15v70h70V15H15z M57.945,49.641c-4.417,0-8-3.582-8-7.999c0-4.418,3.582-7.999,8-7.999s7.998,3.581,7.998,7.999C65.943,46.059,62.362,49.641,57.945,49.641z\"></path> </clipPath> <clipPath id=\"cloudSunFillClip\"> <path d=\"M15,15v70h20.947V63.481c-4.778-2.767-8-7.922-8-13.84c0-8.836,7.163-15.998,15.998-15.998c6.004,0,11.229,3.312,13.965,8.203c0.664-0.113,1.338-0.205,2.033-0.205c6.627,0,11.998,5.373,11.998,12c0,5.262-3.394,9.723-8.107,11.341V85H85V15H15z\"></path> </clipPath> <g class=\"climacon_iconWrap climacon_iconWrap-cloudDrizzleSun\"> <g clip-path=\"url(#cloudSunFillClip)\"> <g class=\"climacon_componentWrap climacon_componentWrap-sun climacon_componentWrap-sun_cloud\"> <g class=\"climacon_componentWrap climacon_componentWrap_sunSpoke\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M80.029,43.611h-3.998c-1.105,0-2-0.896-2-1.999s0.895-2,2-2h3.998c1.104,0,2,0.896,2,2S81.135,43.611,80.029,43.611z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M72.174,30.3c-0.781,0.781-2.049,0.781-2.828,0c-0.781-0.781-0.781-2.047,0-2.828l2.828-2.828c0.779-0.781,2.047-0.781,2.828,0c0.779,0.781,0.779,2.047,0,2.828L72.174,30.3z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M58.033,25.614c-1.105,0-2-0.896-2-2v-3.999c0-1.104,0.895-2,2-2c1.104,0,2,0.896,2,2v3.999C60.033,24.718,59.135,25.614,58.033,25.614z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M43.892,30.3l-2.827-2.828c-0.781-0.781-0.781-2.047,0-2.828c0.78-0.781,2.047-0.781,2.827,0l2.827,2.828c0.781,0.781,0.781,2.047,0,2.828C45.939,31.081,44.673,31.081,43.892,30.3z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M42.033,41.612c0,1.104-0.896,1.999-2,1.999h-4c-1.104,0-1.998-0.896-1.998-1.999s0.896-2,1.998-2h4C41.139,39.612,42.033,40.509,42.033,41.612z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M43.892,52.925c0.781-0.78,2.048-0.78,2.827,0c0.781,0.78,0.781,2.047,0,2.828l-2.827,2.827c-0.78,0.781-2.047,0.781-2.827,0c-0.781-0.78-0.781-2.047,0-2.827L43.892,52.925z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M58.033,57.61c1.104,0,2,0.895,2,1.999v4c0,1.104-0.896,2-2,2c-1.105,0-2-0.896-2-2v-4C56.033,58.505,56.928,57.61,58.033,57.61z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M72.174,52.925l2.828,2.828c0.779,0.78,0.779,2.047,0,2.827c-0.781,0.781-2.049,0.781-2.828,0l-2.828-2.827c-0.781-0.781-0.781-2.048,0-2.828C70.125,52.144,71.391,52.144,72.174,52.925z\"></path> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-sunBody\" clip-path=\"url(#sunCloudFillClip)\"> <circle class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunBody\" cx=\"58.033\" cy=\"41.612\" r=\"11.999\"></circle> </g> </g> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-drizzle\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_drizzle climacon_component-stroke_drizzle-left\" d=\"M42.001,53.644c1.104,0,2,0.896,2,2v3.998c0,1.105-0.896,2-2,2c-1.105,0-2.001-0.895-2.001-2v-3.998C40,54.538,40.896,53.644,42.001,53.644z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_drizzle climacon_component-stroke_drizzle-middle\" d=\"M49.999,53.644c1.104,0,2,0.896,2,2v4c0,1.104-0.896,2-2,2s-1.998-0.896-1.998-2v-4C48.001,54.54,48.896,53.644,49.999,53.644z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_drizzle climacon_component-stroke_drizzle-right\" d=\"M57.999,53.644c1.104,0,2,0.896,2,2v3.998c0,1.105-0.896,2-2,2c-1.105,0-2-0.895-2-2v-3.998C55.999,54.538,56.894,53.644,57.999,53.644z\"></path> </g>  <g class=\"climacon_wrapperComponent climacon_wrapperComponent-cloud\" clip-path=\"url(#cloudFillClip)\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_cloud\" d=\"M63.999,64.944v-4.381c2.387-1.386,3.998-3.961,3.998-6.92c0-4.418-3.58-8-7.998-8c-1.603,0-3.084,0.481-4.334,1.291c-1.232-5.316-5.973-9.29-11.664-9.29c-6.628,0-11.999,5.372-11.999,12c0,3.549,1.55,6.729,3.998,8.926v4.914c-4.776-2.769-7.998-7.922-7.998-13.84c0-8.836,7.162-15.999,15.999-15.999c6.004,0,11.229,3.312,13.965,8.203c0.664-0.113,1.336-0.205,2.033-0.205c6.627,0,11.998,5.373,11.998,12C71.997,58.864,68.655,63.296,63.999,64.944z\"></path> </g> </g>     </svg>',\n  RainNight: '<svg version=\"1.1\" id=\"cloudDrizzleMoon\" class=\"climacon climacon_cloudDrizzleMoon\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\"> <clipPath id=\"moonCloudFillClip\"> <path d=\"M0,0v100h100V0H0z M60.943,46.641c-4.418,0-7.999-3.582-7.999-7.999c0-3.803,2.655-6.979,6.211-7.792c0.903,4.854,4.726,8.676,9.579,9.58C67.922,43.986,64.745,46.641,60.943,46.641z\"></path> </clipPath> <clipPath id=\"cloudFillClip\"> <path d=\"M15,15v70h70V15H15z M59.943,61.639c-3.02,0-12.381,0-15.999,0c-6.626,0-11.998-5.371-11.998-11.998c0-6.627,5.372-11.999,11.998-11.999c5.691,0,10.434,3.974,11.665,9.29c1.252-0.81,2.733-1.291,4.334-1.291c4.418,0,8,3.582,8,8C67.943,58.057,64.361,61.639,59.943,61.639z\"></path> </clipPath> <g class=\"climacon_iconWrap climacon_iconWrap-cloudDrizzleMoon\"> <g clip-path=\"url(#cloudFillClip)\">  <g class=\"climacon_wrapperComponent climacon_wrapperComponent-moon climacon_componentWrap-moon_cloud\" clip-path=\"url(#moonCloudFillClip)\">  <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_moon\" d=\"M61.023,50.641c-6.627,0-11.999-5.372-11.999-11.998c0-6.627,5.372-11.999,11.999-11.999c0.755,0,1.491,0.078,2.207,0.212c-0.132,0.576-0.208,1.173-0.208,1.788c0,4.418,3.582,7.999,8,7.999c0.614,0,1.212-0.076,1.788-0.208c0.133,0.717,0.211,1.452,0.211,2.208C73.021,45.269,67.649,50.641,61.023,50.641z\"></path>  </g> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-drizzle\">  <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_drizzle climacon_component-stroke_drizzle-left\" d=\"M42.001,53.644c1.104,0,2,0.896,2,2v3.998c0,1.105-0.896,2-2,2c-1.105,0-2.001-0.895-2.001-2v-3.998C40,54.538,40.896,53.644,42.001,53.644z\"></path>  <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_drizzle climacon_component-stroke_drizzle-middle\" d=\"M49.999,53.644c1.104,0,2,0.896,2,2v4c0,1.104-0.896,2-2,2s-1.998-0.896-1.998-2v-4C48.001,54.54,48.896,53.644,49.999,53.644z\"></path>  <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_drizzle climacon_component-stroke_drizzle-right\" d=\"M57.999,53.644c1.104,0,2,0.896,2,2v3.998c0,1.105-0.896,2-2,2c-1.105,0-2-0.895-2-2v-3.998C55.999,54.538,56.894,53.644,57.999,53.644z\"></path> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-cloud\" clip-path=\"url(#cloudFillClip)\">  <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_cloud\" d=\"M63.999,64.944v-4.381c2.387-1.386,3.998-3.961,3.998-6.92c0-4.418-3.58-8-7.998-8c-1.603,0-3.084,0.481-4.334,1.291c-1.232-5.316-5.973-9.29-11.664-9.29c-6.628,0-11.999,5.372-11.999,12c0,3.549,1.55,6.729,3.998,8.926v4.914c-4.776-2.769-7.998-7.922-7.998-13.84c0-8.836,7.162-15.999,15.999-15.999c6.004,0,11.229,3.312,13.965,8.203c0.664-0.113,1.336-0.205,2.033-0.205c6.627,0,11.998,5.373,11.998,12C71.997,58.864,68.655,63.296,63.999,64.944z\"></path> </g> </g> </svg>',\n  Shower: '  <svg version=\"1.1\" id=\"cloudRain\" class=\"climacon climacon_cloudRain\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\"> <clipPath id=\"cloudFillClip\"> <path d=\"M15,15v70h70V15H15z M59.943,61.639c-3.02,0-12.381,0-15.999,0c-6.626,0-11.998-5.371-11.998-11.998c0-6.627,5.372-11.999,11.998-11.999c5.691,0,10.434,3.974,11.665,9.29c1.252-0.81,2.733-1.291,4.334-1.291c4.418,0,8,3.582,8,8C67.943,58.057,64.361,61.639,59.943,61.639z\"/> </clipPath> <g class=\"climacon_iconWrap climacon_iconWrap-cloudRain\"> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-rain\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_rain climacon_component-stroke_rain- left\" d=\"M41.946,53.641c1.104,0,1.999,0.896,1.999,2v15.998c0,1.105-0.895,2-1.999,2s-2-0.895-2-2V55.641C39.946,54.537,40.842,53.641,41.946,53.641z\"/> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_rain climacon_component-stroke_rain- middle\" d=\"M49.945,57.641c1.104,0,2,0.896,2,2v15.998c0,1.104-0.896,2-2,2s-2-0.896-2-2V59.641C47.945,58.535,48.841,57.641,49.945,57.641z\"/> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_rain climacon_component-stroke_rain- right\" d=\"M57.943,53.641c1.104,0,2,0.896,2,2v15.998c0,1.105-0.896,2-2,2c-1.104,0-2-0.895-2-2V55.641C55.943,54.537,56.84,53.641,57.943,53.641z\"/> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_rain climacon_component-stroke_rain- left\" d=\"M41.946,53.641c1.104,0,1.999,0.896,1.999,2v15.998c0,1.105-0.895,2-1.999,2s-2-0.895-2-2V55.641C39.946,54.537,40.842,53.641,41.946,53.641z\"/> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_rain climacon_component-stroke_rain- middle\" d=\"M49.945,57.641c1.104,0,2,0.896,2,2v15.998c0,1.104-0.896,2-2,2s-2-0.896-2-2V59.641C47.945,58.535,48.841,57.641,49.945,57.641z\"/> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_rain climacon_component-stroke_rain- right\" d=\"M57.943,53.641c1.104,0,2,0.896,2,2v15.998c0,1.105-0.896,2-2,2c-1.104,0-2-0.895-2-2V55.641C55.943,54.537,56.84,53.641,57.943,53.641z\"/> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent_cloud\" clip-path=\"url(#cloudFillClip)\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_cloud\" d=\"M63.943,64.941v-4.381c2.389-1.384,4-3.961,4-6.92c0-4.417-3.582-8-8-8c-1.601,0-3.082,0.48-4.334,1.291c-1.23-5.317-5.973-9.29-11.665-9.29c-6.626,0-11.998,5.372-11.998,11.998c0,3.549,1.551,6.728,4,8.924v4.916c-4.777-2.768-8-7.922-8-13.84c0-8.835,7.163-15.997,15.998-15.997c6.004,0,11.229,3.311,13.965,8.203c0.664-0.113,1.338-0.205,2.033-0.205c6.627,0,11.998,5.372,11.998,12C71.941,58.863,68.602,63.293,63.943,64.941z\"/> </g> </g> </svg>',\n  MistDay: '<svg version=\"1.1\" id=\"cloudFogSunAlt\" class=\"climacon climacon_cloudFogSunAlt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\">  <clipPath id=\"cloudFillClip\"> <path d=\"M15,15v70h70V15H15z M59.943,61.639c-3.02,0-12.381,0-15.999,0c-6.626,0-11.998-5.371-11.998-11.998c0-6.627,5.372-11.999,11.998-11.999c5.691,0,10.434,3.974,11.665,9.29c1.252-0.81,2.733-1.291,4.334-1.291c4.418,0,8,3.582,8,8C67.943,58.057,64.361,61.639,59.943,61.639z\"></path>  </clipPath>  <clipPath id=\"sunCloudFillClip\"> <path d=\"M15,15v70h70V15H15z M57.945,49.641c-4.417,0-8-3.582-8-7.999c0-4.418,3.582-7.999,8-7.999s7.998,3.581,7.998,7.999C65.943,46.059,62.362,49.641,57.945,49.641z\"></path>  </clipPath>  <clipPath id=\"cloudSunFillClip\"> <path d=\"M15,15v70h20.947V63.481c-4.778-2.767-8-7.922-8-13.84c0-8.836,7.163-15.998,15.998-15.998c6.004,0,11.229,3.312,13.965,8.203c0.664-0.113,1.338-0.205,2.033-0.205c6.627,0,11.998,5.373,11.998,12c0,5.262-3.394,9.723-8.107,11.341V85H85V15H15z\"></path>  </clipPath>  <g class=\"climacon_iconWrap climacon_iconWrap-cloudFogSunAlt\"> <g clip-path=\"url(#cloudSunFillClip)\"> <g class=\"climacon_componentWrap climacon_componentWrap-sun climacon_componentWrap-sun_cloud\"> <g class=\"climacon_componentWrap climacon_componentWrap_sunSpoke\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M80.029,43.611h-3.998c-1.105,0-2-0.896-2-1.999s0.895-2,2-2h3.998c1.104,0,2,0.896,2,2S81.135,43.611,80.029,43.611z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M72.174,30.3c-0.781,0.781-2.049,0.781-2.828,0c-0.781-0.781-0.781-2.047,0-2.828l2.828-2.828c0.779-0.781,2.047-0.781,2.828,0c0.779,0.781,0.779,2.047,0,2.828L72.174,30.3z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M58.033,25.614c-1.105,0-2-0.896-2-2v-3.999c0-1.104,0.895-2,2-2c1.104,0,2,0.896,2,2v3.999C60.033,24.718,59.135,25.614,58.033,25.614z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M43.892,30.3l-2.827-2.828c-0.781-0.781-0.781-2.047,0-2.828c0.78-0.781,2.047-0.781,2.827,0l2.827,2.828c0.781,0.781,0.781,2.047,0,2.828C45.939,31.081,44.673,31.081,43.892,30.3z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M42.033,41.612c0,1.104-0.896,1.999-2,1.999h-4c-1.104,0-1.998-0.896-1.998-1.999s0.896-2,1.998-2h4C41.139,39.612,42.033,40.509,42.033,41.612z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M43.892,52.925c0.781-0.78,2.048-0.78,2.827,0c0.781,0.78,0.781,2.047,0,2.828l-2.827,2.827c-0.78,0.781-2.047,0.781-2.827,0c-0.781-0.78-0.781-2.047,0-2.827L43.892,52.925z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M58.033,57.61c1.104,0,2,0.895,2,1.999v4c0,1.104-0.896,2-2,2c-1.105,0-2-0.896-2-2v-4C56.033,58.505,56.928,57.61,58.033,57.61z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M72.174,52.925l2.828,2.828c0.779,0.78,0.779,2.047,0,2.827c-0.781,0.781-2.049,0.781-2.828,0l-2.828-2.827c-0.781-0.781-0.781-2.048,0-2.828C70.125,52.144,71.391,52.144,72.174,52.925z\"></path> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-sunBody\" clip-path=\"url(#sunCloudFillClip)\"> <circle class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunBody\" cx=\"58.033\" cy=\"41.612\" r=\"11.999\"></circle> </g> </g> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-Fog\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M29.177,55.641c-0.262-0.646-0.473-1.314-0.648-2h43.47c0,0.685-0.069,1.349-0.181,2H29.177z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M36.263,35.643c2.294-1.271,4.93-1.999,7.738-1.999c2.806,0,5.436,0.73,7.728,1.999H36.263z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M28.142,47.642c0.085-0.682,0.218-1.347,0.387-1.999h40.396c0.552,0.613,1.039,1.281,1.455,1.999H28.142z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M29.177,43.643c0.281-0.693,0.613-1.359,0.984-2h27.682c0.04,0.068,0.084,0.135,0.123,0.205c0.664-0.114,1.339-0.205,2.033-0.205c2.451,0,4.729,0.738,6.627,2H29.177z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M31.524,39.643c0.58-0.723,1.225-1.388,1.92-2h21.123c0.689,0.61,1.326,1.28,1.902,2H31.524z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M71.816,51.641H28.142c-0.082-0.656-0.139-1.32-0.139-1.999h43.298C71.527,50.285,71.702,50.953,71.816,51.641z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M71.301,57.641c-0.246,0.699-0.555,1.367-0.921,2H31.524c-0.505-0.629-0.957-1.299-1.363-2H71.301z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M33.444,61.641h35.48c-0.68,0.758-1.447,1.435-2.299,2H36.263C35.247,63.078,34.309,62.4,33.444,61.641z\"></path> </g>  </g>  </svg>',\n  MistNight: '<svg version=\"1.1\" id=\"cloudFogMoonAlt\" class=\"climacon climacon_cloudFogMoonAlt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\">  <clipPath id=\"moonCloudFillClip\"> <path d=\"M0,0v100h100V0H0z M60.943,46.641c-4.418,0-7.999-3.582-7.999-7.999c0-3.803,2.655-6.979,6.211-7.792c0.903,4.854,4.726,8.676,9.579,9.58C67.922,43.986,64.745,46.641,60.943,46.641z\"></path>  </clipPath> <clipPath id=\"newMoonCloudFillClip\"> <path d=\"M15,15v70h70V15H15z M59.943,65.638c-2.775,0-12.801,0-15.998,0c-8.836,0-15.998-7.162-15.998-15.998c0-8.835,7.162-15.998,15.998-15.998c6.004,0,11.229,3.312,13.965,8.203c0.664-0.113,1.338-0.205,2.033-0.205c6.627,0,11.998,5.373,11.998,12C71.941,60.265,66.57,65.638,59.943,65.638z\"></path>  </clipPath>  <g class=\"climacon_iconWrap climacon_iconWrap-cloudFogMoon\"> <g clip-path=\"url(#newMoonCloudFillClip)\"> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-moon climacon_componentWrap-moon_cloud\" clip-path=\"url(#moonCloudFillClip)\">  <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunBody\" d=\"M61.023,50.641c-6.627,0-11.999-5.372-11.999-11.998c0-6.627,5.372-11.999,11.999-11.999c0.755,0,1.491,0.078,2.207,0.212c-0.132,0.576-0.208,1.173-0.208,1.788c0,4.418,3.582,7.999,8,7.999c0.614,0,1.212-0.076,1.788-0.208c0.133,0.717,0.211,1.452,0.211,2.208C73.021,45.269,67.649,50.641,61.023,50.641z\"></path> </g> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-Fog\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M29.177,55.641c-0.262-0.646-0.473-1.314-0.648-2h43.47c0,0.685-0.069,1.349-0.181,2H29.177z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M36.263,35.643c2.294-1.271,4.93-1.999,7.738-1.999c2.806,0,5.436,0.73,7.728,1.999H36.263z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M28.142,47.642c0.085-0.682,0.218-1.347,0.387-1.999h40.396c0.552,0.613,1.039,1.281,1.455,1.999H28.142z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M29.177,43.643c0.281-0.693,0.613-1.359,0.984-2h27.682c0.04,0.068,0.084,0.135,0.123,0.205c0.664-0.114,1.339-0.205,2.033-0.205c2.451,0,4.729,0.738,6.627,2H29.177z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M31.524,39.643c0.58-0.723,1.225-1.388,1.92-2h21.123c0.689,0.61,1.326,1.28,1.902,2H31.524z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M71.816,51.641H28.142c-0.082-0.656-0.139-1.32-0.139-1.999h43.298C71.527,50.285,71.702,50.953,71.816,51.641z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M71.301,57.641c-0.246,0.699-0.555,1.367-0.921,2H31.524c-0.505-0.629-0.957-1.299-1.363-2H71.301z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine\" d=\"M33.444,61.641h35.48c-0.68,0.758-1.447,1.435-2.299,2H36.263C35.247,63.078,34.309,62.4,33.444,61.641z\"></path> </g>  </g>     </svg>',\n  Fog: '<svg version=\"1.1\" id=\"cloudFog\" class=\"climacon climacon_cloudFog\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\"> <g class=\"climacon_iconWrap climacon_iconWrap-cloudFog\"> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-Fog\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine climacon_component-stroke_fogLine-top\" d=\"M69.998,57.641H30.003c-1.104,0-2-0.895-2-2c0-1.104,0.896-2,2-2h39.995c1.104,0,2,0.896,2,2C71.998,56.746,71.104,57.641,69.998,57.641z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine climacon_component-stroke_fogLine-middle\" d=\"M69.998,65.641H30.003c-1.104,0-2-0.896-2-2s0.896-2,2-2h39.995c1.104,0,2,0.896,2,2C71.998,64.744,71.104,65.641,69.998,65.641z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_fogLine climacon_component-stroke_fogLine-bottom\" d=\"M30.003,69.639h39.995c1.104,0,2,0.896,2,2c0,1.105-0.896,2-2,2H30.003c-1.104,0-2-0.895-2-2C28.003,70.535,28.898,69.639,30.003,69.639z\"></path> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-cloud\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_cloud\" d=\"M59.999,45.643c-1.601,0-3.083,0.48-4.333,1.291c-1.232-5.317-5.974-9.291-11.665-9.291c-6.626,0-11.998,5.373-11.998,12h-4c0-8.835,7.163-15.999,15.998-15.999c6.004,0,11.229,3.312,13.965,8.204c0.664-0.113,1.337-0.205,2.033-0.205c5.222,0,9.651,3.342,11.301,8h-4.381C65.535,47.253,62.958,45.643,59.999,45.643z\"></path> </g> </g> </svg>',\n  SunThunder: '<svg version=\"1.1\" id=\"cloudLightning\" class=\"climacon climacon_cloudLightningSun\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\"> <clipPath id=\"cloudFillClip\"> <path d=\"M15,15v70h70V15H15z M59.943,61.639c-3.02,0-12.381,0-15.999,0c-6.626,0-11.998-5.371-11.998-11.998c0-6.627,5.372-11.999,11.998-11.999c5.691,0,10.434,3.974,11.665,9.29c1.252-0.81,2.733-1.291,4.334-1.291c4.418,0,8,3.582,8,8C67.943,58.057,64.361,61.639,59.943,61.639z\"></path>        </clipPath>        <clipPath id=\"sunCloudFillClip\"> <path d=\"M15,15v70h70V15H15z M57.945,49.641c-4.417,0-8-3.582-8-7.999c0-4.418,3.582-7.999,8-7.999s7.998,3.581,7.998,7.999C65.943,46.059,62.362,49.641,57.945,49.641z\"></path>        </clipPath>        <clipPath id=\"cloudSunFillClip\"> <path d=\"M15,15v70h20.947V63.481c-4.778-2.767-8-7.922-8-13.84c0-8.836,7.163-15.998,15.998-15.998c6.004,0,11.229,3.312,13.965,8.203c0.664-0.113,1.338-0.205,2.033-0.205c6.627,0,11.998,5.373,11.998,12c0,5.262-3.394,9.723-8.107,11.341V85H85V15H15z\"></path>        </clipPath>        <g class=\"climacon_iconWrap climacon_iconWrap-cloudLightning\"> <g clip-path=\"url(#cloudSunFillClip)\"> <g class=\"climacon_componentWrap climacon_componentWrap-sun climacon_componentWrap-sun_cloud\"> <g class=\"climacon_componentWrap climacon_componentWrap_sunSpoke\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M80.029,43.611h-3.998c-1.105,0-2-0.896-2-1.999s0.895-2,2-2h3.998c1.104,0,2,0.896,2,2S81.135,43.611,80.029,43.611z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M72.174,30.3c-0.781,0.781-2.049,0.781-2.828,0c-0.781-0.781-0.781-2.047,0-2.828l2.828-2.828c0.779-0.781,2.047-0.781,2.828,0c0.779,0.781,0.779,2.047,0,2.828L72.174,30.3z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M58.033,25.614c-1.105,0-2-0.896-2-2v-3.999c0-1.104,0.895-2,2-2c1.104,0,2,0.896,2,2v3.999C60.033,24.718,59.135,25.614,58.033,25.614z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M43.892,30.3l-2.827-2.828c-0.781-0.781-0.781-2.047,0-2.828c0.78-0.781,2.047-0.781,2.827,0l2.827,2.828c0.781,0.781,0.781,2.047,0,2.828C45.939,31.081,44.673,31.081,43.892,30.3z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M42.033,41.612c0,1.104-0.896,1.999-2,1.999h-4c-1.104,0-1.998-0.896-1.998-1.999s0.896-2,1.998-2h4C41.139,39.612,42.033,40.509,42.033,41.612z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M43.892,52.925c0.781-0.78,2.048-0.78,2.827,0c0.781,0.78,0.781,2.047,0,2.828l-2.827,2.827c-0.78,0.781-2.047,0.781-2.827,0c-0.781-0.78-0.781-2.047,0-2.827L43.892,52.925z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M58.033,57.61c1.104,0,2,0.895,2,1.999v4c0,1.104-0.896,2-2,2c-1.105,0-2-0.896-2-2v-4C56.033,58.505,56.928,57.61,58.033,57.61z\"></path> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunSpoke climacon_component-stroke_sunSpoke-north\" d=\"M72.174,52.925l2.828,2.828c0.779,0.78,0.779,2.047,0,2.827c-0.781,0.781-2.049,0.781-2.828,0l-2.828-2.827c-0.781-0.781-0.781-2.048,0-2.828C70.125,52.144,71.391,52.144,72.174,52.925z\"></path> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-sunBody\" clip-path=\"url(#sunCloudFillClip)\"> <circle class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunBody\" cx=\"58.033\" cy=\"41.612\" r=\"11.999\"></circle> </g> </g> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-lightning\"> <polygon class=\"climacon_component climacon_component-stroke climacon_component-stroke_lightning\" points=\"48.001,51.641 57.999,51.641 52,61.641 58.999,61.641 46.001,77.639 49.601,65.641 43.001,65.641 \"></polygon> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-cloud\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_cloud\" d=\"M59.999,65.641c-0.28,0-0.649,0-1.062,0l3.584-4.412c3.182-1.057,5.478-4.053,5.478-7.588c0-4.417-3.581-7.998-7.999-7.998c-1.602,0-3.083,0.48-4.333,1.29c-1.231-5.316-5.974-9.29-11.665-9.29c-6.626,0-11.998,5.372-11.998,12c0,5.446,3.632,10.039,8.604,11.503l-1.349,3.777c-6.52-2.021-11.255-8.098-11.255-15.282c0-8.835,7.163-15.999,15.998-15.999c6.004,0,11.229,3.312,13.965,8.204c0.664-0.114,1.338-0.205,2.033-0.205c6.627,0,11.999,5.371,11.999,11.999C71.999,60.268,66.626,65.641,59.999,65.641z\"></path> </g>        </g>    </svg>',\n  NightThunder: '<svg version=\"1.1\" id=\"cloudLightningMoon\" class=\"climacon climacon_cloudLightningMoon\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\"> <clipPath id=\"moonCloudFillClip\"> <path d=\"M0,0v100h100V0H0z M60.943,46.641c-4.418,0-7.999-3.582-7.999-7.999c0-3.803,2.655-6.979,6.211-7.792c0.903,4.854,4.726,8.676,9.579,9.58C67.922,43.986,64.745,46.641,60.943,46.641z\"></path> </clipPath> <clipPath id=\"cloudFillClip\"> <path d=\"M15,15v70h70V15H15z M59.943,61.639c-3.02,0-12.381,0-15.999,0c-6.626,0-11.998-5.371-11.998-11.998c0-6.627,5.372-11.999,11.998-11.999c5.691,0,10.434,3.974,11.665,9.29c1.252-0.81,2.733-1.291,4.334-1.291c4.418,0,8,3.582,8,8C67.943,58.057,64.361,61.639,59.943,61.639z\"></path> </clipPath>  <g class=\"climacon_iconWrap climacon_iconWrap-cloudLightningMoon\"> <g clip-path=\"url(#cloudFillClip)\"> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-moon climacon_componentWrap-moon_cloud\" clip-path=\"url(#moonCloudFillClip)\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_sunBody\" d=\"M61.023,50.641c-6.627,0-11.999-5.372-11.999-11.998c0-6.627,5.372-11.999,11.999-11.999c0.755,0,1.491,0.078,2.207,0.212c-0.132,0.576-0.208,1.173-0.208,1.788c0,4.418,3.582,7.999,8,7.999c0.614,0,1.212-0.076,1.788-0.208c0.133,0.717,0.211,1.452,0.211,2.208C73.021,45.269,67.649,50.641,61.023,50.641z\"></path> </g> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-lightning\"> <polygon class=\"climacon_component climacon_component-stroke climacon_component-stroke_lightning\" points=\"48.001,51.641 57.999,51.641 52,61.641 58.999,61.641 46.001,77.639 49.601,65.641 43.001,65.641 \"></polygon> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-cloud\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_cloud\" d=\"M59.999,65.641c-0.28,0-0.649,0-1.062,0l3.584-4.412c3.182-1.057,5.478-4.053,5.478-7.588c0-4.417-3.581-7.998-7.999-7.998c-1.602,0-3.083,0.48-4.333,1.29c-1.231-5.316-5.974-9.29-11.665-9.29c-6.626,0-11.998,5.372-11.998,12c0,5.446,3.632,10.039,8.604,11.503l-1.349,3.777c-6.52-2.021-11.255-8.098-11.255-15.282c0-8.835,7.163-15.999,15.998-15.999c6.004,0,11.229,3.312,13.965,8.204c0.664-0.114,1.338-0.205,2.033-0.205c6.627,0,11.999,5.371,11.999,11.999C71.999,60.268,66.626,65.641,59.999,65.641z\"></path> </g> </g> </svg>',\n  Thunder: '<svg version=\"1.1\" id=\"cloudLightning\" class=\"climacon climacon_cloudLightning\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\"> <g class=\"climacon_iconWrap climacon_iconWrap-cloudLightning\"> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-lightning\"> <polygon class=\"climacon_component climacon_component-stroke climacon_component-stroke_lightning\" points=\"48.001,51.641 57.999,51.641 52,61.641 58.999,61.641 46.001,77.639 49.601,65.641 43.001,65.641 \"></polygon> </g> <g class=\"climacon_wrapperComponent climacon_wrapperComponent-cloud\"> <path class=\"climacon_component climacon_component-stroke climacon_component-stroke_cloud\" d=\"M59.999,65.641c-0.28,0-0.649,0-1.062,0l3.584-4.412c3.182-1.057,5.478-4.053,5.478-7.588c0-4.417-3.581-7.998-7.999-7.998c-1.602,0-3.083,0.48-4.333,1.29c-1.231-5.316-5.974-9.29-11.665-9.29c-6.626,0-11.998,5.372-11.998,12c0,5.446,3.632,10.039,8.604,11.503l-1.349,3.777c-6.52-2.021-11.255-8.098-11.255-15.282c0-8.835,7.163-15.999,15.998-15.999c6.004,0,11.229,3.312,13.965,8.204c0.664-0.114,1.338-0.205,2.033-0.205c6.627,0,11.999,5.371,11.999,11.999C71.999,60.268,66.626,65.641,59.999,65.641z\"></path> </g> </g> </svg>',\n  Snow: '<svg version=\"1.1\" id=\"cloudSnowAlt\" class=\"climacon climacon_cloudSnowAlt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"15 15 70 70\" enable-background=\"new 15 15 70 70\" xml:space=\"preserve\"><clipPath id=\"snowFillClip\"><path d=\"M15,15v70h70V15H15z M50,65.641c-1.104,0-2-0.896-2-2c0-1.104,0.896-2,2-2c1.104,0,2,0.896,2,2S51.104,65.641,50,65.641z\"></path></clipPath><g class=\"climacon_iconWrap climacon_iconWrap-cloudSnowAlt\"><g class=\"climacon_wrapperComponent climacon_wrapperComponent-snowAlt\"><g class=\"climacon_component climacon_component climacon_component-snowAlt\" clip-path=\"url(#snowFillClip)\"><path class=\"climacon_component climacon_component-stroke climacon_component-stroke_snowAlt\" d=\"M43.072,59.641c0.553-0.957,1.775-1.283,2.732-0.731L48,60.176v-2.535c0-1.104,0.896-2,2-2c1.104,0,2,0.896,2,2v2.535l2.195-1.268c0.957-0.551,2.18-0.225,2.73,0.732c0.553,0.957,0.225,2.18-0.73,2.731l-2.196,1.269l2.196,1.268c0.955,0.553,1.283,1.775,0.73,2.732c-0.552,0.954-1.773,1.282-2.73,0.729L52,67.104v2.535c0,1.105-0.896,2-2,2c-1.104,0-2-0.895-2-2v-2.535l-2.195,1.269c-0.957,0.553-2.18,0.226-2.732-0.729c-0.552-0.957-0.225-2.181,0.732-2.732L46,63.641l-2.195-1.268C42.848,61.82,42.521,60.598,43.072,59.641z\"></path></g></g><g class=\"climacon_wrapperComponent climacon_wrapperComponent-cloud\"><path class=\"climacon_component climacon_component-stroke climacon_component-stroke_cloud\" d=\"M61.998,65.461v-4.082c3.447-0.891,6-4.012,6-7.738c0-4.417-3.582-7.999-7.999-7.999c-1.601,0-3.084,0.48-4.334,1.291c-1.231-5.317-5.973-9.291-11.664-9.291c-6.627,0-11.999,5.373-11.999,12c0,4.438,2.417,8.305,5.999,10.379v4.444c-5.86-2.375-9.998-8.112-9.998-14.825c0-8.835,7.162-15.999,15.998-15.999c6.004,0,11.229,3.312,13.965,8.204c0.664-0.113,1.336-0.205,2.033-0.205c6.626,0,11.998,5.373,11.998,11.998C71.997,59.586,67.671,64.506,61.998,65.461z\"></path></g></g></svg>'\n}\n\nexport const weatherIconIds = {\n  // Tornado\n  0: weatherIcon['Clouds'],\n  // Tropical storm\n  1: weatherIcon['Clouds'],\n  // hurricane\n  2: weatherIcon['Clouds'],\n  // severe thunderstorms\n  3: weatherIcon['Thunder'],\n  // thunderstorms\n  4: weatherIcon['Thunder'],\n  // mixed rain and snow\n  5: weatherIcon['Snow'],\n  // mixed rain and sleet\n  6: weatherIcon['Rain'],\n  // mixed snow and sleet\n  7: weatherIcon['Snow'],\n  // freezing drizzle\n  8: weatherIcon['Rain'],\n  // drizzle\n  9: weatherIcon['Rain'],\n  // freezing rain\n  10: weatherIcon['Rain'],\n  // showers\n  11: weatherIcon['Shower'],\n  // showers (?)\n  12: weatherIcon['Shower'],\n  // snow flurries\n  13: weatherIcon['Snow'],\n  // light snow showers\n  14: weatherIcon['Snow'],\n  // blowing snow\n  15: weatherIcon['Snow'],\n  // snow\n  16: weatherIcon['Snow'],\n  // hail\n  17: weatherIcon['Rain'],\n  // sleet\n  18: weatherIcon['Rain'],\n  // dust\n  19: weatherIcon['Fog'],\n  // foggy\n  20: weatherIcon['Fog'],\n  // haze\n  21: weatherIcon['Fog'],\n  // smoky\n  22: weatherIcon['Fog'],\n  // blustery\n  23: weatherIcon['Clouds'],\n  // windy\n  24: weatherIcon['Clouds'],\n  // cold\n  25: weatherIcon['Sun'],\n  // cloudy\n  26: weatherIcon['Clouds'],\n  // mostly cloudy (night)\n  27: weatherIcon['Clouds'],\n  // mostly cloud (day)\n  28: weatherIcon['Clouds'],\n  // partly cloudy (night)\n  29: weatherIcon['CloudsNight'],\n  // partly cloud (day)\n  30: weatherIcon['CloudsDay'],\n  // clear (night)\n  31: weatherIcon['Moon'],\n  // sunny\n  32: weatherIcon['Sun'],\n  // fair (night)\n  33: weatherIcon['Moon'],\n  // fair (day)\n  34: weatherIcon['Sun'],\n  // mixed rain and hail\n  35: weatherIcon['Rain'],\n  // hot\n  36: weatherIcon['Sun'],\n  // isolated thunderstorms\n  37: weatherIcon['Thunder'],\n  // scattered thunderstorms\n  38: weatherIcon['Thunder'],\n  // scattered thunderstorms (?)\n  39: weatherIcon['Thunder'],\n  // scattered showers\n  40: weatherIcon['Showers'],\n  // heavy snow\n  41: weatherIcon['Snow'],\n  // scattered snow showers\n  42: weatherIcon['Snow'],\n  // heavy snow\n  43: weatherIcon['Snow'],\n  // partly cloudy\n  44: weatherIcon['Clouds'],\n  // thundershowers\n  45: weatherIcon['Thunder'],\n  // snow showers\n  46: weatherIcon['Snow'],\n  // isolated thundershowers\n  47: weatherIcon['Thunder'],\n  // not available\n  3200: weatherIcon['Sun'],\n}\n","import $ from 'jquery'\nimport 'simpleweather'\n\nimport { weatherIconIds } from './weather-icons'\nimport { climateMonths, averageClimate } from './average-climate-data'\n\nexport default class Weather {\n  constructor() {\n    this.averageClimate = averageClimate\n    this.init()\n  }\n\n  init() {\n    $('.destination-todays-temp').each((index, element) => {\n      const location = $(element).data('weather-location')\n      $.simpleWeather({\n        zipcode: '',\n        woeid: '', //2357536\n        location,\n        unit: 'c',\n        success: function success(weather) {\n          $('.destination-temp span', element).html(weather.temp)\n          $('.destination-date-time time', element).html(weather.forecast[0].date)\n          $('.destination-date-time time', element).data('cel', weather.temp)\n          $('.destination-date-time time', element).data('fanren', weather.alt.temp)\n          $('.weather-icon', element).html(weatherIconIds[weather.code]).promise().done(() => {\n            $('.destination-temp').addClass('destination-temp-loaded')\n          })\n        },\n      })\n    })\n\n    $('.temperature-setting-label').on('click', () => {\n      const weatherBox = $(this).parents('.destination-todays-temp')\n\n      if ($('input', this).prop('checked')) {\n        const faran = $(weatherBox).find('.destination-date-time time').data('fanren')\n        $('.destination-temp span', weatherBox).html(faran)\n      } else {\n        const cel = $(weatherBox).find('.destination-date-time time').data('cel')\n        $('.destination-temp span', weatherBox).html(cel)\n      }\n    })\n\n    // ---- *end* simpleWeather.js CONFIG *end* ----\n\n    //  ---- AVERAGE CLIMATE SLIDER -----  //\n    if ($('[data-average-climate-hardcode]').length > 0) {\n      $('.destination-average-climate').each((index, element) => {\n        const destination = $(element).data('average-climate-hardcode')\n\n        const monthText = $('.destination-selected-month', element)\n\n        // Set the first values (aka January)\n        monthText.html(this.avgClimate(destination)[0].month)\n        $('.destination-avg-rainfall span', element).html(`${this.avgClimate(destination)[0].value.Rainfall}mm`)\n        $('.destination-avg-temperature span', element).html(`${this.avgClimate(destination)[0].value.AvgTemp}°C`)\n\n        $('.destination-avg-temperature-next', element).on('click', () => {\n          const currentMonth = monthText.data('average-climate-month')\n          let nextMonth = currentMonth + 1\n\n          if (this.avgClimate(destination)[nextMonth] === undefined) {\n            nextMonth = 0\n          }\n\n          monthText.html(this.avgClimate(destination)[nextMonth].month)\n          $('.destination-avg-rainfall span', element).html(`${this.avgClimate(destination)[nextMonth].value.Rainfall}mm`)\n          $('.destination-avg-temperature span', element).html(`${this.avgClimate(destination)[nextMonth].value.AvgTemp}°C`)\n\n          monthText.data('average-climate-month', nextMonth)\n        })\n\n        $('.destination-avg-temperature-prev', element).on('click', () => {\n          const currentMonth = monthText.data('average-climate-month')\n          let nextMonth = currentMonth - 1\n\n          if (this.avgClimate(destination)[nextMonth] === undefined) {\n            nextMonth = 11\n          }\n\n          monthText.html(this.avgClimate(destination)[nextMonth].month)\n          $('.destination-avg-rainfall span', element).html(`${this.avgClimate(destination)[nextMonth].value.Rainfall}mm`)\n          $('.destination-avg-temperature span', element).html(`${this.avgClimate(destination)[nextMonth].value.AvgTemp}°C`)\n\n          monthText.data('average-climate-month', nextMonth)\n        })\n      })\n    }\n  }\n\n  avgClimate(destination) {\n    const output = []\n\n    function getDescendantProp(obj, desc) {\n      const arr = desc.split('.')\n      while (arr.length && (obj = obj[arr.shift()])) {\n        return obj\n      }\n    }\n\n    for (const k in climateMonths) {\n      const climateMonth = climateMonths[k]\n      output.push({ month: climateMonth, value: getDescendantProp(this.averageClimate, destination.toString())[climateMonth] })\n    }\n    return output\n  }\n}\n","import $ from 'jquery'\n\nexport default class BreakPoints {\n  constructor() {\n    this.breakPoints = {\n      xxlarge: 1440,\n      xlarge: 1240,\n      large: 1024,\n      medium: 768,\n      small: 0,\n    }\n  }\n\n  curentBreakPoint() {\n    // Get Breakpoint - Breakpoints will need to be updated from CSS\n    return Object.keys(this.breakPoints).find(key => ($(window).width() > this.breakPoints[key]))\n  }\n\n  curentBreakPointString() {\n    // Get Breakpoint - Breakpoints will need to be updated from CSS\n    const wW = $(window).width()\n\n    for (const key in this.breakPoints) {\n      if (this.breakPoints.hasOwnProperty(key)) {\n        if (wW > this.breakPoints[key]) {\n          return key\n        }\n      }\n    }\n  }\n\n  atLeast(sizeQuery) {\n    return (this.breakPoints[this.curentBreakPoint()] >= this.breakPoints[sizeQuery])\n    // return Object.keys(this.breakPoints).find(key => ((this.breakPoints[key] <= this.breakPoints[this.curentBreakPoint()])))\n  }\n}\n","/**\n * Returns a new element with a given class.\n *\n * @param {string} type of element.\n * @param {string} newClass is the class the new element will have.\n *\n * @return {string} The filename extracted from the path.\n */\nexport function iOS() {\n\n  const iDevices = [\n    'iPad Simulator',\n    'iPhone Simulator',\n    'iPod Simulator',\n    'iPad',\n    'iPhone',\n    'iPod'\n  ];\n\n  if (!!navigator.platform) {\n    while (iDevices.length) {\n      if (navigator.platform === iDevices.pop()) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n// Get an element's distance from the top of the page\nexport function getElemDistance(elem) {\n  let location = 0\n  if (elem.offsetParent) {\n    do {\n      location += elem.offsetTop\n      elem = elem.offsetParent\n    } while (elem)\n  }\n  return location >= 0 ? location : 0\n}\n\n\n/**\n * Returns a new element with a given class.\n *\n * @param {string} type of element.\n * @param {string} newClass is the class the new element will have.\n *\n * @return {string} The filename extracted from the path.\n */\nexport function newEl(type, newClass) {\n  let element = document.createElement(type);\n  element.className = newClass;\n  return element;\n}\n\n/**\n * Returns a new element with a given class.\n *\n * @param {string} min of element.\n * @param {string} max is the class the new element will have.\n *\n * @return {string} The filename extracted from the path.\n */\nexport function randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Returns a new element with a given class.\n *\n * @param {string} min of element.\n * @param {string} max is the class the new element will have.\n *\n * @return {string} The filename extracted from the path.\n */\nexport function addEventListener(el, eventName, handler) {\n  if (el.addEventListener) {\n    el.addEventListener(eventName, handler);\n  } else {\n    el.attachEvent('on' + eventName, function() {\n      handler.call(el);\n    });\n  }\n}\n\n/**\n * Returns a new element with a given class.\n *\n * @param {string} object of element.\n * @param {string} type is the class the new element will have.\n * @param {string} callback is the class the new element will have.\n *\n */\nexport function windowResize(object, type, callback) {\n  if (object == null || typeof(object) == 'undefined') return;\n  if (object.addEventListener) {\n      object.addEventListener(type, callback, false);\n  } else if (object.attachEvent) {\n      object.attachEvent('on' + type, callback);\n  } else {\n      object['on' + type] = callback;\n  }\n}\n\n/**\n * Returns a new element with a given class.\n *\n * @param {node} el of element.\n * @param {object} attrs is the class the new element will have.\n *\n */\nexport function setAttributes(el, attrs) {\n  for (let key in attrs) {\n    el.setAttribute(key, attrs[key]);\n  }\n}\n\n/**\n * Returns a new element with a given class.\n *\n * @param {node} el of element.\n * @param {object} attrs is the class the new element will have.\n *\n */\nexport function toggleClass(el, className) {\n  if (el.classList) {\n    el.classList.toggle(className);\n  } else {\n      let classes = el.className.split(' ');\n      let existingIndex = -1;\n      for (let i = classes.length; i--;) {\n        if (classes[i] === className)\n          existingIndex = i;\n      }\n\n      if (existingIndex >= 0)\n        classes.splice(existingIndex, 1);\n      else\n        classes.push(className);\n\n    el.className = classes.join(' ');\n  };\n}\n\n/**\n * Returns a new element with a given class.\n *\n * @param {node} el of element.\n * @param {object} attrs is the class the new element will have.\n *\n */\nexport function removeClass(el, cls) {\n  if (el.className.indexOf(cls) === -1)\n    return\n  var s = el.className.split(/\\s+/),\n    newClass = '',\n    i = 0\n  for (; i < s.length; i++) {\n    if (s[i] && s[i] != cls) {\n      if (i > 0) newClass += ' '\n      newClass += s[i]\n    }\n  }\n  el.className = newClass\n}\n\n/**\n * Returns a new element with a given class.\n *\n * @param {node} el of element.\n * @param {object} attrs is the class the new element will have.\n *\n */\nexport function addClass(el, className) {\n  if (el.classList) {\n    el.classList.add(className);\n  }else{\n    el.className += ' ' + className;\n  }\n}\n\n/**\n * Returns a new element with a given class.\n *\n * @param {node} el of element.\n * @param {object} attrs is the class the new element will have.\n *\n */\nexport function hasClass(el, className) {\n  if (el.classList) {\n    return el.classList.contains(className);\n  }else{\n    return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);\n  }\n}\n\n/**\n * Returns a new element with a given class.\n *\n * @param {node} el of element.\n * @param {object} attrs is the class the new element will have.\n *\n */\nexport function removeHash() {\n  let scrollV = 0;\n  let scrollH = 0;\n  const loc = window.location;\n  if ('pushState' in history) {\n      history.pushState('', document.title, loc.pathname + loc.search);\n  } else {\n      // Prevent scrolling by storing the page's current scroll offset\n      scrollV = document.body.scrollTop;\n      scrollH = document.body.scrollLeft;\n\n      loc.hash = '';\n\n      // Restore the scroll offset, should be flicker free\n      document.body.scrollTop = scrollV;\n      document.body.scrollLeft = scrollH;\n  }\n}\n\n\n/**\n * Returns a new element with a given class.\n *\n * @param {array} array of element.\n *\n * @return {string} The filename extracted from the path.\n */\nexport function shuffleArray(array) {\n\n  for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n  }\n\n  return array;\n\n}\n\n\n/**\n * Returns a new element with a given class.\n *\n * @param {object} obj of element.\n *\n * @return {string} The filename extracted from the path.\n */\nexport function toArray(obj) {\n  let array = [];\n  // iterate backwards ensuring that length is an UInt32\n  for (let i = obj.length >>> 0; i--;) {\n    array[i] = obj[i];\n  }\n  return array;\n}\n\n/**\n * Returns a new element with a given class.\n *\n * @param {object} obj of element.\n *\n * @return {string} The filename extracted from the path.\n */\nexport function documentReady() {\n  return new Promise((resolve) => {\n    if (document.attachEvent ? document.readyState === 'complete' : document.readyState !== 'loading') {\n      resolve()\n    } else {\n      document.addEventListener('DOMContentLoaded', () => resolve())\n    }\n  })\n}\n\n","import 'babel-polyfill'\n\n// Legacy imports\n// TODO: Break these (and their code below) into modules.\nimport $ from 'jquery'\nimport select2 from 'select2'\nimport 'foundation-sites'\n// import { Foundation } from 'foundation-sites/js/foundation.core'\n// import 'foundation-sites/js/foundation.util.mediaQuery'\n// import 'foundation-sites/js/foundation.equalizer'\n// import 'foundation-sites/js/foundation.reveal'\n\nimport 'lazysizes'\nimport 'lazysizes/plugins/optimumx/ls.optimumx'\nimport 'lazysizes/plugins/respimg/ls.respimg'\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit'\n\nimport GlobalHeader from '../_modules/header/header'\nimport TopMessageBar from '../_modules/top-message-bar/top-message-bar'\nimport GlobalNav from '../_modules/global-nav/global-nav'\nimport SubBar from '../_modules/sub-bar/sub-bar'\nimport Burger from '../_modules/burger/burger'\nimport GlobalFooter from '../_modules/footer/footer'\nimport Homepage from '../_modules/homepage/homepage'\nimport Filters from '../_modules/filters/filters'\nimport BrokerageFilters from '../_modules/brokerage/brokerage-filters'\nimport CharterFilters from '../_modules/charter/charter-filters'\nimport Shortlist from '../_modules/shortlist/shortlist'\nimport GalleryModal from '../_modules/gallery-modal/gallery-modal'\nimport Weather from '../_modules/weather/weather'\nimport OwnersArea from '../_modules/owners-area/owners-area-modal'\n\nimport { documentReady, windowResize } from './helper-functions'\nimport { quoteTestimonials } from '../_modules/quote-testimonials/quote-testimonials'\n\nclass Main {\n  constructor() {\n    this.body = document.body\n    this.homepageHero = document.getElementById('homepage')\n\n    this.globalLogo = document.querySelector('.logo')\n    this.globalHeader = document.querySelector('.global-header-wrapper')\n    this.topMessageBar = document.querySelector('.top-header')\n    this.burgerBtn = document.querySelector('.burger')\n    this.globalNav = document.querySelector('.global-nav')\n    this.subBar = document.querySelector('.sub-bar')\n    this.globalFooter = document.querySelector('.global-footer')\n    this.filters = document.getElementById('global-page-filters')\n\n    this.galleryModal = document.getElementById('galleries')\n    this.sideBarToStick = document.querySelector('section.about-yacht .sticky-sidebar')\n    this.homeSlider = document.querySelector('.hero-home')\n    this.brokerageFiltersDom = document.querySelector('.filters--brokerage')\n    this.charterGrid = document.querySelector('.charter-fleet #yacht-grid')\n    this.shortlistModal = document.getElementById('shortlistModal')\n\n    this.fixedTopValue = 0\n    this.fixedTopValues = []\n    this.headerSnapPoint = 450\n\n    $(document).foundation()\n    this.legacyCode()\n    this.init()\n  }\n\n  init() {\n    // appInit: '/assets/js/components/setup/init',\n    // global: '/assets/js/app/app', ✓\n    // header: '/assets/js/components/header/header', ✓\n    // footer: '/assets/js/components/footer/footer', ✓\n    // home: '/assets/js/app/index', ✓\n    // brokerage: '/assets/js/app/brokerage', ✓\n    // charter: '/assets/js/app/charter', ⤫\n    // yachts: '/assets/js/app/yachts', ⤫\n\n    // brokerage_filters: '/assets/js/components/util/brokerage-filters', ✓\n    // charter_filters: '/assets/js/components/util/charter-filters', ✓\n    // social_grid: '/assets/js/components/util/social-grid', ✓\n    // breakpoints: '/assets/js/components/util/breakpoints', ✓\n    // map: '/assets/js/components/util/map',\n    // gallery_fullscreen: '/assets/js/components/util/gallery-full',\n    // gallery_modal: '/assets/js/components/util/gallery-modal', ✓\n    // shortlist: '/assets/js/components/util/shortlist', ✓\n    // weather: '/assets/js/components/util/weather', ✓\n    // validateForm: '/assets/js/components/util/validate-form', ✓\n    // weather_icons: '/assets/js/components/util/weather-icons', ✓\n    // ownersAreaModal: '/assets/js/components/util/owners-area-modal', ✓\n    // average_climate_data: '/assets/js/components/util/average-climate-data' ✓\n\n    this.maps()\n\n    quoteTestimonials()\n\n    const header = new GlobalHeader()\n\n    // Cookie message, pass the posistionElements method to allow it to be dismissed.\n    const topMessageBar = new TopMessageBar(this.topMessageBar, this.positionElements.bind(this))\n    const nav = new GlobalNav(this.globalNav, this.burgerBtn, document.body)\n    const subNav = new SubBar(this.subBar)\n    const filters = new Filters()\n    const burger = new Burger(this.burgerBtn, nav)\n    const footer = this.globalFooter && new GlobalFooter()\n    const gallery = new GalleryModal(this.galleryModal, header)\n    const homepage = this.homepageHero && new Homepage()\n    const brokerageFilters = this.brokerageFiltersDom && new BrokerageFilters()\n    const charterFilters = this.charterGrid && new CharterFilters()\n    const shortlist = this.shortlistModal && new Shortlist()\n    const weather = new Weather()\n    const owenersArea = new OwnersArea()\n\n    this.scrollReativeElements = [topMessageBar, header, gallery, nav, subNav, filters]\n\n    this.scrollEvents()\n    this.positionElements(window.scrollY)\n\n    this.enableSelect2()\n  }\n\n  windowReszing(tabSets) {\n    let resizeTimer\n    let windowWidth = window.innerWidth\n\n    windowResize(window, 'resize', () => {\n      clearTimeout(resizeTimer)\n\n      resizeTimer = setTimeout(() => {\n        // Run code here, resizing has \"stopped\"\n        if (windowWidth !== window.innerWidth) {\n          windowWidth = window.innerWidth\n\n          Array.from(tabSets).forEach(tabSet => tabSet.setSizes())\n        }\n      }, 250)\n    }, true)\n  }\n\n  scrollEvents() {\n    let lastKnownScrollPosition = window.scrollY\n    let ticking = false\n\n    document.addEventListener('scroll', () => {\n      lastKnownScrollPosition = window.scrollY\n\n      if (!ticking) {\n        window.requestAnimationFrame(() => {\n          this.positionElements(lastKnownScrollPosition)\n          ticking = false\n        })\n        ticking = true\n      }\n    })\n  }\n\n  positionElements(lastKnownScrollPosition) {\n    const topValues = [10]\n    let fixedTopValue = 10\n    for (let i = 0; i < this.scrollReativeElements.length; i += 1) {\n      const lastModuleHeight = this.scrollReativeElements[i].snapPointCheck({\n        lastKnownScrollPosition,\n        fixedTopValue,\n        topValues,\n        headerSnapPoint: this.headerSnapPoint,\n      })\n\n      topValues.push(lastModuleHeight)\n      fixedTopValue += lastModuleHeight\n    }\n  }\n\n  maps() {\n    // load googleMaps\n    try {\n      googleMaps.load({ async: true })\n    } catch (e) {\n      console.log('google maps error: ', e)\n    }\n  }\n\n  // TODO: Break this up into modules.\n  legacyCode() {\n    document.addEventListener('lazybeforeunveil', (e) => {\n      const bg = e.target.getAttribute('data-bg')\n      if (bg) {\n        e.target.style.backgroundImage = `url(${bg})`\n      }\n    })\n\n    //  ---- SHARE BUTTON -----  //\n\n    let shareListBtn\n    let shareListChosen\n\n    function openShareList() {\n      $(shareListBtn).removeClass('tooltip-left share-icon-tooltip')\n      $(shareListChosen).removeClass('hide')\n      $(shareListChosen).addClass('share-list-visible')\n    }\n\n    function closeShareLists() {\n      $('.share-list').removeClass('share-list-visible')\n      setTimeout(() => {\n        $('.share-list').addClass('hide')\n        // Remove the tooltip while the share-list is open.\n        $(shareListBtn).addClass('tooltip-left share-icon-tooltip')\n      }, 250)\n    }\n\n    $('.share .share-icon').on('click', (e) => {\n      shareListBtn = e.currentTarget\n      shareListChosen = $(shareListBtn).next('.share-list')\n      if ($(shareListChosen).hasClass('share-list-visible')) {\n        closeShareLists()\n      } else {\n        openShareList()\n      }\n    })\n\n    $(document).on('click', (event) => {\n      if (!$(event.target).closest('.share').length) {\n        closeShareLists()\n      }\n    })\n\n    //  ---- *end* SHARE BUTTON *end* -----  //\n\n    $('.aside-header').on('click', () => {\n      if ($('.overview-stuck').hasClass('overview-contents-hidden')) {\n        $('.overview-download').data('closed-once', true)\n        $('.overview-stuck').removeClass('overview-contents-hidden')\n      } else {\n        $('.overview-download').data('closed-once', false)\n        $('.overview-stuck').addClass('overview-contents-hidden')\n      }\n    })\n\n    // opens and closes the the table when snapped on the header\n    $('.sticky-sidebar-header .header').on('click', () => {\n      $(this).next().toggle(0)\n    })\n\n    $('.slider-pager a').on('click', (e) => {\n      const jumpToHash = $(e.currentTarget).attr('href')\n      $(jumpToHash)[0].scrollIntoView()\n    })\n\n    //  ---- VIEW GALLERY POP UP -----  //\n\n    if ($('#layout-slider .cycle-slide').length > 1) {\n      const firstImage = $('#layout-slider .cycle-slide img:first')\n      firstImage.on('load', () => {\n        $('#layout-slider').cycle({\n          slides: '> div',\n          paused: true,\n          pager: '.slider-pager',\n          pagerTemplate: '',\n          autoHeight: 'container',\n          log: false,\n        })\n\n        $('#layout-slider').css('height', $(firstImage).height())\n      })\n\n      firstImage.attr('src', `${firstImage.attr('src')}?_=${(new Date().getTime())}`)\n    }\n\n    // --- Media Centre Gallery Select --- //\n\n    $('.select-gallery-wrapper select').each((index, element) => {\n      $(element).on('change', (e) => {\n        $(element).siblings('a').attr('href', e.currentTarget.value)\n      })\n    })\n  }\n\n  windowResize() {\n    let resizeTimer = {}\n\n    $(window).on('resize', () => {\n      clearTimeout(resizeTimer)\n      resizeTimer = setTimeout(() => {\n        // Run code here, resizing has \"stopped\"\n        this.sideBarStick()\n        this.checkForTabs()\n        this.enableSelect2()\n        this.stackedBlocks()\n        Foundation.Equalizer\n        this.yachtHeroSlideHeight()\n      }, 250)\n    })\n  }\n\n  sideBarStick() {\n    const { sideBarToStick } = this\n\n    function snapBar(action) {\n      if ($(sideBarToStick).hasClass('overview-stuck') && action === 'unstick') {\n        $(sideBarToStick).css({ position: '', top: '', width: '' })\n        $(sideBarToStick).removeClass('overview-stuck')\n      } else if (action === 'stick' && !$(sideBarToStick).hasClass('overview-stuck')) {\n        // const fixedDistance = $(sideBarToStick).offset().top - $(window).scrollTop()\n        const widthSide = $(sideBarToStick)[0].getBoundingClientRect().width\n        $(sideBarToStick).css({ position: 'fixed', top: '55px', width: widthSide })\n        $(sideBarToStick).addClass('overview-stuck')\n      }\n    }\n\n    if ($(sideBarToStick).length > 0) {\n      // const sideBarLocalPos = $(sideBarToStick).position().top\n      const sideBarHeight = $(sideBarToStick).height()\n\n      $(window).on('scroll', () => {\n        if ($(window).scrollTop() > $('.about-yacht').offset().top + 15 && Foundation.MediaQuery.atLeast('large')) {\n          snapBar('stick')\n        } else {\n          snapBar('unstick')\n        }\n\n        if ($(window).scrollTop() > $('.about-yacht').offset().top + $('.about-yacht').height() - (sideBarHeight + 55) && Foundation.MediaQuery.atLeast('large')) {\n\n          if ($('.overview-download').data('closed-once') !== true) {\n            $('.overview-download').addClass('overview-contents-hidden')\n          }\n        } else {\n          $('.overview-download').removeClass('overview-contents-hidden')\n        }\n      })\n    }\n  }\n\n  scroller() {\n    const controller = new ScrollMagic.Controller()\n    let lastId = null\n\n    const locaSubNav = $('[data-local-subnav]') || {}\n    const locaSubNavHeight = locaSubNav.outerHeight()\n    const localSubNavItems = locaSubNav.find('.local-subnav a')\n    const localSubNavItemsMap = localSubNavItems.map(function () {\n      if ($(this).attr('href')) {\n        const item = $(this).attr('href').trim()\n\n        if (item.toString().substring(0, 1) === '#') {\n          if (item.length) return item\n        }\n      }\n    })\n\n    this.sideBarStick()\n\n    // Simple Scroll spy for the Local SubNAV\n    $(window).scroll(function () {\n      // Get container scroll position\n      const fromTop = $(this).scrollTop() + locaSubNavHeight\n\n      // Get id of current scroll item\n      let cur = localSubNavItemsMap.map(function () {\n        if ($(this).offset().top < fromTop) return this\n      })\n\n      // Get the id of the current element\n      cur = cur[cur.length - 1]\n      const id = cur && cur.length ? cur[0].id : ''\n\n      if (lastId !== id) {\n        lastId = id\n\n        // Set/remove active class\n        localSubNavItems.parent().removeClass('active').end().filter(\"[href='#\" + id + \"']\").parent().addClass('active')\n      }\n    })\n\n    // Yacht nav - scroll to section\n    locaSubNav.on('click', '.scroll', function (e) {\n      e.preventDefault()\n\n      $('html, body').animate({\n        scrollTop: ($($(this).attr('href')).position().top) - 100,\n      }, 700)\n    })\n  }\n\n  checkForTabs() {\n    if ($('.sliding-tabs').length >= 1) {\n      this.slidingTabs()\n      $('.sliding-tabs').each((index, element) => { this.slidingTabs(element) })\n    }\n  }\n\n  slidingTabs(tabSet) {\n    const tabs = $(tabSet).find('li')\n    const numOfTabs = $(tabs).length\n    const tabWidth = 100 / numOfTabs + '%'\n    let firstPositionUnderTab\n    const tabContainer = $(tabSet).find('.tab-slider-container')\n    const tabSlider = $(tabSet).find('.tab-slider')\n\n    $(tabSlider).css({ width: '' })\n    $(tabContainer).css({ width: '' })\n    $(tabSet).find('ul').css({ width: '' })\n\n    $(tabSlider).css({ width: tabWidth })\n    $(tabContainer).css({ width: $(tabs).width() * $(tabs).length })\n    $(tabSet).find('ul').css({ width: $(tabs).width() * $(tabs).length })\n\n    $(tabs).each((index, element) => {\n      const positionUnderTab = 100 * index + '%'\n      $(element).data('transform-pos', positionUnderTab)\n      if ($(element).hasClass('is-active')) {\n        if (index !== 0) {\n          firstPositionUnderTab = positionUnderTab\n        } else {\n          firstPositionUnderTab = '0%'\n        }\n      }\n    })\n\n    $(tabSlider).css({ transform: `translateX(${firstPositionUnderTab})` })\n\n    $(tabs).on('click', function () {\n      const moveHere = $(this).data('transform-pos')\n      $(tabSlider).css({ transform: `translateX(${moveHere})` })\n      $(this).data('transform-pos')\n    })\n  }\n\n\n  enableSelect2() {\n    select2(window, $)\n    $('select').select2({ minimumResultsForSearch: -1 })\n  }\n\n  stackedBlocks() {\n    const stackedBlocks = '.heritage-blocks .stacked-blocks'\n\n    if ($(stackedBlocks).length > 0) {\n      if (Foundation.MediaQuery.atLeast('large')) {\n        $(`${stackedBlocks} .stacked-block:nth-child(3n - 1)`).addClass('container-col2')\n        $(`${stackedBlocks} .stacked-block:nth-child(3n)`).addClass('container-col3')\n\n        $('.container-col2').appendTo(stackedBlocks).removeClass('container-col2')\n        $('.container-col3').appendTo(stackedBlocks).removeClass('container-col3')\n      } else if (Foundation.MediaQuery.current === 'medium') {\n        $(`${stackedBlocks} .stacked-block:nth-child(even)`).addClass('container-col2')\n\n        $('.container-col2').appendTo(stackedBlocks).removeClass('container-col2')\n      }\n\n      $('.heritage-blocks .stacked-blocks').addClass('active')\n    }\n  }\n\n  yachtHeroSlideHeight() {\n    $('.hero.full-screen').height($(window).height() - $('.global-header').height())\n  }\n}\n\ndocumentReady().then(() => { new Main() })\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}